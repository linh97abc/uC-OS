
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x200201c0

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x0000d938 memsz 0x0000d938 flags r-x
    LOAD off    0x0000f000 vaddr 0x00000000 paddr 0x2002d958 align 2**12
         filesz 0x00001c84 memsz 0x00009060 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d798  200201c0  200201c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000190  00000000  2002d958  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00000190  2002dae8  0000f190  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  00001c84  2002f5dc  00010c84  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00009060  00009060  00010c84  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  2002f5dc  2002f5dc  00010c84  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010c84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b68  00000000  00000000  00010ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001fb00  00000000  00000000  00011810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007a7e  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008e20  00000000  00000000  00038d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000025a4  00000000  00000000  00041bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000033a5  00000000  00000000  00044154  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  000474f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0004bf48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000668  00000000  00000000  0004bf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000503e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  000503ec  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000503f6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000503f7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000503f8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000503fc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00050400  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00050404  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005040d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00050416  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005041f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  0005042a  2**0
                  CONTENTS, READONLY
 30 .jdi          0000535d  00000000  00000000  0005045c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005c4fa  00000000  00000000  000557b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
200201c0 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000190 l    d  .rwdata	00000000 .rwdata
00001c84 l    d  .bss	00000000 .bss
00009060 l    d  .sdram	00000000 .sdram
2002f5dc l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_bsp//obj/HAL/src/crt0.o
20020208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
20020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00001c84 l     O .bss	00000004 pevent
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
200204c8 l     F .text	00000008 __fp_unlock
200204dc l     F .text	0000019c __sinit.part.1
20020678 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000190 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
20023124 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
20023230 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002325c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
20023348 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
20023428 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
20023514 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
200236e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001bf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
2002392c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00001bfc l     O .rwdata	00000004 lockid
00001ca8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00001c00 l     O .rwdata	00000004 lockid
00001cb0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
2002535c l     F .text	00000048 OS_InitMisc
200253a4 l     F .text	0000006c OS_InitRdyList
20025510 l     F .text	000000e4 OS_InitTCBList
2002527c l     F .text	000000e0 OS_InitEventList
20025410 l     F .text	00000080 OS_InitTaskIdle
20025490 l     F .text	00000080 OS_InitTaskStat
20025780 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
20027490 l     F .text	000000f4 OS_FlagTaskRdy
20027250 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
2002b534 l     F .text	00000034 alt_dev_reg
00000b64 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2002b8b0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
2002bb54 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2002c330 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2002c598 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2002ca0c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
2002cb4c l     F .text	0000003c alt_get_errno
2002cb88 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001c4e g     O .rwdata	00000002 OSTaskNameSize
20022f1c g     F .text	00000054 _isatty_r
20023624 g     F .text	000000bc alt_main
2002035c g     F .text	000000c0 _puts_r
00008f60 g     O .bss	00000100 alt_irq
20022c44 g     F .text	00000060 _lseek_r
20027cb0 g     F .text	000000cc OS_MemInit
2002dae8 g       *ABS*	00000000 __flash_rwdata_start
2002b4d4 g     F .text	00000060 OSTimeSet
20023fd0 g     F .text	00000610 OSEventPendMulti
00009060 g       *ABS*	00000000 __alt_heap_start
2002d194 g     F .text	00000024 OSTaskCreateHook
00001d3c g     O .bss	00002000 task1_stk
00001c26 g     O .rwdata	00000002 OSMboxEn
20024638 g     F .text	0000004c OSIntEnter
200221f8 g     F .text	0000005c __sseek
20020818 g     F .text	00000010 __sinit
00001c36 g     O .rwdata	00000002 OSQEn
20020680 g     F .text	00000068 __sfmoreglue
20023ca4 g     F .text	000000cc __malloc_unlock
2002d1fc g     F .text	00000020 OSTaskStatHook
00001cb8 g     O .bss	00000001 OSLockNesting
00001c74 g     O .rwdata	00000002 OSDataSize
00001cb9 g     O .bss	00000001 OSRunning
200218e4 g     F .text	0000015c memmove
2002d23c g     F .text	00000020 OSInitHookBegin
00001c6c g     O .rwdata	00000002 OSTmrSize
20020800 g     F .text	00000018 _cleanup
00001cbc g     O .bss	00000004 OSIdleCtr
2002d014 g       .text	00000000 OSStartTsk
20025ab0 g     F .text	000002d4 OS_TCBInit
20020000 g     F .entry	0000001c __reset
00001c72 g     O .rwdata	00000002 OSTmrWheelTblSize
20020020 g       *ABS*	00000000 __flash_exceptions_start
00001c12 g     O .rwdata	00000002 OSEventSize
00001cc0 g     O .bss	00000001 OSPrioHighRdy
20022ec0 g     F .text	0000005c _fstat_r
2002d1b8 g     F .text	00000024 OSTaskDelHook
00001c94 g     O .bss	00000004 errno
20022174 g     F .text	00000008 __seofread
2002cff4 g       .text	00000000 OSStartHighRdy
20029f7c g     F .text	000001e4 OSTaskCreateExt
20026d98 g     F .text	00000060 OSFlagPendGetFlagsRdy
00001c52 g     O .rwdata	00000002 OSTaskStatStkSize
20025f14 g     F .text	00000308 OSFlagAccept
200282e8 g     F .text	000000b8 OSQFlush
20027d7c g     F .text	00000140 OSQAccept
00001ca0 g     O .bss	00000004 alt_argv
00009bd0 g       *ABS*	00000000 _gp
20029dd0 g     F .text	000001ac OSTaskCreate
200298e0 g     F .text	000004f0 OSTaskChangePrio
00001cb4 g     O .bss	00000004 alt_heapsem
20025d84 g     F .text	00000190 OSDebugInit
2002a160 g     F .text	00000344 OSTaskDel
000009e4 g     O .rwdata	00000180 alt_fd_list
00005d3c g     O .bss	00000370 OSFlagTbl
2002505c g     F .text	000000b8 OS_EventTaskRemove
2002d2c0 g     F .text	00000090 alt_find_dev
2002179c g     F .text	00000148 memcpy
00001c3c g     O .rwdata	00000002 OSRdyTblSize
200204d0 g     F .text	0000000c _cleanup_r
2002cad0 g     F .text	0000007c alt_io_redirect
2002d958 g       *ABS*	00000000 __DTOR_END__
2002041c g     F .text	00000014 puts
20023d70 g     F .text	00000120 OSEventNameGet
00001c20 g     O .rwdata	00000002 OSFlagMax
20024684 g     F .text	000000f8 OSIntExit
00001c5a g     O .rwdata	00000002 OSTCBSize
00001cc1 g     O .bss	00000001 OSPrioCur
2002bdb0 g     F .text	000002bc altera_avalon_jtag_uart_read
20023068 g     F .text	00000064 .hidden __udivsi3
20023384 g     F .text	000000a4 isatty
00001c40 g     O .rwdata	00000002 OSStkWidth
00001c34 g     O .rwdata	00000002 OSPtrSize
00001c14 g     O .rwdata	00000002 OSEventTblSize
2002cf68 g       .text	00000000 OSCtxSw
2002d534 g     F .text	00000090 alt_icache_flush
00001c90 g     O .bss	00000004 __malloc_top_pad
00001cc4 g     O .bss	00000004 OSTCBList
00001c98 g     O .bss	00000004 alt_fd_list_lock
20020868 g     F .text	000004bc __sfvwrite_r
000060ac g     O .bss	00000c30 OSMemTbl
00001cc8 g     O .bss	00000001 OSTickStepState
200220cc g     F .text	00000054 _sbrk_r
00001c38 g     O .rwdata	00000002 OSQMax
00006cdc g     O .bss	00000800 OSTaskStatStk
200278ec g     F .text	000000f0 OSMemNameGet
00001c18 g     O .rwdata	00000002 OSFlagEn
20022e60 g     F .text	00000060 _read_r
00001c5e g     O .rwdata	00000002 OSTimeTickHookEn
20028798 g     F .text	00000168 OSQPost
20027584 g     F .text	000000a4 OS_FlagUnlink
00001bf0 g     O .rwdata	00000004 alt_max_fd
20025648 g     F .text	00000068 OS_MemCopy
200256b0 g     F .text	000000d0 OS_Sched
20022464 g     F .text	000000f0 _fclose_r
200277fc g     F .text	000000f0 OSMemGet
2002a78c g     F .text	000001b4 OSTaskNameSet
200227e0 g     F .text	00000030 fflush
00001c8c g     O .bss	00000004 __malloc_max_sbrked_mem
00001ccc g     O .bss	00000004 OSCtxSwCtr
2002d21c g     F .text	00000020 OSTimeTickHook
00001c22 g     O .rwdata	00000002 OSFlagNameSize
20025114 g     F .text	00000100 OS_EventTaskRemoveMulti
20024f0c g     F .text	00000150 OS_EventTaskWaitMulti
00001c3a g     O .rwdata	00000002 OSQSize
20023550 g     F .text	000000d4 lseek
20029248 g     F .text	0000020c OSSemPend
00001bd0 g     O .rwdata	00000004 _global_impure_ptr
20021b68 g     F .text	00000564 _realloc_r
00001c24 g     O .rwdata	00000002 OSLowestPrio
00009060 g       *ABS*	00000000 __bss_end
2002c91c g     F .text	000000f0 alt_iic_isr_register
2002d29c g     F .text	00000024 OSTCBInitHook
00001c6a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
2002ce3c g     F .text	00000108 alt_tick
00001c0c g     O .rwdata	00000002 OSEventEn
00001c66 g     O .rwdata	00000002 OSTmrCfgNameSize
20020838 g     F .text	00000018 __fp_lock_all
2002c8d0 g     F .text	0000004c alt_ic_irq_enabled
200273b0 g     F .text	000000e0 OS_FlagInit
2002cda0 g     F .text	0000009c alt_alarm_stop
00001c48 g     O .rwdata	00000002 OSTaskIdleStkSize
00001d08 g     O .bss	00000004 alt_irq_active
20028e80 g     F .text	000000b0 OSSemAccept
20027af0 g     F .text	000000d8 OSMemPut
20027628 g     F .text	000001d4 OSMemCreate
00001cd0 g     O .bss	00000004 OSIdleCtrMax
200200ec g     F .exceptions	000000d4 alt_irq_handler
000009bc g     O .rwdata	00000028 alt_dev_null
00001c5c g     O .rwdata	00000002 OSTicksPerSec
2002cf68 g       .text	00000000 OSIntCtxSw
2002c550 g     F .text	00000048 alt_dcache_flush_all
00001cd4 g     O .bss	00000004 OSTCBFreeList
00001c84 g       *ABS*	00000000 __ram_rwdata_end
20029454 g     F .text	0000016c OSSemPendAbort
00001be8 g     O .rwdata	00000008 alt_dev_list
20023968 g     F .text	000000f8 write
00001c60 g     O .rwdata	00000002 OSVersionNbr
00000190 g       *ABS*	00000000 __ram_rodata_end
20023298 g     F .text	000000b0 fstat
00001c08 g     O .rwdata	00000004 OSEndiannessTest
200230cc g     F .text	00000058 .hidden __umodsi3
00001c1a g     O .rwdata	00000002 OSFlagGrpSize
00009060 g       *ABS*	00000000 end
2002b768 g     F .text	00000148 altera_avalon_jtag_uart_init
20025918 g     F .text	000000cc OS_TaskStat
2002d958 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
2002c3a8 g     F .text	0000007c alt_avalon_timer_sc_init
2002c06c g     F .text	000002c4 altera_avalon_jtag_uart_write
20020828 g     F .text	00000004 __sfp_lock_acquire
200216b8 g     F .text	000000e4 memchr
200255f4 g     F .text	00000054 OS_MemClr
2002d038 g     F .text	0000015c OSTaskStkInit
2002020c g     F .text	00000044 task1
20022934 g     F .text	00000310 _free_r
20024c64 g     F .text	00000198 OS_EventTaskRdy
2002d7a4 g     F .text	00000180 __call_exitprocs
00001cd8 g     O .bss	00000001 OSCPUUsage
00001bd8 g     O .rwdata	00000004 __malloc_sbrk_base
200201c0 g     F .text	0000004c _start
20020250 g     F .text	00000048 task2
00001d0c g     O .bss	00000004 _alt_tick_rate
200283a0 g     F .text	0000028c OSQPend
2002b04c g     F .text	00000104 OSTimeDly
00001d10 g     O .bss	00000004 _alt_nticks
2002371c g     F .text	000000fc read
2002b5a0 g     F .text	00000064 alt_sys_init
2002d68c g     F .text	00000118 __register_exitproc
00001cd9 g     O .bss	00000001 OSTaskCtr
2002b150 g     F .text	00000154 OSTimeDlyHMSM
2002bc58 g     F .text	00000068 altera_avalon_jtag_uart_close
00000190 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001d14 g     O .bss	00000028 __malloc_current_mallinfo
00001c0e g     O .rwdata	00000002 OSEventMax
200295c0 g     F .text	00000110 OSSemPost
20024808 g     F .text	000000dc OSSchedUnlock
2002b604 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2002d458 g     F .text	000000dc alt_get_fd
00001cdc g     O .bss	00000004 OSMemFreeList
20024954 g     F .text	000000b0 OSStatInit
2002718c g     F .text	000000c4 OSFlagQuery
00001c44 g     O .rwdata	00000002 OSTaskCreateExtEn
20022410 g     F .text	00000054 _close_r
2002d610 g     F .text	0000007c memcmp
20024c44 g     F .text	00000020 OS_Dummy
2002b6c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009060 g       *ABS*	00000000 __alt_stack_base
2002b714 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
200222bc g     F .text	00000154 __swsetup_r
000074dc g     O .bss	000001e0 OSQTbl
200206e8 g     F .text	00000118 __sfp
000005b4 g     O .rwdata	00000408 __malloc_av_
20020834 g     F .text	00000004 __sinit_lock_release
00001ce0 g     O .bss	00000004 OSTCBHighRdy
20022120 g     F .text	00000054 __sread
00001ce4 g     O .bss	00000004 OSQFreeList
2002d350 g     F .text	00000108 alt_find_file
2002c5d4 g     F .text	000000a4 alt_dev_llist_insert
20023b84 g     F .text	00000120 __malloc_lock
2002387c g     F .text	000000b0 sbrk
20023e90 g     F .text	00000140 OSEventNameSet
20022784 g     F .text	0000005c _fflush_r
00001ce8 g     O .bss	00000001 OSRdyGrp
00001c84 g       *ABS*	00000000 __bss_start
20021a40 g     F .text	00000128 memset
20020298 g     F .text	000000c4 main
00001ca4 g     O .bss	00000004 alt_envp
00001c88 g     O .bss	00000004 __malloc_max_total_mem
2002b664 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000005c g     O .rodata	00000100 OSUnMapTbl
00001c3e g     O .rwdata	00000002 OSSemEn
20026df8 g     F .text	00000394 OSFlagPost
20022254 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
20022554 g     F .text	00000014 fclose
20024dfc g     F .text	00000110 OS_EventTaskWait
00003d3c g     O .bss	00002000 task2_stk
200259e4 g     F .text	000000cc OS_TaskStatStkChk
2002a4a4 g     F .text	00000150 OSTaskDelReq
20020eac g     F .text	0000080c _malloc_r
00001bf4 g     O .rwdata	00000004 alt_errno
200248e4 g     F .text	00000070 OSStart
20023b24 g     F .text	00000060 __env_unlock
20020d24 g     F .text	000000c4 _fwalk
2002a940 g     F .text	000001d4 OSTaskResume
20027bc8 g     F .text	000000e8 OSMemQuery
00001c50 g     O .rwdata	00000002 OSTaskStatEn
00001c2a g     O .rwdata	00000002 OSMemMax
20028900 g     F .text	00000170 OSQPostFront
20022f70 g     F .text	00000084 .hidden __divsi3
00001ce9 g     O .bss	00000003 OSRdyTbl
00001c04 g     O .rwdata	00000002 OSDebugEn
20022810 g     F .text	00000124 _malloc_trim_r
2002d958 g       *ABS*	00000000 __CTOR_END__
00001c1c g     O .rwdata	00000002 OSFlagNodeSize
00001c64 g     O .rwdata	00000002 OSTmrCfgMax
20027ebc g     F .text	000001ac OSQCreate
2002a5f4 g     F .text	00000198 OSTaskNameGet
2002d958 g       *ABS*	00000000 __flash_rodata_start
20028a70 g     F .text	0000020c OSQPostOpt
20024a04 g     F .text	00000220 OSTimeTick
00001c4c g     O .rwdata	00000002 OSTaskMax
2002d958 g       *ABS*	00000000 __DTOR_LIST__
20028f30 g     F .text	000000d8 OSSemCreate
00001c70 g     O .rwdata	00000002 OSTmrWheelSize
00001c46 g     O .rwdata	00000002 OSTaskDelEn
200296d0 g     F .text	00000110 OSSemQuery
20028068 g     F .text	00000280 OSQDel
2002862c g     F .text	0000016c OSQPendAbort
2002b568 g     F .text	00000038 alt_irq_init
20023818 g     F .text	00000064 alt_release_fd
2002d5c4 g     F .text	00000014 atexit
2002225c g     F .text	00000060 _write_r
2002477c g     F .text	0000008c OSSchedLock
2002621c g     F .text	00000108 OSFlagCreate
00001bd4 g     O .rwdata	00000004 _impure_ptr
00001c9c g     O .bss	00000004 alt_argc
20022568 g     F .text	0000021c __sflush_r
2002c6d8 g     F .text	00000060 _do_dtors
00001c16 g     O .rwdata	00000002 OSEventMultiEn
20026324 g     F .text	00000248 OSFlagDel
00001cec g     O .bss	00000004 OSEventFreeList
20020020 g       .exceptions	00000000 alt_irq_entry
200267e0 g     F .text	000005b8 OSFlagPend
00001c62 g     O .rwdata	00000002 OSTmrEn
20020850 g     F .text	00000018 __fp_unlock_all
00001be0 g     O .rwdata	00000008 alt_fs_list
200257f4 g     F .text	00000074 OS_StrCopy
00001c2c g     O .rwdata	00000002 OSMemNameSize
2002d25c g     F .text	00000020 OSInitHookEnd
20020020 g       *ABS*	00000000 __ram_exceptions_start
00001c58 g     O .rwdata	00000002 OSTCBPrioTblMax
20020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00001c54 g     O .rwdata	00000002 OSTaskStatStkChkEn
2002c76c g     F .text	00000050 alt_ic_isr_register
00001c28 g     O .rwdata	00000002 OSMemEn
00001c32 g     O .rwdata	00000002 OSMutexEn
00001c84 g       *ABS*	00000000 _edata
00009060 g       *ABS*	00000000 _end
00001cf0 g     O .bss	00000001 OSIntNesting
200201c0 g       *ABS*	00000000 __ram_exceptions_end
2002bcc0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
2002b2a4 g     F .text	000001d4 OSTimeDlyResume
20026694 g     F .text	0000014c OSFlagNameSet
2002ab14 g     F .text	000001c0 OSTaskStkChk
2002c844 g     F .text	0000008c alt_ic_irq_disable
00001c2e g     O .rwdata	00000002 OSMemSize
2002217c g     F .text	0000007c __swrite
00001bdc g     O .rwdata	00000004 __malloc_trim_threshold
2002cf44 g     F .text	00000024 altera_nios2_qsys_irq_init
00001cf4 g     O .bss	00000004 OSTCBCur
2002d5d8 g     F .text	00000038 exit
00001c30 g     O .rwdata	00000002 OSMemTblSize
20020de8 g     F .text	000000c4 _fwalk_reent
20022ff4 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
2002082c g     F .text	00000004 __sfp_lock_release
200245e0 g     F .text	00000058 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
2002aeb8 g     F .text	00000124 OSTaskQuery
20028dd8 g     F .text	000000a8 OS_QInit
20025868 g     F .text	00000054 OS_StrLen
200279dc g     F .text	00000114 OSMemNameSet
00001c4a g     O .rwdata	00000002 OSTaskProfileEn
00001cf8 g     O .bss	00000004 OSTime
000076bc g     O .bss	00000800 OSTaskIdleStk
2002d924 g     F .text	00000034 _exit
2002c424 g     F .text	0000012c alt_alarm_start
2002656c g     F .text	00000128 OSFlagNameGet
2002b478 g     F .text	0000005c OSTimeGet
20022ca4 g     F .text	000001bc __smakebuf_r
20020430 g     F .text	00000098 strlen
2002d1dc g     F .text	00000020 OSTaskSwHook
2002cc4c g     F .text	00000154 open
00007ebc g     O .bss	00000b40 OSEventTbl
000089fc g     O .bss	00000510 OSTCBTbl
200297e0 g     F .text	00000100 OSSemSet
2002c738 g     F .text	00000034 alt_icache_flush_all
00001c78 g     O .rwdata	00000004 alt_priority_mask
20029008 g     F .text	00000240 OSSemDel
00001cfc g     O .bss	00000004 OSFlagFreeList
2002c7bc g     F .text	00000088 alt_ic_irq_enable
00001c10 g     O .rwdata	00000002 OSEventNameSize
00001d00 g     O .bss	00000001 OSStatRdy
00008f0c g     O .bss	00000054 OSTCBPrioTbl
20023a60 g     F .text	000000c4 __env_lock
00001c56 g     O .rwdata	00000002 OSTaskSwHookEn
00001c7c g     O .rwdata	00000008 alt_alarm_list
00001c1e g     O .rwdata	00000002 OSFlagWidth
2002c678 g     F .text	00000060 _do_ctors
20023160 g     F .text	000000d0 close
00001cac g     O .bss	00000004 alt_envsem
00001d04 g     O .bss	00000004 OSIdleCtrRun
20024c24 g     F .text	00000020 OSVersion
00001c68 g     O .rwdata	00000002 OSTmrCfgWheelSize
20023490 g     F .text	00000084 alt_load
2002afdc g     F .text	00000070 OS_TaskStkClr
00001c42 g     O .rwdata	00000002 OSTaskCreateEn
20025214 g     F .text	00000068 OS_EventWaitListInit
2002d27c g     F .text	00000020 OSTaskIdleHook
20020830 g     F .text	00000004 __sinit_lock_acquire
2002acd4 g     F .text	000001e4 OSTaskSuspend
200258bc g     F .text	0000005c OS_TaskIdle
00001c6e g     O .rwdata	00000002 OSTmrTblSize
20028c7c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <__flash_rwdata_start+0xffff251c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08407014 	ori	at,at,448
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_data_end+0x1c000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200ec0 	call	200200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000306 	br	20020098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2002008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)

20020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
20020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
20020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
2002009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200e8:	ef80083a 	eret

200200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200ec:	defff904 	addi	sp,sp,-28
200200f0:	dfc00615 	stw	ra,24(sp)
200200f4:	df000515 	stw	fp,20(sp)
200200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
200200fc:	00246380 	call	20024638 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020100:	0005313a 	rdctl	r2,ipending
20020104:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020114:	00800044 	movi	r2,1
20020118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002011c:	e0fffb17 	ldw	r3,-20(fp)
20020120:	e0bffc17 	ldw	r2,-16(fp)
20020124:	1884703a 	and	r2,r3,r2
20020128:	10001426 	beq	r2,zero,2002017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002012c:	00800074 	movhi	r2,1
20020130:	10a3d804 	addi	r2,r2,-28832
20020134:	e0fffd17 	ldw	r3,-12(fp)
20020138:	180690fa 	slli	r3,r3,3
2002013c:	10c5883a 	add	r2,r2,r3
20020140:	10c00017 	ldw	r3,0(r2)
20020144:	00800074 	movhi	r2,1
20020148:	10a3d804 	addi	r2,r2,-28832
2002014c:	e13ffd17 	ldw	r4,-12(fp)
20020150:	200890fa 	slli	r4,r4,3
20020154:	1105883a 	add	r2,r2,r4
20020158:	10800104 	addi	r2,r2,4
2002015c:	10800017 	ldw	r2,0(r2)
20020160:	1009883a 	mov	r4,r2
20020164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002016c:	0005313a 	rdctl	r2,ipending
20020170:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020174:	e0bfff17 	ldw	r2,-4(fp)
20020178:	00000706 	br	20020198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2002017c:	e0bffc17 	ldw	r2,-16(fp)
20020180:	1085883a 	add	r2,r2,r2
20020184:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020188:	e0bffd17 	ldw	r2,-12(fp)
2002018c:	10800044 	addi	r2,r2,1
20020190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
20020194:	003fe106 	br	2002011c <__flash_rwdata_start+0xffff2634>

    active = alt_irq_pending ();
20020198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
2002019c:	e0bffb17 	ldw	r2,-20(fp)
200201a0:	103fdb1e 	bne	r2,zero,20020110 <__flash_rwdata_start+0xffff2628>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200201a4:	00246840 	call	20024684 <OSIntExit>
}
200201a8:	0001883a 	nop
200201ac:	e037883a 	mov	sp,fp
200201b0:	dfc00117 	ldw	ra,4(sp)
200201b4:	df000017 	ldw	fp,0(sp)
200201b8:	dec00204 	addi	sp,sp,8
200201bc:	f800283a 	ret

Disassembly of section .text:

200201c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
200201c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
200201c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
200201c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
200201cc:	00bffd16 	blt	zero,r2,200201c4 <__flash_rwdata_start+0xffff26dc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
200201d0:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
200201d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
200201d8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
200201dc:	d6a6f414 	ori	gp,gp,39888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
200201e0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
200201e4:	10872114 	ori	r2,r2,7300

    movhi r3, %hi(__bss_end)
200201e8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
200201ec:	18e41814 	ori	r3,r3,36960

    beq r2, r3, 1f
200201f0:	10c00326 	beq	r2,r3,20020200 <_start+0x40>

0:
    stw zero, (r2)
200201f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
200201f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
200201fc:	10fffd36 	bltu	r2,r3,200201f4 <__flash_rwdata_start+0xffff270c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20020200:	00234900 	call	20023490 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20020204:	00236240 	call	20023624 <alt_main>

20020208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20020208:	003fff06 	br	20020208 <__flash_rwdata_start+0xffff2720>

2002020c <task1>:

static OS_EVENT *pevent;

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
2002020c:	defffd04 	addi	sp,sp,-12
20020210:	dfc00215 	stw	ra,8(sp)
20020214:	df000115 	stw	fp,4(sp)
20020218:	df000104 	addi	fp,sp,4
2002021c:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
20020220:	01000034 	movhi	r4,0
20020224:	21000004 	addi	r4,r4,0
20020228:	002041c0 	call	2002041c <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
2002022c:	000f883a 	mov	r7,zero
20020230:	018000c4 	movi	r6,3
20020234:	000b883a 	mov	r5,zero
20020238:	0009883a 	mov	r4,zero
2002023c:	002b1500 	call	2002b150 <OSTimeDlyHMSM>
    OSSemPost(pevent);
20020240:	d0a02d17 	ldw	r2,-32588(gp)
20020244:	1009883a 	mov	r4,r2
20020248:	00295c00 	call	200295c0 <OSSemPost>
  }
2002024c:	003ff406 	br	20020220 <__flash_rwdata_start+0xffff2738>

20020250 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
20020250:	defffc04 	addi	sp,sp,-16
20020254:	dfc00315 	stw	ra,12(sp)
20020258:	df000215 	stw	fp,8(sp)
2002025c:	df000204 	addi	fp,sp,8
20020260:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  while (1)
  { 
    OSSemPend(pevent, 100, &err);
20020264:	d0a02d17 	ldw	r2,-32588(gp)
20020268:	e1bffe04 	addi	r6,fp,-8
2002026c:	01401904 	movi	r5,100
20020270:	1009883a 	mov	r4,r2
20020274:	00292480 	call	20029248 <OSSemPend>
    if(err != OS_TIMEOUT)
20020278:	e0bffe03 	ldbu	r2,-8(fp)
2002027c:	10803fcc 	andi	r2,r2,255
20020280:	108002a0 	cmpeqi	r2,r2,10
20020284:	103ff71e 	bne	r2,zero,20020264 <__flash_rwdata_start+0xffff277c>
    {
    	printf("Hello from task2\n");
20020288:	01000034 	movhi	r4,0
2002028c:	21000504 	addi	r4,r4,20
20020290:	002041c0 	call	2002041c <puts>
    }
  }
20020294:	003ff306 	br	20020264 <__flash_rwdata_start+0xffff277c>

20020298 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
20020298:	defff904 	addi	sp,sp,-28
2002029c:	dfc00615 	stw	ra,24(sp)
200202a0:	df000515 	stw	fp,20(sp)
200202a4:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II\n");
200202a8:	01000034 	movhi	r4,0
200202ac:	21000a04 	addi	r4,r4,40
200202b0:	002041c0 	call	2002041c <puts>
  pevent = OSSemCreate(1);
200202b4:	01000044 	movi	r4,1
200202b8:	0028f300 	call	20028f30 <OSSemCreate>
200202bc:	d0a02d15 	stw	r2,-32588(gp)

  OSTaskCreateExt(task1,
200202c0:	d8000415 	stw	zero,16(sp)
200202c4:	d8000315 	stw	zero,12(sp)
200202c8:	00820004 	movi	r2,2048
200202cc:	d8800215 	stw	r2,8(sp)
200202d0:	00800034 	movhi	r2,0
200202d4:	10874f04 	addi	r2,r2,7484
200202d8:	d8800115 	stw	r2,4(sp)
200202dc:	00800044 	movi	r2,1
200202e0:	d8800015 	stw	r2,0(sp)
200202e4:	01c00044 	movi	r7,1
200202e8:	01800034 	movhi	r6,0
200202ec:	318f4e04 	addi	r6,r6,15672
200202f0:	000b883a 	mov	r5,zero
200202f4:	010800b4 	movhi	r4,8194
200202f8:	21008304 	addi	r4,r4,524
200202fc:	0029f7c0 	call	20029f7c <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
20020300:	d8000415 	stw	zero,16(sp)
20020304:	d8000315 	stw	zero,12(sp)
20020308:	00820004 	movi	r2,2048
2002030c:	d8800215 	stw	r2,8(sp)
20020310:	00800034 	movhi	r2,0
20020314:	108f4f04 	addi	r2,r2,15676
20020318:	d8800115 	stw	r2,4(sp)
2002031c:	00800084 	movi	r2,2
20020320:	d8800015 	stw	r2,0(sp)
20020324:	01c00084 	movi	r7,2
20020328:	01800034 	movhi	r6,0
2002032c:	31974e04 	addi	r6,r6,23864
20020330:	000b883a 	mov	r5,zero
20020334:	010800b4 	movhi	r4,8194
20020338:	21009404 	addi	r4,r4,592
2002033c:	0029f7c0 	call	20029f7c <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
20020340:	00248e40 	call	200248e4 <OSStart>
  return 0;
20020344:	0005883a 	mov	r2,zero
}
20020348:	e037883a 	mov	sp,fp
2002034c:	dfc00117 	ldw	ra,4(sp)
20020350:	df000017 	ldw	fp,0(sp)
20020354:	dec00204 	addi	sp,sp,8
20020358:	f800283a 	ret

2002035c <_puts_r>:
2002035c:	defff604 	addi	sp,sp,-40
20020360:	dc000715 	stw	r16,28(sp)
20020364:	2021883a 	mov	r16,r4
20020368:	2809883a 	mov	r4,r5
2002036c:	dc400815 	stw	r17,32(sp)
20020370:	dfc00915 	stw	ra,36(sp)
20020374:	2823883a 	mov	r17,r5
20020378:	00204300 	call	20020430 <strlen>
2002037c:	10c00044 	addi	r3,r2,1
20020380:	d8800115 	stw	r2,4(sp)
20020384:	00800034 	movhi	r2,0
20020388:	10800e04 	addi	r2,r2,56
2002038c:	d8800215 	stw	r2,8(sp)
20020390:	00800044 	movi	r2,1
20020394:	d8800315 	stw	r2,12(sp)
20020398:	00800084 	movi	r2,2
2002039c:	dc400015 	stw	r17,0(sp)
200203a0:	d8c00615 	stw	r3,24(sp)
200203a4:	dec00415 	stw	sp,16(sp)
200203a8:	d8800515 	stw	r2,20(sp)
200203ac:	80000226 	beq	r16,zero,200203b8 <_puts_r+0x5c>
200203b0:	80800e17 	ldw	r2,56(r16)
200203b4:	10001426 	beq	r2,zero,20020408 <_puts_r+0xac>
200203b8:	81400217 	ldw	r5,8(r16)
200203bc:	2880030b 	ldhu	r2,12(r5)
200203c0:	10c8000c 	andi	r3,r2,8192
200203c4:	1800061e 	bne	r3,zero,200203e0 <_puts_r+0x84>
200203c8:	29001917 	ldw	r4,100(r5)
200203cc:	00f7ffc4 	movi	r3,-8193
200203d0:	10880014 	ori	r2,r2,8192
200203d4:	20c6703a 	and	r3,r4,r3
200203d8:	2880030d 	sth	r2,12(r5)
200203dc:	28c01915 	stw	r3,100(r5)
200203e0:	d9800404 	addi	r6,sp,16
200203e4:	8009883a 	mov	r4,r16
200203e8:	00208680 	call	20020868 <__sfvwrite_r>
200203ec:	1000091e 	bne	r2,zero,20020414 <_puts_r+0xb8>
200203f0:	00800284 	movi	r2,10
200203f4:	dfc00917 	ldw	ra,36(sp)
200203f8:	dc400817 	ldw	r17,32(sp)
200203fc:	dc000717 	ldw	r16,28(sp)
20020400:	dec00a04 	addi	sp,sp,40
20020404:	f800283a 	ret
20020408:	8009883a 	mov	r4,r16
2002040c:	00208180 	call	20020818 <__sinit>
20020410:	003fe906 	br	200203b8 <__flash_rwdata_start+0xffff28d0>
20020414:	00bfffc4 	movi	r2,-1
20020418:	003ff606 	br	200203f4 <__flash_rwdata_start+0xffff290c>

2002041c <puts>:
2002041c:	00800034 	movhi	r2,0
20020420:	1086f504 	addi	r2,r2,7124
20020424:	200b883a 	mov	r5,r4
20020428:	11000017 	ldw	r4,0(r2)
2002042c:	002035c1 	jmpi	2002035c <_puts_r>

20020430 <strlen>:
20020430:	208000cc 	andi	r2,r4,3
20020434:	10002026 	beq	r2,zero,200204b8 <strlen+0x88>
20020438:	20800007 	ldb	r2,0(r4)
2002043c:	10002026 	beq	r2,zero,200204c0 <strlen+0x90>
20020440:	2005883a 	mov	r2,r4
20020444:	00000206 	br	20020450 <strlen+0x20>
20020448:	10c00007 	ldb	r3,0(r2)
2002044c:	18001826 	beq	r3,zero,200204b0 <strlen+0x80>
20020450:	10800044 	addi	r2,r2,1
20020454:	10c000cc 	andi	r3,r2,3
20020458:	183ffb1e 	bne	r3,zero,20020448 <__flash_rwdata_start+0xffff2960>
2002045c:	10c00017 	ldw	r3,0(r2)
20020460:	01ffbff4 	movhi	r7,65279
20020464:	39ffbfc4 	addi	r7,r7,-257
20020468:	00ca303a 	nor	r5,zero,r3
2002046c:	01a02074 	movhi	r6,32897
20020470:	19c7883a 	add	r3,r3,r7
20020474:	31a02004 	addi	r6,r6,-32640
20020478:	1946703a 	and	r3,r3,r5
2002047c:	1986703a 	and	r3,r3,r6
20020480:	1800091e 	bne	r3,zero,200204a8 <strlen+0x78>
20020484:	10800104 	addi	r2,r2,4
20020488:	10c00017 	ldw	r3,0(r2)
2002048c:	19cb883a 	add	r5,r3,r7
20020490:	00c6303a 	nor	r3,zero,r3
20020494:	28c6703a 	and	r3,r5,r3
20020498:	1986703a 	and	r3,r3,r6
2002049c:	183ff926 	beq	r3,zero,20020484 <__flash_rwdata_start+0xffff299c>
200204a0:	00000106 	br	200204a8 <strlen+0x78>
200204a4:	10800044 	addi	r2,r2,1
200204a8:	10c00007 	ldb	r3,0(r2)
200204ac:	183ffd1e 	bne	r3,zero,200204a4 <__flash_rwdata_start+0xffff29bc>
200204b0:	1105c83a 	sub	r2,r2,r4
200204b4:	f800283a 	ret
200204b8:	2005883a 	mov	r2,r4
200204bc:	003fe706 	br	2002045c <__flash_rwdata_start+0xffff2974>
200204c0:	0005883a 	mov	r2,zero
200204c4:	f800283a 	ret

200204c8 <__fp_unlock>:
200204c8:	0005883a 	mov	r2,zero
200204cc:	f800283a 	ret

200204d0 <_cleanup_r>:
200204d0:	014800b4 	movhi	r5,8194
200204d4:	29491904 	addi	r5,r5,9316
200204d8:	0020de81 	jmpi	20020de8 <_fwalk_reent>

200204dc <__sinit.part.1>:
200204dc:	defff704 	addi	sp,sp,-36
200204e0:	00c800b4 	movhi	r3,8194
200204e4:	dfc00815 	stw	ra,32(sp)
200204e8:	ddc00715 	stw	r23,28(sp)
200204ec:	dd800615 	stw	r22,24(sp)
200204f0:	dd400515 	stw	r21,20(sp)
200204f4:	dd000415 	stw	r20,16(sp)
200204f8:	dcc00315 	stw	r19,12(sp)
200204fc:	dc800215 	stw	r18,8(sp)
20020500:	dc400115 	stw	r17,4(sp)
20020504:	dc000015 	stw	r16,0(sp)
20020508:	18c13404 	addi	r3,r3,1232
2002050c:	24000117 	ldw	r16,4(r4)
20020510:	20c00f15 	stw	r3,60(r4)
20020514:	2080bb04 	addi	r2,r4,748
20020518:	00c000c4 	movi	r3,3
2002051c:	20c0b915 	stw	r3,740(r4)
20020520:	2080ba15 	stw	r2,744(r4)
20020524:	2000b815 	stw	zero,736(r4)
20020528:	05c00204 	movi	r23,8
2002052c:	00800104 	movi	r2,4
20020530:	2025883a 	mov	r18,r4
20020534:	b80d883a 	mov	r6,r23
20020538:	81001704 	addi	r4,r16,92
2002053c:	000b883a 	mov	r5,zero
20020540:	80000015 	stw	zero,0(r16)
20020544:	80000115 	stw	zero,4(r16)
20020548:	80000215 	stw	zero,8(r16)
2002054c:	8080030d 	sth	r2,12(r16)
20020550:	80001915 	stw	zero,100(r16)
20020554:	8000038d 	sth	zero,14(r16)
20020558:	80000415 	stw	zero,16(r16)
2002055c:	80000515 	stw	zero,20(r16)
20020560:	80000615 	stw	zero,24(r16)
20020564:	0021a400 	call	20021a40 <memset>
20020568:	058800b4 	movhi	r22,8194
2002056c:	94400217 	ldw	r17,8(r18)
20020570:	054800b4 	movhi	r21,8194
20020574:	050800b4 	movhi	r20,8194
20020578:	04c800b4 	movhi	r19,8194
2002057c:	b5884804 	addi	r22,r22,8480
20020580:	ad485f04 	addi	r21,r21,8572
20020584:	a5087e04 	addi	r20,r20,8696
20020588:	9cc89504 	addi	r19,r19,8788
2002058c:	85800815 	stw	r22,32(r16)
20020590:	85400915 	stw	r21,36(r16)
20020594:	85000a15 	stw	r20,40(r16)
20020598:	84c00b15 	stw	r19,44(r16)
2002059c:	84000715 	stw	r16,28(r16)
200205a0:	00800284 	movi	r2,10
200205a4:	8880030d 	sth	r2,12(r17)
200205a8:	00800044 	movi	r2,1
200205ac:	b80d883a 	mov	r6,r23
200205b0:	89001704 	addi	r4,r17,92
200205b4:	000b883a 	mov	r5,zero
200205b8:	88000015 	stw	zero,0(r17)
200205bc:	88000115 	stw	zero,4(r17)
200205c0:	88000215 	stw	zero,8(r17)
200205c4:	88001915 	stw	zero,100(r17)
200205c8:	8880038d 	sth	r2,14(r17)
200205cc:	88000415 	stw	zero,16(r17)
200205d0:	88000515 	stw	zero,20(r17)
200205d4:	88000615 	stw	zero,24(r17)
200205d8:	0021a400 	call	20021a40 <memset>
200205dc:	94000317 	ldw	r16,12(r18)
200205e0:	00800484 	movi	r2,18
200205e4:	8c400715 	stw	r17,28(r17)
200205e8:	8d800815 	stw	r22,32(r17)
200205ec:	8d400915 	stw	r21,36(r17)
200205f0:	8d000a15 	stw	r20,40(r17)
200205f4:	8cc00b15 	stw	r19,44(r17)
200205f8:	8080030d 	sth	r2,12(r16)
200205fc:	00800084 	movi	r2,2
20020600:	80000015 	stw	zero,0(r16)
20020604:	80000115 	stw	zero,4(r16)
20020608:	80000215 	stw	zero,8(r16)
2002060c:	80001915 	stw	zero,100(r16)
20020610:	8080038d 	sth	r2,14(r16)
20020614:	80000415 	stw	zero,16(r16)
20020618:	80000515 	stw	zero,20(r16)
2002061c:	80000615 	stw	zero,24(r16)
20020620:	b80d883a 	mov	r6,r23
20020624:	000b883a 	mov	r5,zero
20020628:	81001704 	addi	r4,r16,92
2002062c:	0021a400 	call	20021a40 <memset>
20020630:	00800044 	movi	r2,1
20020634:	84000715 	stw	r16,28(r16)
20020638:	85800815 	stw	r22,32(r16)
2002063c:	85400915 	stw	r21,36(r16)
20020640:	85000a15 	stw	r20,40(r16)
20020644:	84c00b15 	stw	r19,44(r16)
20020648:	90800e15 	stw	r2,56(r18)
2002064c:	dfc00817 	ldw	ra,32(sp)
20020650:	ddc00717 	ldw	r23,28(sp)
20020654:	dd800617 	ldw	r22,24(sp)
20020658:	dd400517 	ldw	r21,20(sp)
2002065c:	dd000417 	ldw	r20,16(sp)
20020660:	dcc00317 	ldw	r19,12(sp)
20020664:	dc800217 	ldw	r18,8(sp)
20020668:	dc400117 	ldw	r17,4(sp)
2002066c:	dc000017 	ldw	r16,0(sp)
20020670:	dec00904 	addi	sp,sp,36
20020674:	f800283a 	ret

20020678 <__fp_lock>:
20020678:	0005883a 	mov	r2,zero
2002067c:	f800283a 	ret

20020680 <__sfmoreglue>:
20020680:	defffc04 	addi	sp,sp,-16
20020684:	dc400115 	stw	r17,4(sp)
20020688:	2c7fffc4 	addi	r17,r5,-1
2002068c:	8c401a24 	muli	r17,r17,104
20020690:	dc800215 	stw	r18,8(sp)
20020694:	2825883a 	mov	r18,r5
20020698:	89401d04 	addi	r5,r17,116
2002069c:	dc000015 	stw	r16,0(sp)
200206a0:	dfc00315 	stw	ra,12(sp)
200206a4:	0020eac0 	call	20020eac <_malloc_r>
200206a8:	1021883a 	mov	r16,r2
200206ac:	10000726 	beq	r2,zero,200206cc <__sfmoreglue+0x4c>
200206b0:	11000304 	addi	r4,r2,12
200206b4:	10000015 	stw	zero,0(r2)
200206b8:	14800115 	stw	r18,4(r2)
200206bc:	11000215 	stw	r4,8(r2)
200206c0:	89801a04 	addi	r6,r17,104
200206c4:	000b883a 	mov	r5,zero
200206c8:	0021a400 	call	20021a40 <memset>
200206cc:	8005883a 	mov	r2,r16
200206d0:	dfc00317 	ldw	ra,12(sp)
200206d4:	dc800217 	ldw	r18,8(sp)
200206d8:	dc400117 	ldw	r17,4(sp)
200206dc:	dc000017 	ldw	r16,0(sp)
200206e0:	dec00404 	addi	sp,sp,16
200206e4:	f800283a 	ret

200206e8 <__sfp>:
200206e8:	defffb04 	addi	sp,sp,-20
200206ec:	dc000015 	stw	r16,0(sp)
200206f0:	04000034 	movhi	r16,0
200206f4:	8406f404 	addi	r16,r16,7120
200206f8:	dcc00315 	stw	r19,12(sp)
200206fc:	2027883a 	mov	r19,r4
20020700:	81000017 	ldw	r4,0(r16)
20020704:	dfc00415 	stw	ra,16(sp)
20020708:	dc800215 	stw	r18,8(sp)
2002070c:	20800e17 	ldw	r2,56(r4)
20020710:	dc400115 	stw	r17,4(sp)
20020714:	1000021e 	bne	r2,zero,20020720 <__sfp+0x38>
20020718:	00204dc0 	call	200204dc <__sinit.part.1>
2002071c:	81000017 	ldw	r4,0(r16)
20020720:	2480b804 	addi	r18,r4,736
20020724:	047fffc4 	movi	r17,-1
20020728:	91000117 	ldw	r4,4(r18)
2002072c:	94000217 	ldw	r16,8(r18)
20020730:	213fffc4 	addi	r4,r4,-1
20020734:	20000a16 	blt	r4,zero,20020760 <__sfp+0x78>
20020738:	8080030f 	ldh	r2,12(r16)
2002073c:	10000c26 	beq	r2,zero,20020770 <__sfp+0x88>
20020740:	80c01d04 	addi	r3,r16,116
20020744:	00000206 	br	20020750 <__sfp+0x68>
20020748:	18bfe60f 	ldh	r2,-104(r3)
2002074c:	10000826 	beq	r2,zero,20020770 <__sfp+0x88>
20020750:	213fffc4 	addi	r4,r4,-1
20020754:	1c3ffd04 	addi	r16,r3,-12
20020758:	18c01a04 	addi	r3,r3,104
2002075c:	247ffa1e 	bne	r4,r17,20020748 <__flash_rwdata_start+0xffff2c60>
20020760:	90800017 	ldw	r2,0(r18)
20020764:	10001d26 	beq	r2,zero,200207dc <__sfp+0xf4>
20020768:	1025883a 	mov	r18,r2
2002076c:	003fee06 	br	20020728 <__flash_rwdata_start+0xffff2c40>
20020770:	00bfffc4 	movi	r2,-1
20020774:	8080038d 	sth	r2,14(r16)
20020778:	00800044 	movi	r2,1
2002077c:	8080030d 	sth	r2,12(r16)
20020780:	80001915 	stw	zero,100(r16)
20020784:	80000015 	stw	zero,0(r16)
20020788:	80000215 	stw	zero,8(r16)
2002078c:	80000115 	stw	zero,4(r16)
20020790:	80000415 	stw	zero,16(r16)
20020794:	80000515 	stw	zero,20(r16)
20020798:	80000615 	stw	zero,24(r16)
2002079c:	01800204 	movi	r6,8
200207a0:	000b883a 	mov	r5,zero
200207a4:	81001704 	addi	r4,r16,92
200207a8:	0021a400 	call	20021a40 <memset>
200207ac:	8005883a 	mov	r2,r16
200207b0:	80000c15 	stw	zero,48(r16)
200207b4:	80000d15 	stw	zero,52(r16)
200207b8:	80001115 	stw	zero,68(r16)
200207bc:	80001215 	stw	zero,72(r16)
200207c0:	dfc00417 	ldw	ra,16(sp)
200207c4:	dcc00317 	ldw	r19,12(sp)
200207c8:	dc800217 	ldw	r18,8(sp)
200207cc:	dc400117 	ldw	r17,4(sp)
200207d0:	dc000017 	ldw	r16,0(sp)
200207d4:	dec00504 	addi	sp,sp,20
200207d8:	f800283a 	ret
200207dc:	01400104 	movi	r5,4
200207e0:	9809883a 	mov	r4,r19
200207e4:	00206800 	call	20020680 <__sfmoreglue>
200207e8:	90800015 	stw	r2,0(r18)
200207ec:	103fde1e 	bne	r2,zero,20020768 <__flash_rwdata_start+0xffff2c80>
200207f0:	00800304 	movi	r2,12
200207f4:	98800015 	stw	r2,0(r19)
200207f8:	0005883a 	mov	r2,zero
200207fc:	003ff006 	br	200207c0 <__flash_rwdata_start+0xffff2cd8>

20020800 <_cleanup>:
20020800:	00800034 	movhi	r2,0
20020804:	1086f404 	addi	r2,r2,7120
20020808:	11000017 	ldw	r4,0(r2)
2002080c:	014800b4 	movhi	r5,8194
20020810:	29491904 	addi	r5,r5,9316
20020814:	0020de81 	jmpi	20020de8 <_fwalk_reent>

20020818 <__sinit>:
20020818:	20800e17 	ldw	r2,56(r4)
2002081c:	10000126 	beq	r2,zero,20020824 <__sinit+0xc>
20020820:	f800283a 	ret
20020824:	00204dc1 	jmpi	200204dc <__sinit.part.1>

20020828 <__sfp_lock_acquire>:
20020828:	f800283a 	ret

2002082c <__sfp_lock_release>:
2002082c:	f800283a 	ret

20020830 <__sinit_lock_acquire>:
20020830:	f800283a 	ret

20020834 <__sinit_lock_release>:
20020834:	f800283a 	ret

20020838 <__fp_lock_all>:
20020838:	00800034 	movhi	r2,0
2002083c:	1086f504 	addi	r2,r2,7124
20020840:	11000017 	ldw	r4,0(r2)
20020844:	014800b4 	movhi	r5,8194
20020848:	29419e04 	addi	r5,r5,1656
2002084c:	0020d241 	jmpi	20020d24 <_fwalk>

20020850 <__fp_unlock_all>:
20020850:	00800034 	movhi	r2,0
20020854:	1086f504 	addi	r2,r2,7124
20020858:	11000017 	ldw	r4,0(r2)
2002085c:	014800b4 	movhi	r5,8194
20020860:	29413204 	addi	r5,r5,1224
20020864:	0020d241 	jmpi	20020d24 <_fwalk>

20020868 <__sfvwrite_r>:
20020868:	30800217 	ldw	r2,8(r6)
2002086c:	10006726 	beq	r2,zero,20020a0c <__sfvwrite_r+0x1a4>
20020870:	28c0030b 	ldhu	r3,12(r5)
20020874:	defff404 	addi	sp,sp,-48
20020878:	dd400715 	stw	r21,28(sp)
2002087c:	dd000615 	stw	r20,24(sp)
20020880:	dc000215 	stw	r16,8(sp)
20020884:	dfc00b15 	stw	ra,44(sp)
20020888:	df000a15 	stw	fp,40(sp)
2002088c:	ddc00915 	stw	r23,36(sp)
20020890:	dd800815 	stw	r22,32(sp)
20020894:	dcc00515 	stw	r19,20(sp)
20020898:	dc800415 	stw	r18,16(sp)
2002089c:	dc400315 	stw	r17,12(sp)
200208a0:	1880020c 	andi	r2,r3,8
200208a4:	2821883a 	mov	r16,r5
200208a8:	202b883a 	mov	r21,r4
200208ac:	3029883a 	mov	r20,r6
200208b0:	10002726 	beq	r2,zero,20020950 <__sfvwrite_r+0xe8>
200208b4:	28800417 	ldw	r2,16(r5)
200208b8:	10002526 	beq	r2,zero,20020950 <__sfvwrite_r+0xe8>
200208bc:	1880008c 	andi	r2,r3,2
200208c0:	a4400017 	ldw	r17,0(r20)
200208c4:	10002a26 	beq	r2,zero,20020970 <__sfvwrite_r+0x108>
200208c8:	05a00034 	movhi	r22,32768
200208cc:	0027883a 	mov	r19,zero
200208d0:	0025883a 	mov	r18,zero
200208d4:	b5bf0004 	addi	r22,r22,-1024
200208d8:	980d883a 	mov	r6,r19
200208dc:	a809883a 	mov	r4,r21
200208e0:	90004626 	beq	r18,zero,200209fc <__sfvwrite_r+0x194>
200208e4:	900f883a 	mov	r7,r18
200208e8:	b480022e 	bgeu	r22,r18,200208f4 <__sfvwrite_r+0x8c>
200208ec:	01e00034 	movhi	r7,32768
200208f0:	39ff0004 	addi	r7,r7,-1024
200208f4:	80800917 	ldw	r2,36(r16)
200208f8:	81400717 	ldw	r5,28(r16)
200208fc:	103ee83a 	callr	r2
20020900:	0080570e 	bge	zero,r2,20020a60 <__sfvwrite_r+0x1f8>
20020904:	a0c00217 	ldw	r3,8(r20)
20020908:	98a7883a 	add	r19,r19,r2
2002090c:	90a5c83a 	sub	r18,r18,r2
20020910:	1885c83a 	sub	r2,r3,r2
20020914:	a0800215 	stw	r2,8(r20)
20020918:	103fef1e 	bne	r2,zero,200208d8 <__flash_rwdata_start+0xffff2df0>
2002091c:	0005883a 	mov	r2,zero
20020920:	dfc00b17 	ldw	ra,44(sp)
20020924:	df000a17 	ldw	fp,40(sp)
20020928:	ddc00917 	ldw	r23,36(sp)
2002092c:	dd800817 	ldw	r22,32(sp)
20020930:	dd400717 	ldw	r21,28(sp)
20020934:	dd000617 	ldw	r20,24(sp)
20020938:	dcc00517 	ldw	r19,20(sp)
2002093c:	dc800417 	ldw	r18,16(sp)
20020940:	dc400317 	ldw	r17,12(sp)
20020944:	dc000217 	ldw	r16,8(sp)
20020948:	dec00c04 	addi	sp,sp,48
2002094c:	f800283a 	ret
20020950:	800b883a 	mov	r5,r16
20020954:	a809883a 	mov	r4,r21
20020958:	00222bc0 	call	200222bc <__swsetup_r>
2002095c:	1000eb1e 	bne	r2,zero,20020d0c <__sfvwrite_r+0x4a4>
20020960:	80c0030b 	ldhu	r3,12(r16)
20020964:	a4400017 	ldw	r17,0(r20)
20020968:	1880008c 	andi	r2,r3,2
2002096c:	103fd61e 	bne	r2,zero,200208c8 <__flash_rwdata_start+0xffff2de0>
20020970:	1880004c 	andi	r2,r3,1
20020974:	10003f1e 	bne	r2,zero,20020a74 <__sfvwrite_r+0x20c>
20020978:	0039883a 	mov	fp,zero
2002097c:	0025883a 	mov	r18,zero
20020980:	90001a26 	beq	r18,zero,200209ec <__sfvwrite_r+0x184>
20020984:	1880800c 	andi	r2,r3,512
20020988:	84c00217 	ldw	r19,8(r16)
2002098c:	10002126 	beq	r2,zero,20020a14 <__sfvwrite_r+0x1ac>
20020990:	982f883a 	mov	r23,r19
20020994:	94c09336 	bltu	r18,r19,20020be4 <__sfvwrite_r+0x37c>
20020998:	1881200c 	andi	r2,r3,1152
2002099c:	10009e1e 	bne	r2,zero,20020c18 <__sfvwrite_r+0x3b0>
200209a0:	81000017 	ldw	r4,0(r16)
200209a4:	b80d883a 	mov	r6,r23
200209a8:	e00b883a 	mov	r5,fp
200209ac:	00218e40 	call	200218e4 <memmove>
200209b0:	80c00217 	ldw	r3,8(r16)
200209b4:	81000017 	ldw	r4,0(r16)
200209b8:	9005883a 	mov	r2,r18
200209bc:	1ce7c83a 	sub	r19,r3,r19
200209c0:	25cf883a 	add	r7,r4,r23
200209c4:	84c00215 	stw	r19,8(r16)
200209c8:	81c00015 	stw	r7,0(r16)
200209cc:	a0c00217 	ldw	r3,8(r20)
200209d0:	e0b9883a 	add	fp,fp,r2
200209d4:	90a5c83a 	sub	r18,r18,r2
200209d8:	18a7c83a 	sub	r19,r3,r2
200209dc:	a4c00215 	stw	r19,8(r20)
200209e0:	983fce26 	beq	r19,zero,2002091c <__flash_rwdata_start+0xffff2e34>
200209e4:	80c0030b 	ldhu	r3,12(r16)
200209e8:	903fe61e 	bne	r18,zero,20020984 <__flash_rwdata_start+0xffff2e9c>
200209ec:	8f000017 	ldw	fp,0(r17)
200209f0:	8c800117 	ldw	r18,4(r17)
200209f4:	8c400204 	addi	r17,r17,8
200209f8:	003fe106 	br	20020980 <__flash_rwdata_start+0xffff2e98>
200209fc:	8cc00017 	ldw	r19,0(r17)
20020a00:	8c800117 	ldw	r18,4(r17)
20020a04:	8c400204 	addi	r17,r17,8
20020a08:	003fb306 	br	200208d8 <__flash_rwdata_start+0xffff2df0>
20020a0c:	0005883a 	mov	r2,zero
20020a10:	f800283a 	ret
20020a14:	81000017 	ldw	r4,0(r16)
20020a18:	80800417 	ldw	r2,16(r16)
20020a1c:	11005736 	bltu	r2,r4,20020b7c <__sfvwrite_r+0x314>
20020a20:	85c00517 	ldw	r23,20(r16)
20020a24:	95c05536 	bltu	r18,r23,20020b7c <__sfvwrite_r+0x314>
20020a28:	00a00034 	movhi	r2,32768
20020a2c:	10bfffc4 	addi	r2,r2,-1
20020a30:	9009883a 	mov	r4,r18
20020a34:	1480012e 	bgeu	r2,r18,20020a3c <__sfvwrite_r+0x1d4>
20020a38:	1009883a 	mov	r4,r2
20020a3c:	b80b883a 	mov	r5,r23
20020a40:	0022f700 	call	20022f70 <__divsi3>
20020a44:	15cf383a 	mul	r7,r2,r23
20020a48:	81400717 	ldw	r5,28(r16)
20020a4c:	80800917 	ldw	r2,36(r16)
20020a50:	e00d883a 	mov	r6,fp
20020a54:	a809883a 	mov	r4,r21
20020a58:	103ee83a 	callr	r2
20020a5c:	00bfdb16 	blt	zero,r2,200209cc <__flash_rwdata_start+0xffff2ee4>
20020a60:	8080030b 	ldhu	r2,12(r16)
20020a64:	10801014 	ori	r2,r2,64
20020a68:	8080030d 	sth	r2,12(r16)
20020a6c:	00bfffc4 	movi	r2,-1
20020a70:	003fab06 	br	20020920 <__flash_rwdata_start+0xffff2e38>
20020a74:	0027883a 	mov	r19,zero
20020a78:	0011883a 	mov	r8,zero
20020a7c:	0039883a 	mov	fp,zero
20020a80:	0025883a 	mov	r18,zero
20020a84:	90001f26 	beq	r18,zero,20020b04 <__sfvwrite_r+0x29c>
20020a88:	40005a26 	beq	r8,zero,20020bf4 <__sfvwrite_r+0x38c>
20020a8c:	982d883a 	mov	r22,r19
20020a90:	94c0012e 	bgeu	r18,r19,20020a98 <__sfvwrite_r+0x230>
20020a94:	902d883a 	mov	r22,r18
20020a98:	81000017 	ldw	r4,0(r16)
20020a9c:	80800417 	ldw	r2,16(r16)
20020aa0:	b02f883a 	mov	r23,r22
20020aa4:	81c00517 	ldw	r7,20(r16)
20020aa8:	1100032e 	bgeu	r2,r4,20020ab8 <__sfvwrite_r+0x250>
20020aac:	80c00217 	ldw	r3,8(r16)
20020ab0:	38c7883a 	add	r3,r7,r3
20020ab4:	1d801816 	blt	r3,r22,20020b18 <__sfvwrite_r+0x2b0>
20020ab8:	b1c03e16 	blt	r22,r7,20020bb4 <__sfvwrite_r+0x34c>
20020abc:	80800917 	ldw	r2,36(r16)
20020ac0:	81400717 	ldw	r5,28(r16)
20020ac4:	e00d883a 	mov	r6,fp
20020ac8:	da000115 	stw	r8,4(sp)
20020acc:	a809883a 	mov	r4,r21
20020ad0:	103ee83a 	callr	r2
20020ad4:	102f883a 	mov	r23,r2
20020ad8:	da000117 	ldw	r8,4(sp)
20020adc:	00bfe00e 	bge	zero,r2,20020a60 <__flash_rwdata_start+0xffff2f78>
20020ae0:	9de7c83a 	sub	r19,r19,r23
20020ae4:	98001f26 	beq	r19,zero,20020b64 <__sfvwrite_r+0x2fc>
20020ae8:	a0800217 	ldw	r2,8(r20)
20020aec:	e5f9883a 	add	fp,fp,r23
20020af0:	95e5c83a 	sub	r18,r18,r23
20020af4:	15efc83a 	sub	r23,r2,r23
20020af8:	a5c00215 	stw	r23,8(r20)
20020afc:	b83f8726 	beq	r23,zero,2002091c <__flash_rwdata_start+0xffff2e34>
20020b00:	903fe11e 	bne	r18,zero,20020a88 <__flash_rwdata_start+0xffff2fa0>
20020b04:	8f000017 	ldw	fp,0(r17)
20020b08:	8c800117 	ldw	r18,4(r17)
20020b0c:	0011883a 	mov	r8,zero
20020b10:	8c400204 	addi	r17,r17,8
20020b14:	003fdb06 	br	20020a84 <__flash_rwdata_start+0xffff2f9c>
20020b18:	180d883a 	mov	r6,r3
20020b1c:	e00b883a 	mov	r5,fp
20020b20:	da000115 	stw	r8,4(sp)
20020b24:	d8c00015 	stw	r3,0(sp)
20020b28:	00218e40 	call	200218e4 <memmove>
20020b2c:	d8c00017 	ldw	r3,0(sp)
20020b30:	80800017 	ldw	r2,0(r16)
20020b34:	800b883a 	mov	r5,r16
20020b38:	a809883a 	mov	r4,r21
20020b3c:	10c5883a 	add	r2,r2,r3
20020b40:	80800015 	stw	r2,0(r16)
20020b44:	d8c00015 	stw	r3,0(sp)
20020b48:	00227840 	call	20022784 <_fflush_r>
20020b4c:	d8c00017 	ldw	r3,0(sp)
20020b50:	da000117 	ldw	r8,4(sp)
20020b54:	103fc21e 	bne	r2,zero,20020a60 <__flash_rwdata_start+0xffff2f78>
20020b58:	182f883a 	mov	r23,r3
20020b5c:	9de7c83a 	sub	r19,r19,r23
20020b60:	983fe11e 	bne	r19,zero,20020ae8 <__flash_rwdata_start+0xffff3000>
20020b64:	800b883a 	mov	r5,r16
20020b68:	a809883a 	mov	r4,r21
20020b6c:	00227840 	call	20022784 <_fflush_r>
20020b70:	103fbb1e 	bne	r2,zero,20020a60 <__flash_rwdata_start+0xffff2f78>
20020b74:	0011883a 	mov	r8,zero
20020b78:	003fdb06 	br	20020ae8 <__flash_rwdata_start+0xffff3000>
20020b7c:	94c0012e 	bgeu	r18,r19,20020b84 <__sfvwrite_r+0x31c>
20020b80:	9027883a 	mov	r19,r18
20020b84:	980d883a 	mov	r6,r19
20020b88:	e00b883a 	mov	r5,fp
20020b8c:	00218e40 	call	200218e4 <memmove>
20020b90:	80800217 	ldw	r2,8(r16)
20020b94:	80c00017 	ldw	r3,0(r16)
20020b98:	14c5c83a 	sub	r2,r2,r19
20020b9c:	1cc7883a 	add	r3,r3,r19
20020ba0:	80800215 	stw	r2,8(r16)
20020ba4:	80c00015 	stw	r3,0(r16)
20020ba8:	10004326 	beq	r2,zero,20020cb8 <__sfvwrite_r+0x450>
20020bac:	9805883a 	mov	r2,r19
20020bb0:	003f8606 	br	200209cc <__flash_rwdata_start+0xffff2ee4>
20020bb4:	b00d883a 	mov	r6,r22
20020bb8:	e00b883a 	mov	r5,fp
20020bbc:	da000115 	stw	r8,4(sp)
20020bc0:	00218e40 	call	200218e4 <memmove>
20020bc4:	80800217 	ldw	r2,8(r16)
20020bc8:	80c00017 	ldw	r3,0(r16)
20020bcc:	da000117 	ldw	r8,4(sp)
20020bd0:	1585c83a 	sub	r2,r2,r22
20020bd4:	1dad883a 	add	r22,r3,r22
20020bd8:	80800215 	stw	r2,8(r16)
20020bdc:	85800015 	stw	r22,0(r16)
20020be0:	003fbf06 	br	20020ae0 <__flash_rwdata_start+0xffff2ff8>
20020be4:	81000017 	ldw	r4,0(r16)
20020be8:	9027883a 	mov	r19,r18
20020bec:	902f883a 	mov	r23,r18
20020bf0:	003f6c06 	br	200209a4 <__flash_rwdata_start+0xffff2ebc>
20020bf4:	900d883a 	mov	r6,r18
20020bf8:	01400284 	movi	r5,10
20020bfc:	e009883a 	mov	r4,fp
20020c00:	00216b80 	call	200216b8 <memchr>
20020c04:	10003e26 	beq	r2,zero,20020d00 <__sfvwrite_r+0x498>
20020c08:	10800044 	addi	r2,r2,1
20020c0c:	1727c83a 	sub	r19,r2,fp
20020c10:	02000044 	movi	r8,1
20020c14:	003f9d06 	br	20020a8c <__flash_rwdata_start+0xffff2fa4>
20020c18:	80800517 	ldw	r2,20(r16)
20020c1c:	81400417 	ldw	r5,16(r16)
20020c20:	81c00017 	ldw	r7,0(r16)
20020c24:	10a7883a 	add	r19,r2,r2
20020c28:	9885883a 	add	r2,r19,r2
20020c2c:	1026d7fa 	srli	r19,r2,31
20020c30:	396dc83a 	sub	r22,r7,r5
20020c34:	b1000044 	addi	r4,r22,1
20020c38:	9885883a 	add	r2,r19,r2
20020c3c:	1027d07a 	srai	r19,r2,1
20020c40:	2485883a 	add	r2,r4,r18
20020c44:	980d883a 	mov	r6,r19
20020c48:	9880022e 	bgeu	r19,r2,20020c54 <__sfvwrite_r+0x3ec>
20020c4c:	1027883a 	mov	r19,r2
20020c50:	100d883a 	mov	r6,r2
20020c54:	18c1000c 	andi	r3,r3,1024
20020c58:	18001c26 	beq	r3,zero,20020ccc <__sfvwrite_r+0x464>
20020c5c:	300b883a 	mov	r5,r6
20020c60:	a809883a 	mov	r4,r21
20020c64:	0020eac0 	call	20020eac <_malloc_r>
20020c68:	102f883a 	mov	r23,r2
20020c6c:	10002926 	beq	r2,zero,20020d14 <__sfvwrite_r+0x4ac>
20020c70:	81400417 	ldw	r5,16(r16)
20020c74:	b00d883a 	mov	r6,r22
20020c78:	1009883a 	mov	r4,r2
20020c7c:	002179c0 	call	2002179c <memcpy>
20020c80:	8080030b 	ldhu	r2,12(r16)
20020c84:	00fedfc4 	movi	r3,-1153
20020c88:	10c4703a 	and	r2,r2,r3
20020c8c:	10802014 	ori	r2,r2,128
20020c90:	8080030d 	sth	r2,12(r16)
20020c94:	bd89883a 	add	r4,r23,r22
20020c98:	9d8fc83a 	sub	r7,r19,r22
20020c9c:	85c00415 	stw	r23,16(r16)
20020ca0:	84c00515 	stw	r19,20(r16)
20020ca4:	81000015 	stw	r4,0(r16)
20020ca8:	9027883a 	mov	r19,r18
20020cac:	81c00215 	stw	r7,8(r16)
20020cb0:	902f883a 	mov	r23,r18
20020cb4:	003f3b06 	br	200209a4 <__flash_rwdata_start+0xffff2ebc>
20020cb8:	800b883a 	mov	r5,r16
20020cbc:	a809883a 	mov	r4,r21
20020cc0:	00227840 	call	20022784 <_fflush_r>
20020cc4:	103fb926 	beq	r2,zero,20020bac <__flash_rwdata_start+0xffff30c4>
20020cc8:	003f6506 	br	20020a60 <__flash_rwdata_start+0xffff2f78>
20020ccc:	a809883a 	mov	r4,r21
20020cd0:	0021b680 	call	20021b68 <_realloc_r>
20020cd4:	102f883a 	mov	r23,r2
20020cd8:	103fee1e 	bne	r2,zero,20020c94 <__flash_rwdata_start+0xffff31ac>
20020cdc:	81400417 	ldw	r5,16(r16)
20020ce0:	a809883a 	mov	r4,r21
20020ce4:	00229340 	call	20022934 <_free_r>
20020ce8:	8080030b 	ldhu	r2,12(r16)
20020cec:	00ffdfc4 	movi	r3,-129
20020cf0:	1884703a 	and	r2,r3,r2
20020cf4:	00c00304 	movi	r3,12
20020cf8:	a8c00015 	stw	r3,0(r21)
20020cfc:	003f5906 	br	20020a64 <__flash_rwdata_start+0xffff2f7c>
20020d00:	94c00044 	addi	r19,r18,1
20020d04:	02000044 	movi	r8,1
20020d08:	003f6006 	br	20020a8c <__flash_rwdata_start+0xffff2fa4>
20020d0c:	00bfffc4 	movi	r2,-1
20020d10:	003f0306 	br	20020920 <__flash_rwdata_start+0xffff2e38>
20020d14:	00800304 	movi	r2,12
20020d18:	a8800015 	stw	r2,0(r21)
20020d1c:	8080030b 	ldhu	r2,12(r16)
20020d20:	003f5006 	br	20020a64 <__flash_rwdata_start+0xffff2f7c>

20020d24 <_fwalk>:
20020d24:	defff704 	addi	sp,sp,-36
20020d28:	dd000415 	stw	r20,16(sp)
20020d2c:	dfc00815 	stw	ra,32(sp)
20020d30:	ddc00715 	stw	r23,28(sp)
20020d34:	dd800615 	stw	r22,24(sp)
20020d38:	dd400515 	stw	r21,20(sp)
20020d3c:	dcc00315 	stw	r19,12(sp)
20020d40:	dc800215 	stw	r18,8(sp)
20020d44:	dc400115 	stw	r17,4(sp)
20020d48:	dc000015 	stw	r16,0(sp)
20020d4c:	2500b804 	addi	r20,r4,736
20020d50:	a0002326 	beq	r20,zero,20020de0 <_fwalk+0xbc>
20020d54:	282b883a 	mov	r21,r5
20020d58:	002f883a 	mov	r23,zero
20020d5c:	05800044 	movi	r22,1
20020d60:	04ffffc4 	movi	r19,-1
20020d64:	a4400117 	ldw	r17,4(r20)
20020d68:	a4800217 	ldw	r18,8(r20)
20020d6c:	8c7fffc4 	addi	r17,r17,-1
20020d70:	88000d16 	blt	r17,zero,20020da8 <_fwalk+0x84>
20020d74:	94000304 	addi	r16,r18,12
20020d78:	94800384 	addi	r18,r18,14
20020d7c:	8080000b 	ldhu	r2,0(r16)
20020d80:	8c7fffc4 	addi	r17,r17,-1
20020d84:	813ffd04 	addi	r4,r16,-12
20020d88:	b080042e 	bgeu	r22,r2,20020d9c <_fwalk+0x78>
20020d8c:	9080000f 	ldh	r2,0(r18)
20020d90:	14c00226 	beq	r2,r19,20020d9c <_fwalk+0x78>
20020d94:	a83ee83a 	callr	r21
20020d98:	b8aeb03a 	or	r23,r23,r2
20020d9c:	84001a04 	addi	r16,r16,104
20020da0:	94801a04 	addi	r18,r18,104
20020da4:	8cfff51e 	bne	r17,r19,20020d7c <__flash_rwdata_start+0xffff3294>
20020da8:	a5000017 	ldw	r20,0(r20)
20020dac:	a03fed1e 	bne	r20,zero,20020d64 <__flash_rwdata_start+0xffff327c>
20020db0:	b805883a 	mov	r2,r23
20020db4:	dfc00817 	ldw	ra,32(sp)
20020db8:	ddc00717 	ldw	r23,28(sp)
20020dbc:	dd800617 	ldw	r22,24(sp)
20020dc0:	dd400517 	ldw	r21,20(sp)
20020dc4:	dd000417 	ldw	r20,16(sp)
20020dc8:	dcc00317 	ldw	r19,12(sp)
20020dcc:	dc800217 	ldw	r18,8(sp)
20020dd0:	dc400117 	ldw	r17,4(sp)
20020dd4:	dc000017 	ldw	r16,0(sp)
20020dd8:	dec00904 	addi	sp,sp,36
20020ddc:	f800283a 	ret
20020de0:	002f883a 	mov	r23,zero
20020de4:	003ff206 	br	20020db0 <__flash_rwdata_start+0xffff32c8>

20020de8 <_fwalk_reent>:
20020de8:	defff704 	addi	sp,sp,-36
20020dec:	dd000415 	stw	r20,16(sp)
20020df0:	dfc00815 	stw	ra,32(sp)
20020df4:	ddc00715 	stw	r23,28(sp)
20020df8:	dd800615 	stw	r22,24(sp)
20020dfc:	dd400515 	stw	r21,20(sp)
20020e00:	dcc00315 	stw	r19,12(sp)
20020e04:	dc800215 	stw	r18,8(sp)
20020e08:	dc400115 	stw	r17,4(sp)
20020e0c:	dc000015 	stw	r16,0(sp)
20020e10:	2500b804 	addi	r20,r4,736
20020e14:	a0002326 	beq	r20,zero,20020ea4 <_fwalk_reent+0xbc>
20020e18:	282b883a 	mov	r21,r5
20020e1c:	2027883a 	mov	r19,r4
20020e20:	002f883a 	mov	r23,zero
20020e24:	05800044 	movi	r22,1
20020e28:	04bfffc4 	movi	r18,-1
20020e2c:	a4400117 	ldw	r17,4(r20)
20020e30:	a4000217 	ldw	r16,8(r20)
20020e34:	8c7fffc4 	addi	r17,r17,-1
20020e38:	88000c16 	blt	r17,zero,20020e6c <_fwalk_reent+0x84>
20020e3c:	84000304 	addi	r16,r16,12
20020e40:	8080000b 	ldhu	r2,0(r16)
20020e44:	8c7fffc4 	addi	r17,r17,-1
20020e48:	817ffd04 	addi	r5,r16,-12
20020e4c:	b080052e 	bgeu	r22,r2,20020e64 <_fwalk_reent+0x7c>
20020e50:	8080008f 	ldh	r2,2(r16)
20020e54:	9809883a 	mov	r4,r19
20020e58:	14800226 	beq	r2,r18,20020e64 <_fwalk_reent+0x7c>
20020e5c:	a83ee83a 	callr	r21
20020e60:	b8aeb03a 	or	r23,r23,r2
20020e64:	84001a04 	addi	r16,r16,104
20020e68:	8cbff51e 	bne	r17,r18,20020e40 <__flash_rwdata_start+0xffff3358>
20020e6c:	a5000017 	ldw	r20,0(r20)
20020e70:	a03fee1e 	bne	r20,zero,20020e2c <__flash_rwdata_start+0xffff3344>
20020e74:	b805883a 	mov	r2,r23
20020e78:	dfc00817 	ldw	ra,32(sp)
20020e7c:	ddc00717 	ldw	r23,28(sp)
20020e80:	dd800617 	ldw	r22,24(sp)
20020e84:	dd400517 	ldw	r21,20(sp)
20020e88:	dd000417 	ldw	r20,16(sp)
20020e8c:	dcc00317 	ldw	r19,12(sp)
20020e90:	dc800217 	ldw	r18,8(sp)
20020e94:	dc400117 	ldw	r17,4(sp)
20020e98:	dc000017 	ldw	r16,0(sp)
20020e9c:	dec00904 	addi	sp,sp,36
20020ea0:	f800283a 	ret
20020ea4:	002f883a 	mov	r23,zero
20020ea8:	003ff206 	br	20020e74 <__flash_rwdata_start+0xffff338c>

20020eac <_malloc_r>:
20020eac:	defff504 	addi	sp,sp,-44
20020eb0:	dc800315 	stw	r18,12(sp)
20020eb4:	dfc00a15 	stw	ra,40(sp)
20020eb8:	df000915 	stw	fp,36(sp)
20020ebc:	ddc00815 	stw	r23,32(sp)
20020ec0:	dd800715 	stw	r22,28(sp)
20020ec4:	dd400615 	stw	r21,24(sp)
20020ec8:	dd000515 	stw	r20,20(sp)
20020ecc:	dcc00415 	stw	r19,16(sp)
20020ed0:	dc400215 	stw	r17,8(sp)
20020ed4:	dc000115 	stw	r16,4(sp)
20020ed8:	288002c4 	addi	r2,r5,11
20020edc:	00c00584 	movi	r3,22
20020ee0:	2025883a 	mov	r18,r4
20020ee4:	18807f2e 	bgeu	r3,r2,200210e4 <_malloc_r+0x238>
20020ee8:	047ffe04 	movi	r17,-8
20020eec:	1462703a 	and	r17,r2,r17
20020ef0:	8800a316 	blt	r17,zero,20021180 <_malloc_r+0x2d4>
20020ef4:	8940a236 	bltu	r17,r5,20021180 <_malloc_r+0x2d4>
20020ef8:	0023b840 	call	20023b84 <__malloc_lock>
20020efc:	00807dc4 	movi	r2,503
20020f00:	1441e92e 	bgeu	r2,r17,200216a8 <_malloc_r+0x7fc>
20020f04:	8804d27a 	srli	r2,r17,9
20020f08:	1000a126 	beq	r2,zero,20021190 <_malloc_r+0x2e4>
20020f0c:	00c00104 	movi	r3,4
20020f10:	18811e36 	bltu	r3,r2,2002138c <_malloc_r+0x4e0>
20020f14:	8804d1ba 	srli	r2,r17,6
20020f18:	12000e44 	addi	r8,r2,57
20020f1c:	11c00e04 	addi	r7,r2,56
20020f20:	4209883a 	add	r4,r8,r8
20020f24:	04c00034 	movhi	r19,0
20020f28:	2109883a 	add	r4,r4,r4
20020f2c:	9cc16d04 	addi	r19,r19,1460
20020f30:	2109883a 	add	r4,r4,r4
20020f34:	9909883a 	add	r4,r19,r4
20020f38:	24000117 	ldw	r16,4(r4)
20020f3c:	213ffe04 	addi	r4,r4,-8
20020f40:	24009726 	beq	r4,r16,200211a0 <_malloc_r+0x2f4>
20020f44:	80800117 	ldw	r2,4(r16)
20020f48:	01bfff04 	movi	r6,-4
20020f4c:	014003c4 	movi	r5,15
20020f50:	1184703a 	and	r2,r2,r6
20020f54:	1447c83a 	sub	r3,r2,r17
20020f58:	28c00716 	blt	r5,r3,20020f78 <_malloc_r+0xcc>
20020f5c:	1800920e 	bge	r3,zero,200211a8 <_malloc_r+0x2fc>
20020f60:	84000317 	ldw	r16,12(r16)
20020f64:	24008e26 	beq	r4,r16,200211a0 <_malloc_r+0x2f4>
20020f68:	80800117 	ldw	r2,4(r16)
20020f6c:	1184703a 	and	r2,r2,r6
20020f70:	1447c83a 	sub	r3,r2,r17
20020f74:	28fff90e 	bge	r5,r3,20020f5c <__flash_rwdata_start+0xffff3474>
20020f78:	3809883a 	mov	r4,r7
20020f7c:	01800034 	movhi	r6,0
20020f80:	9c000417 	ldw	r16,16(r19)
20020f84:	31816d04 	addi	r6,r6,1460
20020f88:	32000204 	addi	r8,r6,8
20020f8c:	82013426 	beq	r16,r8,20021460 <_malloc_r+0x5b4>
20020f90:	80c00117 	ldw	r3,4(r16)
20020f94:	00bfff04 	movi	r2,-4
20020f98:	188e703a 	and	r7,r3,r2
20020f9c:	3c45c83a 	sub	r2,r7,r17
20020fa0:	00c003c4 	movi	r3,15
20020fa4:	18811f16 	blt	r3,r2,20021424 <_malloc_r+0x578>
20020fa8:	32000515 	stw	r8,20(r6)
20020fac:	32000415 	stw	r8,16(r6)
20020fb0:	10007f0e 	bge	r2,zero,200211b0 <_malloc_r+0x304>
20020fb4:	00807fc4 	movi	r2,511
20020fb8:	11c0fd36 	bltu	r2,r7,200213b0 <_malloc_r+0x504>
20020fbc:	3806d0fa 	srli	r3,r7,3
20020fc0:	01c00044 	movi	r7,1
20020fc4:	30800117 	ldw	r2,4(r6)
20020fc8:	19400044 	addi	r5,r3,1
20020fcc:	294b883a 	add	r5,r5,r5
20020fd0:	1807d0ba 	srai	r3,r3,2
20020fd4:	294b883a 	add	r5,r5,r5
20020fd8:	294b883a 	add	r5,r5,r5
20020fdc:	298b883a 	add	r5,r5,r6
20020fe0:	38c6983a 	sll	r3,r7,r3
20020fe4:	29c00017 	ldw	r7,0(r5)
20020fe8:	2a7ffe04 	addi	r9,r5,-8
20020fec:	1886b03a 	or	r3,r3,r2
20020ff0:	82400315 	stw	r9,12(r16)
20020ff4:	81c00215 	stw	r7,8(r16)
20020ff8:	30c00115 	stw	r3,4(r6)
20020ffc:	2c000015 	stw	r16,0(r5)
20021000:	3c000315 	stw	r16,12(r7)
20021004:	2005d0ba 	srai	r2,r4,2
20021008:	01400044 	movi	r5,1
2002100c:	288a983a 	sll	r5,r5,r2
20021010:	19406f36 	bltu	r3,r5,200211d0 <_malloc_r+0x324>
20021014:	28c4703a 	and	r2,r5,r3
20021018:	10000a1e 	bne	r2,zero,20021044 <_malloc_r+0x198>
2002101c:	00bfff04 	movi	r2,-4
20021020:	294b883a 	add	r5,r5,r5
20021024:	2088703a 	and	r4,r4,r2
20021028:	28c4703a 	and	r2,r5,r3
2002102c:	21000104 	addi	r4,r4,4
20021030:	1000041e 	bne	r2,zero,20021044 <_malloc_r+0x198>
20021034:	294b883a 	add	r5,r5,r5
20021038:	28c4703a 	and	r2,r5,r3
2002103c:	21000104 	addi	r4,r4,4
20021040:	103ffc26 	beq	r2,zero,20021034 <__flash_rwdata_start+0xffff354c>
20021044:	02bfff04 	movi	r10,-4
20021048:	024003c4 	movi	r9,15
2002104c:	21800044 	addi	r6,r4,1
20021050:	318d883a 	add	r6,r6,r6
20021054:	318d883a 	add	r6,r6,r6
20021058:	318d883a 	add	r6,r6,r6
2002105c:	998d883a 	add	r6,r19,r6
20021060:	333ffe04 	addi	r12,r6,-8
20021064:	2017883a 	mov	r11,r4
20021068:	31800104 	addi	r6,r6,4
2002106c:	34000017 	ldw	r16,0(r6)
20021070:	31fffd04 	addi	r7,r6,-12
20021074:	81c0041e 	bne	r16,r7,20021088 <_malloc_r+0x1dc>
20021078:	0000fb06 	br	20021468 <_malloc_r+0x5bc>
2002107c:	1801030e 	bge	r3,zero,2002148c <_malloc_r+0x5e0>
20021080:	84000317 	ldw	r16,12(r16)
20021084:	81c0f826 	beq	r16,r7,20021468 <_malloc_r+0x5bc>
20021088:	80800117 	ldw	r2,4(r16)
2002108c:	1284703a 	and	r2,r2,r10
20021090:	1447c83a 	sub	r3,r2,r17
20021094:	48fff90e 	bge	r9,r3,2002107c <__flash_rwdata_start+0xffff3594>
20021098:	80800317 	ldw	r2,12(r16)
2002109c:	81000217 	ldw	r4,8(r16)
200210a0:	89400054 	ori	r5,r17,1
200210a4:	81400115 	stw	r5,4(r16)
200210a8:	20800315 	stw	r2,12(r4)
200210ac:	11000215 	stw	r4,8(r2)
200210b0:	8463883a 	add	r17,r16,r17
200210b4:	9c400515 	stw	r17,20(r19)
200210b8:	9c400415 	stw	r17,16(r19)
200210bc:	18800054 	ori	r2,r3,1
200210c0:	88800115 	stw	r2,4(r17)
200210c4:	8a000315 	stw	r8,12(r17)
200210c8:	8a000215 	stw	r8,8(r17)
200210cc:	88e3883a 	add	r17,r17,r3
200210d0:	88c00015 	stw	r3,0(r17)
200210d4:	9009883a 	mov	r4,r18
200210d8:	0023ca40 	call	20023ca4 <__malloc_unlock>
200210dc:	80800204 	addi	r2,r16,8
200210e0:	00001b06 	br	20021150 <_malloc_r+0x2a4>
200210e4:	04400404 	movi	r17,16
200210e8:	89402536 	bltu	r17,r5,20021180 <_malloc_r+0x2d4>
200210ec:	0023b840 	call	20023b84 <__malloc_lock>
200210f0:	00800184 	movi	r2,6
200210f4:	01000084 	movi	r4,2
200210f8:	04c00034 	movhi	r19,0
200210fc:	1085883a 	add	r2,r2,r2
20021100:	9cc16d04 	addi	r19,r19,1460
20021104:	1085883a 	add	r2,r2,r2
20021108:	9885883a 	add	r2,r19,r2
2002110c:	14000117 	ldw	r16,4(r2)
20021110:	10fffe04 	addi	r3,r2,-8
20021114:	80c0d926 	beq	r16,r3,2002147c <_malloc_r+0x5d0>
20021118:	80c00117 	ldw	r3,4(r16)
2002111c:	81000317 	ldw	r4,12(r16)
20021120:	00bfff04 	movi	r2,-4
20021124:	1884703a 	and	r2,r3,r2
20021128:	81400217 	ldw	r5,8(r16)
2002112c:	8085883a 	add	r2,r16,r2
20021130:	10c00117 	ldw	r3,4(r2)
20021134:	29000315 	stw	r4,12(r5)
20021138:	21400215 	stw	r5,8(r4)
2002113c:	18c00054 	ori	r3,r3,1
20021140:	10c00115 	stw	r3,4(r2)
20021144:	9009883a 	mov	r4,r18
20021148:	0023ca40 	call	20023ca4 <__malloc_unlock>
2002114c:	80800204 	addi	r2,r16,8
20021150:	dfc00a17 	ldw	ra,40(sp)
20021154:	df000917 	ldw	fp,36(sp)
20021158:	ddc00817 	ldw	r23,32(sp)
2002115c:	dd800717 	ldw	r22,28(sp)
20021160:	dd400617 	ldw	r21,24(sp)
20021164:	dd000517 	ldw	r20,20(sp)
20021168:	dcc00417 	ldw	r19,16(sp)
2002116c:	dc800317 	ldw	r18,12(sp)
20021170:	dc400217 	ldw	r17,8(sp)
20021174:	dc000117 	ldw	r16,4(sp)
20021178:	dec00b04 	addi	sp,sp,44
2002117c:	f800283a 	ret
20021180:	00800304 	movi	r2,12
20021184:	90800015 	stw	r2,0(r18)
20021188:	0005883a 	mov	r2,zero
2002118c:	003ff006 	br	20021150 <__flash_rwdata_start+0xffff3668>
20021190:	01002004 	movi	r4,128
20021194:	02001004 	movi	r8,64
20021198:	01c00fc4 	movi	r7,63
2002119c:	003f6106 	br	20020f24 <__flash_rwdata_start+0xffff343c>
200211a0:	4009883a 	mov	r4,r8
200211a4:	003f7506 	br	20020f7c <__flash_rwdata_start+0xffff3494>
200211a8:	81000317 	ldw	r4,12(r16)
200211ac:	003fde06 	br	20021128 <__flash_rwdata_start+0xffff3640>
200211b0:	81c5883a 	add	r2,r16,r7
200211b4:	11400117 	ldw	r5,4(r2)
200211b8:	9009883a 	mov	r4,r18
200211bc:	29400054 	ori	r5,r5,1
200211c0:	11400115 	stw	r5,4(r2)
200211c4:	0023ca40 	call	20023ca4 <__malloc_unlock>
200211c8:	80800204 	addi	r2,r16,8
200211cc:	003fe006 	br	20021150 <__flash_rwdata_start+0xffff3668>
200211d0:	9c000217 	ldw	r16,8(r19)
200211d4:	00bfff04 	movi	r2,-4
200211d8:	85800117 	ldw	r22,4(r16)
200211dc:	b0ac703a 	and	r22,r22,r2
200211e0:	b4400336 	bltu	r22,r17,200211f0 <_malloc_r+0x344>
200211e4:	b445c83a 	sub	r2,r22,r17
200211e8:	00c003c4 	movi	r3,15
200211ec:	18805d16 	blt	r3,r2,20021364 <_malloc_r+0x4b8>
200211f0:	05c00034 	movhi	r23,0
200211f4:	00800034 	movhi	r2,0
200211f8:	10872404 	addi	r2,r2,7312
200211fc:	bdc6f604 	addi	r23,r23,7128
20021200:	15400017 	ldw	r21,0(r2)
20021204:	b8c00017 	ldw	r3,0(r23)
20021208:	00bfffc4 	movi	r2,-1
2002120c:	858d883a 	add	r6,r16,r22
20021210:	8d6b883a 	add	r21,r17,r21
20021214:	1880ea26 	beq	r3,r2,200215c0 <_malloc_r+0x714>
20021218:	ad4403c4 	addi	r21,r21,4111
2002121c:	00bc0004 	movi	r2,-4096
20021220:	a8aa703a 	and	r21,r21,r2
20021224:	a80b883a 	mov	r5,r21
20021228:	9009883a 	mov	r4,r18
2002122c:	d9800015 	stw	r6,0(sp)
20021230:	00220cc0 	call	200220cc <_sbrk_r>
20021234:	1029883a 	mov	r20,r2
20021238:	00bfffc4 	movi	r2,-1
2002123c:	d9800017 	ldw	r6,0(sp)
20021240:	a080e826 	beq	r20,r2,200215e4 <_malloc_r+0x738>
20021244:	a180a636 	bltu	r20,r6,200214e0 <_malloc_r+0x634>
20021248:	07000034 	movhi	fp,0
2002124c:	e7074504 	addi	fp,fp,7444
20021250:	e0800017 	ldw	r2,0(fp)
20021254:	a887883a 	add	r3,r21,r2
20021258:	e0c00015 	stw	r3,0(fp)
2002125c:	3500e626 	beq	r6,r20,200215f8 <_malloc_r+0x74c>
20021260:	b9000017 	ldw	r4,0(r23)
20021264:	00bfffc4 	movi	r2,-1
20021268:	2080ee26 	beq	r4,r2,20021624 <_malloc_r+0x778>
2002126c:	a185c83a 	sub	r2,r20,r6
20021270:	10c5883a 	add	r2,r2,r3
20021274:	e0800015 	stw	r2,0(fp)
20021278:	a0c001cc 	andi	r3,r20,7
2002127c:	1800bc26 	beq	r3,zero,20021570 <_malloc_r+0x6c4>
20021280:	a0e9c83a 	sub	r20,r20,r3
20021284:	00840204 	movi	r2,4104
20021288:	a5000204 	addi	r20,r20,8
2002128c:	10c7c83a 	sub	r3,r2,r3
20021290:	a545883a 	add	r2,r20,r21
20021294:	1083ffcc 	andi	r2,r2,4095
20021298:	18abc83a 	sub	r21,r3,r2
2002129c:	a80b883a 	mov	r5,r21
200212a0:	9009883a 	mov	r4,r18
200212a4:	00220cc0 	call	200220cc <_sbrk_r>
200212a8:	00ffffc4 	movi	r3,-1
200212ac:	10c0e126 	beq	r2,r3,20021634 <_malloc_r+0x788>
200212b0:	1505c83a 	sub	r2,r2,r20
200212b4:	1545883a 	add	r2,r2,r21
200212b8:	10800054 	ori	r2,r2,1
200212bc:	e0c00017 	ldw	r3,0(fp)
200212c0:	9d000215 	stw	r20,8(r19)
200212c4:	a0800115 	stw	r2,4(r20)
200212c8:	a8c7883a 	add	r3,r21,r3
200212cc:	e0c00015 	stw	r3,0(fp)
200212d0:	84c00e26 	beq	r16,r19,2002130c <_malloc_r+0x460>
200212d4:	018003c4 	movi	r6,15
200212d8:	3580a72e 	bgeu	r6,r22,20021578 <_malloc_r+0x6cc>
200212dc:	81400117 	ldw	r5,4(r16)
200212e0:	013ffe04 	movi	r4,-8
200212e4:	b0bffd04 	addi	r2,r22,-12
200212e8:	1104703a 	and	r2,r2,r4
200212ec:	2900004c 	andi	r4,r5,1
200212f0:	2088b03a 	or	r4,r4,r2
200212f4:	81000115 	stw	r4,4(r16)
200212f8:	01400144 	movi	r5,5
200212fc:	8089883a 	add	r4,r16,r2
20021300:	21400115 	stw	r5,4(r4)
20021304:	21400215 	stw	r5,8(r4)
20021308:	3080cd36 	bltu	r6,r2,20021640 <_malloc_r+0x794>
2002130c:	00800034 	movhi	r2,0
20021310:	10872304 	addi	r2,r2,7308
20021314:	11000017 	ldw	r4,0(r2)
20021318:	20c0012e 	bgeu	r4,r3,20021320 <_malloc_r+0x474>
2002131c:	10c00015 	stw	r3,0(r2)
20021320:	00800034 	movhi	r2,0
20021324:	10872204 	addi	r2,r2,7304
20021328:	11000017 	ldw	r4,0(r2)
2002132c:	9c000217 	ldw	r16,8(r19)
20021330:	20c0012e 	bgeu	r4,r3,20021338 <_malloc_r+0x48c>
20021334:	10c00015 	stw	r3,0(r2)
20021338:	80c00117 	ldw	r3,4(r16)
2002133c:	00bfff04 	movi	r2,-4
20021340:	1886703a 	and	r3,r3,r2
20021344:	1c45c83a 	sub	r2,r3,r17
20021348:	1c400236 	bltu	r3,r17,20021354 <_malloc_r+0x4a8>
2002134c:	00c003c4 	movi	r3,15
20021350:	18800416 	blt	r3,r2,20021364 <_malloc_r+0x4b8>
20021354:	9009883a 	mov	r4,r18
20021358:	0023ca40 	call	20023ca4 <__malloc_unlock>
2002135c:	0005883a 	mov	r2,zero
20021360:	003f7b06 	br	20021150 <__flash_rwdata_start+0xffff3668>
20021364:	88c00054 	ori	r3,r17,1
20021368:	80c00115 	stw	r3,4(r16)
2002136c:	8463883a 	add	r17,r16,r17
20021370:	10800054 	ori	r2,r2,1
20021374:	9c400215 	stw	r17,8(r19)
20021378:	88800115 	stw	r2,4(r17)
2002137c:	9009883a 	mov	r4,r18
20021380:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021384:	80800204 	addi	r2,r16,8
20021388:	003f7106 	br	20021150 <__flash_rwdata_start+0xffff3668>
2002138c:	00c00504 	movi	r3,20
20021390:	18804a2e 	bgeu	r3,r2,200214bc <_malloc_r+0x610>
20021394:	00c01504 	movi	r3,84
20021398:	18806e36 	bltu	r3,r2,20021554 <_malloc_r+0x6a8>
2002139c:	8804d33a 	srli	r2,r17,12
200213a0:	12001bc4 	addi	r8,r2,111
200213a4:	11c01b84 	addi	r7,r2,110
200213a8:	4209883a 	add	r4,r8,r8
200213ac:	003edd06 	br	20020f24 <__flash_rwdata_start+0xffff343c>
200213b0:	3804d27a 	srli	r2,r7,9
200213b4:	00c00104 	movi	r3,4
200213b8:	1880442e 	bgeu	r3,r2,200214cc <_malloc_r+0x620>
200213bc:	00c00504 	movi	r3,20
200213c0:	18808136 	bltu	r3,r2,200215c8 <_malloc_r+0x71c>
200213c4:	11401704 	addi	r5,r2,92
200213c8:	10c016c4 	addi	r3,r2,91
200213cc:	294b883a 	add	r5,r5,r5
200213d0:	294b883a 	add	r5,r5,r5
200213d4:	294b883a 	add	r5,r5,r5
200213d8:	994b883a 	add	r5,r19,r5
200213dc:	28800017 	ldw	r2,0(r5)
200213e0:	01800034 	movhi	r6,0
200213e4:	297ffe04 	addi	r5,r5,-8
200213e8:	31816d04 	addi	r6,r6,1460
200213ec:	28806526 	beq	r5,r2,20021584 <_malloc_r+0x6d8>
200213f0:	01bfff04 	movi	r6,-4
200213f4:	10c00117 	ldw	r3,4(r2)
200213f8:	1986703a 	and	r3,r3,r6
200213fc:	38c0022e 	bgeu	r7,r3,20021408 <_malloc_r+0x55c>
20021400:	10800217 	ldw	r2,8(r2)
20021404:	28bffb1e 	bne	r5,r2,200213f4 <__flash_rwdata_start+0xffff390c>
20021408:	11400317 	ldw	r5,12(r2)
2002140c:	98c00117 	ldw	r3,4(r19)
20021410:	81400315 	stw	r5,12(r16)
20021414:	80800215 	stw	r2,8(r16)
20021418:	2c000215 	stw	r16,8(r5)
2002141c:	14000315 	stw	r16,12(r2)
20021420:	003ef806 	br	20021004 <__flash_rwdata_start+0xffff351c>
20021424:	88c00054 	ori	r3,r17,1
20021428:	80c00115 	stw	r3,4(r16)
2002142c:	8463883a 	add	r17,r16,r17
20021430:	34400515 	stw	r17,20(r6)
20021434:	34400415 	stw	r17,16(r6)
20021438:	10c00054 	ori	r3,r2,1
2002143c:	8a000315 	stw	r8,12(r17)
20021440:	8a000215 	stw	r8,8(r17)
20021444:	88c00115 	stw	r3,4(r17)
20021448:	88a3883a 	add	r17,r17,r2
2002144c:	88800015 	stw	r2,0(r17)
20021450:	9009883a 	mov	r4,r18
20021454:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021458:	80800204 	addi	r2,r16,8
2002145c:	003f3c06 	br	20021150 <__flash_rwdata_start+0xffff3668>
20021460:	30c00117 	ldw	r3,4(r6)
20021464:	003ee706 	br	20021004 <__flash_rwdata_start+0xffff351c>
20021468:	5ac00044 	addi	r11,r11,1
2002146c:	588000cc 	andi	r2,r11,3
20021470:	31800204 	addi	r6,r6,8
20021474:	103efd1e 	bne	r2,zero,2002106c <__flash_rwdata_start+0xffff3584>
20021478:	00002406 	br	2002150c <_malloc_r+0x660>
2002147c:	14000317 	ldw	r16,12(r2)
20021480:	143f251e 	bne	r2,r16,20021118 <__flash_rwdata_start+0xffff3630>
20021484:	21000084 	addi	r4,r4,2
20021488:	003ebc06 	br	20020f7c <__flash_rwdata_start+0xffff3494>
2002148c:	8085883a 	add	r2,r16,r2
20021490:	10c00117 	ldw	r3,4(r2)
20021494:	81000317 	ldw	r4,12(r16)
20021498:	81400217 	ldw	r5,8(r16)
2002149c:	18c00054 	ori	r3,r3,1
200214a0:	10c00115 	stw	r3,4(r2)
200214a4:	29000315 	stw	r4,12(r5)
200214a8:	21400215 	stw	r5,8(r4)
200214ac:	9009883a 	mov	r4,r18
200214b0:	0023ca40 	call	20023ca4 <__malloc_unlock>
200214b4:	80800204 	addi	r2,r16,8
200214b8:	003f2506 	br	20021150 <__flash_rwdata_start+0xffff3668>
200214bc:	12001704 	addi	r8,r2,92
200214c0:	11c016c4 	addi	r7,r2,91
200214c4:	4209883a 	add	r4,r8,r8
200214c8:	003e9606 	br	20020f24 <__flash_rwdata_start+0xffff343c>
200214cc:	3804d1ba 	srli	r2,r7,6
200214d0:	11400e44 	addi	r5,r2,57
200214d4:	10c00e04 	addi	r3,r2,56
200214d8:	294b883a 	add	r5,r5,r5
200214dc:	003fbc06 	br	200213d0 <__flash_rwdata_start+0xffff38e8>
200214e0:	84ff5926 	beq	r16,r19,20021248 <__flash_rwdata_start+0xffff3760>
200214e4:	00800034 	movhi	r2,0
200214e8:	10816d04 	addi	r2,r2,1460
200214ec:	14000217 	ldw	r16,8(r2)
200214f0:	00bfff04 	movi	r2,-4
200214f4:	80c00117 	ldw	r3,4(r16)
200214f8:	1886703a 	and	r3,r3,r2
200214fc:	003f9106 	br	20021344 <__flash_rwdata_start+0xffff385c>
20021500:	60800217 	ldw	r2,8(r12)
20021504:	213fffc4 	addi	r4,r4,-1
20021508:	1300651e 	bne	r2,r12,200216a0 <_malloc_r+0x7f4>
2002150c:	208000cc 	andi	r2,r4,3
20021510:	633ffe04 	addi	r12,r12,-8
20021514:	103ffa1e 	bne	r2,zero,20021500 <__flash_rwdata_start+0xffff3a18>
20021518:	98800117 	ldw	r2,4(r19)
2002151c:	0146303a 	nor	r3,zero,r5
20021520:	1884703a 	and	r2,r3,r2
20021524:	98800115 	stw	r2,4(r19)
20021528:	294b883a 	add	r5,r5,r5
2002152c:	117f2836 	bltu	r2,r5,200211d0 <__flash_rwdata_start+0xffff36e8>
20021530:	283f2726 	beq	r5,zero,200211d0 <__flash_rwdata_start+0xffff36e8>
20021534:	2886703a 	and	r3,r5,r2
20021538:	5809883a 	mov	r4,r11
2002153c:	183ec31e 	bne	r3,zero,2002104c <__flash_rwdata_start+0xffff3564>
20021540:	294b883a 	add	r5,r5,r5
20021544:	2886703a 	and	r3,r5,r2
20021548:	21000104 	addi	r4,r4,4
2002154c:	183ffc26 	beq	r3,zero,20021540 <__flash_rwdata_start+0xffff3a58>
20021550:	003ebe06 	br	2002104c <__flash_rwdata_start+0xffff3564>
20021554:	00c05504 	movi	r3,340
20021558:	18801236 	bltu	r3,r2,200215a4 <_malloc_r+0x6f8>
2002155c:	8804d3fa 	srli	r2,r17,15
20021560:	12001e04 	addi	r8,r2,120
20021564:	11c01dc4 	addi	r7,r2,119
20021568:	4209883a 	add	r4,r8,r8
2002156c:	003e6d06 	br	20020f24 <__flash_rwdata_start+0xffff343c>
20021570:	00c40004 	movi	r3,4096
20021574:	003f4606 	br	20021290 <__flash_rwdata_start+0xffff37a8>
20021578:	00800044 	movi	r2,1
2002157c:	a0800115 	stw	r2,4(r20)
20021580:	003f7406 	br	20021354 <__flash_rwdata_start+0xffff386c>
20021584:	1805d0ba 	srai	r2,r3,2
20021588:	01c00044 	movi	r7,1
2002158c:	30c00117 	ldw	r3,4(r6)
20021590:	388e983a 	sll	r7,r7,r2
20021594:	2805883a 	mov	r2,r5
20021598:	38c6b03a 	or	r3,r7,r3
2002159c:	30c00115 	stw	r3,4(r6)
200215a0:	003f9b06 	br	20021410 <__flash_rwdata_start+0xffff3928>
200215a4:	00c15504 	movi	r3,1364
200215a8:	18801a36 	bltu	r3,r2,20021614 <_malloc_r+0x768>
200215ac:	8804d4ba 	srli	r2,r17,18
200215b0:	12001f44 	addi	r8,r2,125
200215b4:	11c01f04 	addi	r7,r2,124
200215b8:	4209883a 	add	r4,r8,r8
200215bc:	003e5906 	br	20020f24 <__flash_rwdata_start+0xffff343c>
200215c0:	ad400404 	addi	r21,r21,16
200215c4:	003f1706 	br	20021224 <__flash_rwdata_start+0xffff373c>
200215c8:	00c01504 	movi	r3,84
200215cc:	18802336 	bltu	r3,r2,2002165c <_malloc_r+0x7b0>
200215d0:	3804d33a 	srli	r2,r7,12
200215d4:	11401bc4 	addi	r5,r2,111
200215d8:	10c01b84 	addi	r3,r2,110
200215dc:	294b883a 	add	r5,r5,r5
200215e0:	003f7b06 	br	200213d0 <__flash_rwdata_start+0xffff38e8>
200215e4:	9c000217 	ldw	r16,8(r19)
200215e8:	00bfff04 	movi	r2,-4
200215ec:	80c00117 	ldw	r3,4(r16)
200215f0:	1886703a 	and	r3,r3,r2
200215f4:	003f5306 	br	20021344 <__flash_rwdata_start+0xffff385c>
200215f8:	3083ffcc 	andi	r2,r6,4095
200215fc:	103f181e 	bne	r2,zero,20021260 <__flash_rwdata_start+0xffff3778>
20021600:	99000217 	ldw	r4,8(r19)
20021604:	b545883a 	add	r2,r22,r21
20021608:	10800054 	ori	r2,r2,1
2002160c:	20800115 	stw	r2,4(r4)
20021610:	003f3e06 	br	2002130c <__flash_rwdata_start+0xffff3824>
20021614:	01003f84 	movi	r4,254
20021618:	02001fc4 	movi	r8,127
2002161c:	01c01f84 	movi	r7,126
20021620:	003e4006 	br	20020f24 <__flash_rwdata_start+0xffff343c>
20021624:	00800034 	movhi	r2,0
20021628:	1086f604 	addi	r2,r2,7128
2002162c:	15000015 	stw	r20,0(r2)
20021630:	003f1106 	br	20021278 <__flash_rwdata_start+0xffff3790>
20021634:	00800044 	movi	r2,1
20021638:	002b883a 	mov	r21,zero
2002163c:	003f1f06 	br	200212bc <__flash_rwdata_start+0xffff37d4>
20021640:	81400204 	addi	r5,r16,8
20021644:	9009883a 	mov	r4,r18
20021648:	00229340 	call	20022934 <_free_r>
2002164c:	00800034 	movhi	r2,0
20021650:	10874504 	addi	r2,r2,7444
20021654:	10c00017 	ldw	r3,0(r2)
20021658:	003f2c06 	br	2002130c <__flash_rwdata_start+0xffff3824>
2002165c:	00c05504 	movi	r3,340
20021660:	18800536 	bltu	r3,r2,20021678 <_malloc_r+0x7cc>
20021664:	3804d3fa 	srli	r2,r7,15
20021668:	11401e04 	addi	r5,r2,120
2002166c:	10c01dc4 	addi	r3,r2,119
20021670:	294b883a 	add	r5,r5,r5
20021674:	003f5606 	br	200213d0 <__flash_rwdata_start+0xffff38e8>
20021678:	00c15504 	movi	r3,1364
2002167c:	18800536 	bltu	r3,r2,20021694 <_malloc_r+0x7e8>
20021680:	3804d4ba 	srli	r2,r7,18
20021684:	11401f44 	addi	r5,r2,125
20021688:	10c01f04 	addi	r3,r2,124
2002168c:	294b883a 	add	r5,r5,r5
20021690:	003f4f06 	br	200213d0 <__flash_rwdata_start+0xffff38e8>
20021694:	01403f84 	movi	r5,254
20021698:	00c01f84 	movi	r3,126
2002169c:	003f4c06 	br	200213d0 <__flash_rwdata_start+0xffff38e8>
200216a0:	98800117 	ldw	r2,4(r19)
200216a4:	003fa006 	br	20021528 <__flash_rwdata_start+0xffff3a40>
200216a8:	8808d0fa 	srli	r4,r17,3
200216ac:	20800044 	addi	r2,r4,1
200216b0:	1085883a 	add	r2,r2,r2
200216b4:	003e9006 	br	200210f8 <__flash_rwdata_start+0xffff3610>

200216b8 <memchr>:
200216b8:	208000cc 	andi	r2,r4,3
200216bc:	280f883a 	mov	r7,r5
200216c0:	10003426 	beq	r2,zero,20021794 <memchr+0xdc>
200216c4:	30bfffc4 	addi	r2,r6,-1
200216c8:	30001a26 	beq	r6,zero,20021734 <memchr+0x7c>
200216cc:	20c00003 	ldbu	r3,0(r4)
200216d0:	29803fcc 	andi	r6,r5,255
200216d4:	30c0051e 	bne	r6,r3,200216ec <memchr+0x34>
200216d8:	00001806 	br	2002173c <memchr+0x84>
200216dc:	10001526 	beq	r2,zero,20021734 <memchr+0x7c>
200216e0:	20c00003 	ldbu	r3,0(r4)
200216e4:	10bfffc4 	addi	r2,r2,-1
200216e8:	30c01426 	beq	r6,r3,2002173c <memchr+0x84>
200216ec:	21000044 	addi	r4,r4,1
200216f0:	20c000cc 	andi	r3,r4,3
200216f4:	183ff91e 	bne	r3,zero,200216dc <__flash_rwdata_start+0xffff3bf4>
200216f8:	020000c4 	movi	r8,3
200216fc:	40801136 	bltu	r8,r2,20021744 <memchr+0x8c>
20021700:	10000c26 	beq	r2,zero,20021734 <memchr+0x7c>
20021704:	20c00003 	ldbu	r3,0(r4)
20021708:	29403fcc 	andi	r5,r5,255
2002170c:	28c00b26 	beq	r5,r3,2002173c <memchr+0x84>
20021710:	20c00044 	addi	r3,r4,1
20021714:	39803fcc 	andi	r6,r7,255
20021718:	2089883a 	add	r4,r4,r2
2002171c:	00000306 	br	2002172c <memchr+0x74>
20021720:	18c00044 	addi	r3,r3,1
20021724:	197fffc3 	ldbu	r5,-1(r3)
20021728:	31400526 	beq	r6,r5,20021740 <memchr+0x88>
2002172c:	1805883a 	mov	r2,r3
20021730:	20fffb1e 	bne	r4,r3,20021720 <__flash_rwdata_start+0xffff3c38>
20021734:	0005883a 	mov	r2,zero
20021738:	f800283a 	ret
2002173c:	2005883a 	mov	r2,r4
20021740:	f800283a 	ret
20021744:	28c03fcc 	andi	r3,r5,255
20021748:	1812923a 	slli	r9,r3,8
2002174c:	02ffbff4 	movhi	r11,65279
20021750:	02a02074 	movhi	r10,32897
20021754:	48d2b03a 	or	r9,r9,r3
20021758:	4806943a 	slli	r3,r9,16
2002175c:	5affbfc4 	addi	r11,r11,-257
20021760:	52a02004 	addi	r10,r10,-32640
20021764:	48d2b03a 	or	r9,r9,r3
20021768:	20c00017 	ldw	r3,0(r4)
2002176c:	48c6f03a 	xor	r3,r9,r3
20021770:	1acd883a 	add	r6,r3,r11
20021774:	00c6303a 	nor	r3,zero,r3
20021778:	30c6703a 	and	r3,r6,r3
2002177c:	1a86703a 	and	r3,r3,r10
20021780:	183fe01e 	bne	r3,zero,20021704 <__flash_rwdata_start+0xffff3c1c>
20021784:	10bfff04 	addi	r2,r2,-4
20021788:	21000104 	addi	r4,r4,4
2002178c:	40bff636 	bltu	r8,r2,20021768 <__flash_rwdata_start+0xffff3c80>
20021790:	003fdb06 	br	20021700 <__flash_rwdata_start+0xffff3c18>
20021794:	3005883a 	mov	r2,r6
20021798:	003fd706 	br	200216f8 <__flash_rwdata_start+0xffff3c10>

2002179c <memcpy>:
2002179c:	defffd04 	addi	sp,sp,-12
200217a0:	dfc00215 	stw	ra,8(sp)
200217a4:	dc400115 	stw	r17,4(sp)
200217a8:	dc000015 	stw	r16,0(sp)
200217ac:	00c003c4 	movi	r3,15
200217b0:	2005883a 	mov	r2,r4
200217b4:	1980452e 	bgeu	r3,r6,200218cc <memcpy+0x130>
200217b8:	2906b03a 	or	r3,r5,r4
200217bc:	18c000cc 	andi	r3,r3,3
200217c0:	1800441e 	bne	r3,zero,200218d4 <memcpy+0x138>
200217c4:	347ffc04 	addi	r17,r6,-16
200217c8:	8822d13a 	srli	r17,r17,4
200217cc:	28c00104 	addi	r3,r5,4
200217d0:	23400104 	addi	r13,r4,4
200217d4:	8820913a 	slli	r16,r17,4
200217d8:	2b000204 	addi	r12,r5,8
200217dc:	22c00204 	addi	r11,r4,8
200217e0:	84000504 	addi	r16,r16,20
200217e4:	2a800304 	addi	r10,r5,12
200217e8:	22400304 	addi	r9,r4,12
200217ec:	2c21883a 	add	r16,r5,r16
200217f0:	2811883a 	mov	r8,r5
200217f4:	200f883a 	mov	r7,r4
200217f8:	41000017 	ldw	r4,0(r8)
200217fc:	1fc00017 	ldw	ra,0(r3)
20021800:	63c00017 	ldw	r15,0(r12)
20021804:	39000015 	stw	r4,0(r7)
20021808:	53800017 	ldw	r14,0(r10)
2002180c:	6fc00015 	stw	ra,0(r13)
20021810:	5bc00015 	stw	r15,0(r11)
20021814:	4b800015 	stw	r14,0(r9)
20021818:	18c00404 	addi	r3,r3,16
2002181c:	39c00404 	addi	r7,r7,16
20021820:	42000404 	addi	r8,r8,16
20021824:	6b400404 	addi	r13,r13,16
20021828:	63000404 	addi	r12,r12,16
2002182c:	5ac00404 	addi	r11,r11,16
20021830:	52800404 	addi	r10,r10,16
20021834:	4a400404 	addi	r9,r9,16
20021838:	1c3fef1e 	bne	r3,r16,200217f8 <__flash_rwdata_start+0xffff3d10>
2002183c:	89c00044 	addi	r7,r17,1
20021840:	380e913a 	slli	r7,r7,4
20021844:	310003cc 	andi	r4,r6,15
20021848:	02c000c4 	movi	r11,3
2002184c:	11c7883a 	add	r3,r2,r7
20021850:	29cb883a 	add	r5,r5,r7
20021854:	5900212e 	bgeu	r11,r4,200218dc <memcpy+0x140>
20021858:	1813883a 	mov	r9,r3
2002185c:	2811883a 	mov	r8,r5
20021860:	200f883a 	mov	r7,r4
20021864:	42800017 	ldw	r10,0(r8)
20021868:	4a400104 	addi	r9,r9,4
2002186c:	39ffff04 	addi	r7,r7,-4
20021870:	4abfff15 	stw	r10,-4(r9)
20021874:	42000104 	addi	r8,r8,4
20021878:	59fffa36 	bltu	r11,r7,20021864 <__flash_rwdata_start+0xffff3d7c>
2002187c:	213fff04 	addi	r4,r4,-4
20021880:	2008d0ba 	srli	r4,r4,2
20021884:	318000cc 	andi	r6,r6,3
20021888:	21000044 	addi	r4,r4,1
2002188c:	2109883a 	add	r4,r4,r4
20021890:	2109883a 	add	r4,r4,r4
20021894:	1907883a 	add	r3,r3,r4
20021898:	290b883a 	add	r5,r5,r4
2002189c:	30000626 	beq	r6,zero,200218b8 <memcpy+0x11c>
200218a0:	198d883a 	add	r6,r3,r6
200218a4:	29c00003 	ldbu	r7,0(r5)
200218a8:	18c00044 	addi	r3,r3,1
200218ac:	29400044 	addi	r5,r5,1
200218b0:	19ffffc5 	stb	r7,-1(r3)
200218b4:	19bffb1e 	bne	r3,r6,200218a4 <__flash_rwdata_start+0xffff3dbc>
200218b8:	dfc00217 	ldw	ra,8(sp)
200218bc:	dc400117 	ldw	r17,4(sp)
200218c0:	dc000017 	ldw	r16,0(sp)
200218c4:	dec00304 	addi	sp,sp,12
200218c8:	f800283a 	ret
200218cc:	2007883a 	mov	r3,r4
200218d0:	003ff206 	br	2002189c <__flash_rwdata_start+0xffff3db4>
200218d4:	2007883a 	mov	r3,r4
200218d8:	003ff106 	br	200218a0 <__flash_rwdata_start+0xffff3db8>
200218dc:	200d883a 	mov	r6,r4
200218e0:	003fee06 	br	2002189c <__flash_rwdata_start+0xffff3db4>

200218e4 <memmove>:
200218e4:	2005883a 	mov	r2,r4
200218e8:	29000b2e 	bgeu	r5,r4,20021918 <memmove+0x34>
200218ec:	298f883a 	add	r7,r5,r6
200218f0:	21c0092e 	bgeu	r4,r7,20021918 <memmove+0x34>
200218f4:	2187883a 	add	r3,r4,r6
200218f8:	198bc83a 	sub	r5,r3,r6
200218fc:	30004826 	beq	r6,zero,20021a20 <memmove+0x13c>
20021900:	39ffffc4 	addi	r7,r7,-1
20021904:	39000003 	ldbu	r4,0(r7)
20021908:	18ffffc4 	addi	r3,r3,-1
2002190c:	19000005 	stb	r4,0(r3)
20021910:	28fffb1e 	bne	r5,r3,20021900 <__flash_rwdata_start+0xffff3e18>
20021914:	f800283a 	ret
20021918:	00c003c4 	movi	r3,15
2002191c:	1980412e 	bgeu	r3,r6,20021a24 <memmove+0x140>
20021920:	2886b03a 	or	r3,r5,r2
20021924:	18c000cc 	andi	r3,r3,3
20021928:	1800401e 	bne	r3,zero,20021a2c <memmove+0x148>
2002192c:	33fffc04 	addi	r15,r6,-16
20021930:	781ed13a 	srli	r15,r15,4
20021934:	28c00104 	addi	r3,r5,4
20021938:	13400104 	addi	r13,r2,4
2002193c:	781c913a 	slli	r14,r15,4
20021940:	2b000204 	addi	r12,r5,8
20021944:	12c00204 	addi	r11,r2,8
20021948:	73800504 	addi	r14,r14,20
2002194c:	2a800304 	addi	r10,r5,12
20021950:	12400304 	addi	r9,r2,12
20021954:	2b9d883a 	add	r14,r5,r14
20021958:	2811883a 	mov	r8,r5
2002195c:	100f883a 	mov	r7,r2
20021960:	41000017 	ldw	r4,0(r8)
20021964:	39c00404 	addi	r7,r7,16
20021968:	18c00404 	addi	r3,r3,16
2002196c:	393ffc15 	stw	r4,-16(r7)
20021970:	193ffc17 	ldw	r4,-16(r3)
20021974:	6b400404 	addi	r13,r13,16
20021978:	5ac00404 	addi	r11,r11,16
2002197c:	693ffc15 	stw	r4,-16(r13)
20021980:	61000017 	ldw	r4,0(r12)
20021984:	4a400404 	addi	r9,r9,16
20021988:	42000404 	addi	r8,r8,16
2002198c:	593ffc15 	stw	r4,-16(r11)
20021990:	51000017 	ldw	r4,0(r10)
20021994:	63000404 	addi	r12,r12,16
20021998:	52800404 	addi	r10,r10,16
2002199c:	493ffc15 	stw	r4,-16(r9)
200219a0:	1bbfef1e 	bne	r3,r14,20021960 <__flash_rwdata_start+0xffff3e78>
200219a4:	79000044 	addi	r4,r15,1
200219a8:	2008913a 	slli	r4,r4,4
200219ac:	328003cc 	andi	r10,r6,15
200219b0:	02c000c4 	movi	r11,3
200219b4:	1107883a 	add	r3,r2,r4
200219b8:	290b883a 	add	r5,r5,r4
200219bc:	5a801e2e 	bgeu	r11,r10,20021a38 <memmove+0x154>
200219c0:	1813883a 	mov	r9,r3
200219c4:	2811883a 	mov	r8,r5
200219c8:	500f883a 	mov	r7,r10
200219cc:	41000017 	ldw	r4,0(r8)
200219d0:	4a400104 	addi	r9,r9,4
200219d4:	39ffff04 	addi	r7,r7,-4
200219d8:	493fff15 	stw	r4,-4(r9)
200219dc:	42000104 	addi	r8,r8,4
200219e0:	59fffa36 	bltu	r11,r7,200219cc <__flash_rwdata_start+0xffff3ee4>
200219e4:	513fff04 	addi	r4,r10,-4
200219e8:	2008d0ba 	srli	r4,r4,2
200219ec:	318000cc 	andi	r6,r6,3
200219f0:	21000044 	addi	r4,r4,1
200219f4:	2109883a 	add	r4,r4,r4
200219f8:	2109883a 	add	r4,r4,r4
200219fc:	1907883a 	add	r3,r3,r4
20021a00:	290b883a 	add	r5,r5,r4
20021a04:	30000b26 	beq	r6,zero,20021a34 <memmove+0x150>
20021a08:	198d883a 	add	r6,r3,r6
20021a0c:	29c00003 	ldbu	r7,0(r5)
20021a10:	18c00044 	addi	r3,r3,1
20021a14:	29400044 	addi	r5,r5,1
20021a18:	19ffffc5 	stb	r7,-1(r3)
20021a1c:	19bffb1e 	bne	r3,r6,20021a0c <__flash_rwdata_start+0xffff3f24>
20021a20:	f800283a 	ret
20021a24:	1007883a 	mov	r3,r2
20021a28:	003ff606 	br	20021a04 <__flash_rwdata_start+0xffff3f1c>
20021a2c:	1007883a 	mov	r3,r2
20021a30:	003ff506 	br	20021a08 <__flash_rwdata_start+0xffff3f20>
20021a34:	f800283a 	ret
20021a38:	500d883a 	mov	r6,r10
20021a3c:	003ff106 	br	20021a04 <__flash_rwdata_start+0xffff3f1c>

20021a40 <memset>:
20021a40:	20c000cc 	andi	r3,r4,3
20021a44:	2005883a 	mov	r2,r4
20021a48:	18004426 	beq	r3,zero,20021b5c <memset+0x11c>
20021a4c:	31ffffc4 	addi	r7,r6,-1
20021a50:	30004026 	beq	r6,zero,20021b54 <memset+0x114>
20021a54:	2813883a 	mov	r9,r5
20021a58:	200d883a 	mov	r6,r4
20021a5c:	2007883a 	mov	r3,r4
20021a60:	00000406 	br	20021a74 <memset+0x34>
20021a64:	3a3fffc4 	addi	r8,r7,-1
20021a68:	31800044 	addi	r6,r6,1
20021a6c:	38003926 	beq	r7,zero,20021b54 <memset+0x114>
20021a70:	400f883a 	mov	r7,r8
20021a74:	18c00044 	addi	r3,r3,1
20021a78:	32400005 	stb	r9,0(r6)
20021a7c:	1a0000cc 	andi	r8,r3,3
20021a80:	403ff81e 	bne	r8,zero,20021a64 <__flash_rwdata_start+0xffff3f7c>
20021a84:	010000c4 	movi	r4,3
20021a88:	21c02d2e 	bgeu	r4,r7,20021b40 <memset+0x100>
20021a8c:	29003fcc 	andi	r4,r5,255
20021a90:	200c923a 	slli	r6,r4,8
20021a94:	3108b03a 	or	r4,r6,r4
20021a98:	200c943a 	slli	r6,r4,16
20021a9c:	218cb03a 	or	r6,r4,r6
20021aa0:	010003c4 	movi	r4,15
20021aa4:	21c0182e 	bgeu	r4,r7,20021b08 <memset+0xc8>
20021aa8:	3b3ffc04 	addi	r12,r7,-16
20021aac:	6018d13a 	srli	r12,r12,4
20021ab0:	1a000104 	addi	r8,r3,4
20021ab4:	1ac00204 	addi	r11,r3,8
20021ab8:	6008913a 	slli	r4,r12,4
20021abc:	1a800304 	addi	r10,r3,12
20021ac0:	1813883a 	mov	r9,r3
20021ac4:	21000504 	addi	r4,r4,20
20021ac8:	1909883a 	add	r4,r3,r4
20021acc:	49800015 	stw	r6,0(r9)
20021ad0:	41800015 	stw	r6,0(r8)
20021ad4:	59800015 	stw	r6,0(r11)
20021ad8:	51800015 	stw	r6,0(r10)
20021adc:	42000404 	addi	r8,r8,16
20021ae0:	4a400404 	addi	r9,r9,16
20021ae4:	5ac00404 	addi	r11,r11,16
20021ae8:	52800404 	addi	r10,r10,16
20021aec:	413ff71e 	bne	r8,r4,20021acc <__flash_rwdata_start+0xffff3fe4>
20021af0:	63000044 	addi	r12,r12,1
20021af4:	6018913a 	slli	r12,r12,4
20021af8:	39c003cc 	andi	r7,r7,15
20021afc:	010000c4 	movi	r4,3
20021b00:	1b07883a 	add	r3,r3,r12
20021b04:	21c00e2e 	bgeu	r4,r7,20021b40 <memset+0x100>
20021b08:	1813883a 	mov	r9,r3
20021b0c:	3811883a 	mov	r8,r7
20021b10:	010000c4 	movi	r4,3
20021b14:	49800015 	stw	r6,0(r9)
20021b18:	423fff04 	addi	r8,r8,-4
20021b1c:	4a400104 	addi	r9,r9,4
20021b20:	223ffc36 	bltu	r4,r8,20021b14 <__flash_rwdata_start+0xffff402c>
20021b24:	393fff04 	addi	r4,r7,-4
20021b28:	2008d0ba 	srli	r4,r4,2
20021b2c:	39c000cc 	andi	r7,r7,3
20021b30:	21000044 	addi	r4,r4,1
20021b34:	2109883a 	add	r4,r4,r4
20021b38:	2109883a 	add	r4,r4,r4
20021b3c:	1907883a 	add	r3,r3,r4
20021b40:	38000526 	beq	r7,zero,20021b58 <memset+0x118>
20021b44:	19cf883a 	add	r7,r3,r7
20021b48:	19400005 	stb	r5,0(r3)
20021b4c:	18c00044 	addi	r3,r3,1
20021b50:	38fffd1e 	bne	r7,r3,20021b48 <__flash_rwdata_start+0xffff4060>
20021b54:	f800283a 	ret
20021b58:	f800283a 	ret
20021b5c:	2007883a 	mov	r3,r4
20021b60:	300f883a 	mov	r7,r6
20021b64:	003fc706 	br	20021a84 <__flash_rwdata_start+0xffff3f9c>

20021b68 <_realloc_r>:
20021b68:	defff604 	addi	sp,sp,-40
20021b6c:	dc800215 	stw	r18,8(sp)
20021b70:	dfc00915 	stw	ra,36(sp)
20021b74:	df000815 	stw	fp,32(sp)
20021b78:	ddc00715 	stw	r23,28(sp)
20021b7c:	dd800615 	stw	r22,24(sp)
20021b80:	dd400515 	stw	r21,20(sp)
20021b84:	dd000415 	stw	r20,16(sp)
20021b88:	dcc00315 	stw	r19,12(sp)
20021b8c:	dc400115 	stw	r17,4(sp)
20021b90:	dc000015 	stw	r16,0(sp)
20021b94:	3025883a 	mov	r18,r6
20021b98:	2800b726 	beq	r5,zero,20021e78 <_realloc_r+0x310>
20021b9c:	282b883a 	mov	r21,r5
20021ba0:	2029883a 	mov	r20,r4
20021ba4:	0023b840 	call	20023b84 <__malloc_lock>
20021ba8:	a8bfff17 	ldw	r2,-4(r21)
20021bac:	043fff04 	movi	r16,-4
20021bb0:	90c002c4 	addi	r3,r18,11
20021bb4:	01000584 	movi	r4,22
20021bb8:	acfffe04 	addi	r19,r21,-8
20021bbc:	1420703a 	and	r16,r2,r16
20021bc0:	20c0332e 	bgeu	r4,r3,20021c90 <_realloc_r+0x128>
20021bc4:	047ffe04 	movi	r17,-8
20021bc8:	1c62703a 	and	r17,r3,r17
20021bcc:	8807883a 	mov	r3,r17
20021bd0:	88005816 	blt	r17,zero,20021d34 <_realloc_r+0x1cc>
20021bd4:	8c805736 	bltu	r17,r18,20021d34 <_realloc_r+0x1cc>
20021bd8:	80c0300e 	bge	r16,r3,20021c9c <_realloc_r+0x134>
20021bdc:	07000034 	movhi	fp,0
20021be0:	e7016d04 	addi	fp,fp,1460
20021be4:	e1c00217 	ldw	r7,8(fp)
20021be8:	9c09883a 	add	r4,r19,r16
20021bec:	22000117 	ldw	r8,4(r4)
20021bf0:	21c06326 	beq	r4,r7,20021d80 <_realloc_r+0x218>
20021bf4:	017fff84 	movi	r5,-2
20021bf8:	414a703a 	and	r5,r8,r5
20021bfc:	214b883a 	add	r5,r4,r5
20021c00:	29800117 	ldw	r6,4(r5)
20021c04:	3180004c 	andi	r6,r6,1
20021c08:	30003f26 	beq	r6,zero,20021d08 <_realloc_r+0x1a0>
20021c0c:	1080004c 	andi	r2,r2,1
20021c10:	10008326 	beq	r2,zero,20021e20 <_realloc_r+0x2b8>
20021c14:	900b883a 	mov	r5,r18
20021c18:	a009883a 	mov	r4,r20
20021c1c:	0020eac0 	call	20020eac <_malloc_r>
20021c20:	1025883a 	mov	r18,r2
20021c24:	10011e26 	beq	r2,zero,200220a0 <_realloc_r+0x538>
20021c28:	a93fff17 	ldw	r4,-4(r21)
20021c2c:	10fffe04 	addi	r3,r2,-8
20021c30:	00bfff84 	movi	r2,-2
20021c34:	2084703a 	and	r2,r4,r2
20021c38:	9885883a 	add	r2,r19,r2
20021c3c:	1880ee26 	beq	r3,r2,20021ff8 <_realloc_r+0x490>
20021c40:	81bfff04 	addi	r6,r16,-4
20021c44:	00800904 	movi	r2,36
20021c48:	1180b836 	bltu	r2,r6,20021f2c <_realloc_r+0x3c4>
20021c4c:	00c004c4 	movi	r3,19
20021c50:	19809636 	bltu	r3,r6,20021eac <_realloc_r+0x344>
20021c54:	9005883a 	mov	r2,r18
20021c58:	a807883a 	mov	r3,r21
20021c5c:	19000017 	ldw	r4,0(r3)
20021c60:	11000015 	stw	r4,0(r2)
20021c64:	19000117 	ldw	r4,4(r3)
20021c68:	11000115 	stw	r4,4(r2)
20021c6c:	18c00217 	ldw	r3,8(r3)
20021c70:	10c00215 	stw	r3,8(r2)
20021c74:	a80b883a 	mov	r5,r21
20021c78:	a009883a 	mov	r4,r20
20021c7c:	00229340 	call	20022934 <_free_r>
20021c80:	a009883a 	mov	r4,r20
20021c84:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021c88:	9005883a 	mov	r2,r18
20021c8c:	00001206 	br	20021cd8 <_realloc_r+0x170>
20021c90:	00c00404 	movi	r3,16
20021c94:	1823883a 	mov	r17,r3
20021c98:	003fce06 	br	20021bd4 <__flash_rwdata_start+0xffff40ec>
20021c9c:	a825883a 	mov	r18,r21
20021ca0:	8445c83a 	sub	r2,r16,r17
20021ca4:	00c003c4 	movi	r3,15
20021ca8:	18802636 	bltu	r3,r2,20021d44 <_realloc_r+0x1dc>
20021cac:	99800117 	ldw	r6,4(r19)
20021cb0:	9c07883a 	add	r3,r19,r16
20021cb4:	3180004c 	andi	r6,r6,1
20021cb8:	3420b03a 	or	r16,r6,r16
20021cbc:	9c000115 	stw	r16,4(r19)
20021cc0:	18800117 	ldw	r2,4(r3)
20021cc4:	10800054 	ori	r2,r2,1
20021cc8:	18800115 	stw	r2,4(r3)
20021ccc:	a009883a 	mov	r4,r20
20021cd0:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021cd4:	9005883a 	mov	r2,r18
20021cd8:	dfc00917 	ldw	ra,36(sp)
20021cdc:	df000817 	ldw	fp,32(sp)
20021ce0:	ddc00717 	ldw	r23,28(sp)
20021ce4:	dd800617 	ldw	r22,24(sp)
20021ce8:	dd400517 	ldw	r21,20(sp)
20021cec:	dd000417 	ldw	r20,16(sp)
20021cf0:	dcc00317 	ldw	r19,12(sp)
20021cf4:	dc800217 	ldw	r18,8(sp)
20021cf8:	dc400117 	ldw	r17,4(sp)
20021cfc:	dc000017 	ldw	r16,0(sp)
20021d00:	dec00a04 	addi	sp,sp,40
20021d04:	f800283a 	ret
20021d08:	017fff04 	movi	r5,-4
20021d0c:	414a703a 	and	r5,r8,r5
20021d10:	814d883a 	add	r6,r16,r5
20021d14:	30c01f16 	blt	r6,r3,20021d94 <_realloc_r+0x22c>
20021d18:	20800317 	ldw	r2,12(r4)
20021d1c:	20c00217 	ldw	r3,8(r4)
20021d20:	a825883a 	mov	r18,r21
20021d24:	3021883a 	mov	r16,r6
20021d28:	18800315 	stw	r2,12(r3)
20021d2c:	10c00215 	stw	r3,8(r2)
20021d30:	003fdb06 	br	20021ca0 <__flash_rwdata_start+0xffff41b8>
20021d34:	00800304 	movi	r2,12
20021d38:	a0800015 	stw	r2,0(r20)
20021d3c:	0005883a 	mov	r2,zero
20021d40:	003fe506 	br	20021cd8 <__flash_rwdata_start+0xffff41f0>
20021d44:	98c00117 	ldw	r3,4(r19)
20021d48:	9c4b883a 	add	r5,r19,r17
20021d4c:	11000054 	ori	r4,r2,1
20021d50:	18c0004c 	andi	r3,r3,1
20021d54:	1c62b03a 	or	r17,r3,r17
20021d58:	9c400115 	stw	r17,4(r19)
20021d5c:	29000115 	stw	r4,4(r5)
20021d60:	2885883a 	add	r2,r5,r2
20021d64:	10c00117 	ldw	r3,4(r2)
20021d68:	29400204 	addi	r5,r5,8
20021d6c:	a009883a 	mov	r4,r20
20021d70:	18c00054 	ori	r3,r3,1
20021d74:	10c00115 	stw	r3,4(r2)
20021d78:	00229340 	call	20022934 <_free_r>
20021d7c:	003fd306 	br	20021ccc <__flash_rwdata_start+0xffff41e4>
20021d80:	017fff04 	movi	r5,-4
20021d84:	414a703a 	and	r5,r8,r5
20021d88:	89800404 	addi	r6,r17,16
20021d8c:	8151883a 	add	r8,r16,r5
20021d90:	4180590e 	bge	r8,r6,20021ef8 <_realloc_r+0x390>
20021d94:	1080004c 	andi	r2,r2,1
20021d98:	103f9e1e 	bne	r2,zero,20021c14 <__flash_rwdata_start+0xffff412c>
20021d9c:	adbffe17 	ldw	r22,-8(r21)
20021da0:	00bfff04 	movi	r2,-4
20021da4:	9dadc83a 	sub	r22,r19,r22
20021da8:	b1800117 	ldw	r6,4(r22)
20021dac:	3084703a 	and	r2,r6,r2
20021db0:	20002026 	beq	r4,zero,20021e34 <_realloc_r+0x2cc>
20021db4:	80af883a 	add	r23,r16,r2
20021db8:	b96f883a 	add	r23,r23,r5
20021dbc:	21c05f26 	beq	r4,r7,20021f3c <_realloc_r+0x3d4>
20021dc0:	b8c01c16 	blt	r23,r3,20021e34 <_realloc_r+0x2cc>
20021dc4:	20800317 	ldw	r2,12(r4)
20021dc8:	20c00217 	ldw	r3,8(r4)
20021dcc:	81bfff04 	addi	r6,r16,-4
20021dd0:	01000904 	movi	r4,36
20021dd4:	18800315 	stw	r2,12(r3)
20021dd8:	10c00215 	stw	r3,8(r2)
20021ddc:	b0c00217 	ldw	r3,8(r22)
20021de0:	b0800317 	ldw	r2,12(r22)
20021de4:	b4800204 	addi	r18,r22,8
20021de8:	18800315 	stw	r2,12(r3)
20021dec:	10c00215 	stw	r3,8(r2)
20021df0:	21801b36 	bltu	r4,r6,20021e60 <_realloc_r+0x2f8>
20021df4:	008004c4 	movi	r2,19
20021df8:	1180352e 	bgeu	r2,r6,20021ed0 <_realloc_r+0x368>
20021dfc:	a8800017 	ldw	r2,0(r21)
20021e00:	b0800215 	stw	r2,8(r22)
20021e04:	a8800117 	ldw	r2,4(r21)
20021e08:	b0800315 	stw	r2,12(r22)
20021e0c:	008006c4 	movi	r2,27
20021e10:	11807f36 	bltu	r2,r6,20022010 <_realloc_r+0x4a8>
20021e14:	b0800404 	addi	r2,r22,16
20021e18:	ad400204 	addi	r21,r21,8
20021e1c:	00002d06 	br	20021ed4 <_realloc_r+0x36c>
20021e20:	adbffe17 	ldw	r22,-8(r21)
20021e24:	00bfff04 	movi	r2,-4
20021e28:	9dadc83a 	sub	r22,r19,r22
20021e2c:	b1000117 	ldw	r4,4(r22)
20021e30:	2084703a 	and	r2,r4,r2
20021e34:	b03f7726 	beq	r22,zero,20021c14 <__flash_rwdata_start+0xffff412c>
20021e38:	80af883a 	add	r23,r16,r2
20021e3c:	b8ff7516 	blt	r23,r3,20021c14 <__flash_rwdata_start+0xffff412c>
20021e40:	b0800317 	ldw	r2,12(r22)
20021e44:	b0c00217 	ldw	r3,8(r22)
20021e48:	81bfff04 	addi	r6,r16,-4
20021e4c:	01000904 	movi	r4,36
20021e50:	18800315 	stw	r2,12(r3)
20021e54:	10c00215 	stw	r3,8(r2)
20021e58:	b4800204 	addi	r18,r22,8
20021e5c:	21bfe52e 	bgeu	r4,r6,20021df4 <__flash_rwdata_start+0xffff430c>
20021e60:	a80b883a 	mov	r5,r21
20021e64:	9009883a 	mov	r4,r18
20021e68:	00218e40 	call	200218e4 <memmove>
20021e6c:	b821883a 	mov	r16,r23
20021e70:	b027883a 	mov	r19,r22
20021e74:	003f8a06 	br	20021ca0 <__flash_rwdata_start+0xffff41b8>
20021e78:	300b883a 	mov	r5,r6
20021e7c:	dfc00917 	ldw	ra,36(sp)
20021e80:	df000817 	ldw	fp,32(sp)
20021e84:	ddc00717 	ldw	r23,28(sp)
20021e88:	dd800617 	ldw	r22,24(sp)
20021e8c:	dd400517 	ldw	r21,20(sp)
20021e90:	dd000417 	ldw	r20,16(sp)
20021e94:	dcc00317 	ldw	r19,12(sp)
20021e98:	dc800217 	ldw	r18,8(sp)
20021e9c:	dc400117 	ldw	r17,4(sp)
20021ea0:	dc000017 	ldw	r16,0(sp)
20021ea4:	dec00a04 	addi	sp,sp,40
20021ea8:	0020eac1 	jmpi	20020eac <_malloc_r>
20021eac:	a8c00017 	ldw	r3,0(r21)
20021eb0:	90c00015 	stw	r3,0(r18)
20021eb4:	a8c00117 	ldw	r3,4(r21)
20021eb8:	90c00115 	stw	r3,4(r18)
20021ebc:	00c006c4 	movi	r3,27
20021ec0:	19804536 	bltu	r3,r6,20021fd8 <_realloc_r+0x470>
20021ec4:	90800204 	addi	r2,r18,8
20021ec8:	a8c00204 	addi	r3,r21,8
20021ecc:	003f6306 	br	20021c5c <__flash_rwdata_start+0xffff4174>
20021ed0:	9005883a 	mov	r2,r18
20021ed4:	a8c00017 	ldw	r3,0(r21)
20021ed8:	b821883a 	mov	r16,r23
20021edc:	b027883a 	mov	r19,r22
20021ee0:	10c00015 	stw	r3,0(r2)
20021ee4:	a8c00117 	ldw	r3,4(r21)
20021ee8:	10c00115 	stw	r3,4(r2)
20021eec:	a8c00217 	ldw	r3,8(r21)
20021ef0:	10c00215 	stw	r3,8(r2)
20021ef4:	003f6a06 	br	20021ca0 <__flash_rwdata_start+0xffff41b8>
20021ef8:	9c67883a 	add	r19,r19,r17
20021efc:	4445c83a 	sub	r2,r8,r17
20021f00:	e4c00215 	stw	r19,8(fp)
20021f04:	10800054 	ori	r2,r2,1
20021f08:	98800115 	stw	r2,4(r19)
20021f0c:	a8bfff17 	ldw	r2,-4(r21)
20021f10:	a009883a 	mov	r4,r20
20021f14:	1080004c 	andi	r2,r2,1
20021f18:	1462b03a 	or	r17,r2,r17
20021f1c:	ac7fff15 	stw	r17,-4(r21)
20021f20:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021f24:	a805883a 	mov	r2,r21
20021f28:	003f6b06 	br	20021cd8 <__flash_rwdata_start+0xffff41f0>
20021f2c:	a80b883a 	mov	r5,r21
20021f30:	9009883a 	mov	r4,r18
20021f34:	00218e40 	call	200218e4 <memmove>
20021f38:	003f4e06 	br	20021c74 <__flash_rwdata_start+0xffff418c>
20021f3c:	89000404 	addi	r4,r17,16
20021f40:	b93fbc16 	blt	r23,r4,20021e34 <__flash_rwdata_start+0xffff434c>
20021f44:	b0800317 	ldw	r2,12(r22)
20021f48:	b0c00217 	ldw	r3,8(r22)
20021f4c:	81bfff04 	addi	r6,r16,-4
20021f50:	01000904 	movi	r4,36
20021f54:	18800315 	stw	r2,12(r3)
20021f58:	10c00215 	stw	r3,8(r2)
20021f5c:	b4800204 	addi	r18,r22,8
20021f60:	21804336 	bltu	r4,r6,20022070 <_realloc_r+0x508>
20021f64:	008004c4 	movi	r2,19
20021f68:	11803f2e 	bgeu	r2,r6,20022068 <_realloc_r+0x500>
20021f6c:	a8800017 	ldw	r2,0(r21)
20021f70:	b0800215 	stw	r2,8(r22)
20021f74:	a8800117 	ldw	r2,4(r21)
20021f78:	b0800315 	stw	r2,12(r22)
20021f7c:	008006c4 	movi	r2,27
20021f80:	11803f36 	bltu	r2,r6,20022080 <_realloc_r+0x518>
20021f84:	b0800404 	addi	r2,r22,16
20021f88:	ad400204 	addi	r21,r21,8
20021f8c:	a8c00017 	ldw	r3,0(r21)
20021f90:	10c00015 	stw	r3,0(r2)
20021f94:	a8c00117 	ldw	r3,4(r21)
20021f98:	10c00115 	stw	r3,4(r2)
20021f9c:	a8c00217 	ldw	r3,8(r21)
20021fa0:	10c00215 	stw	r3,8(r2)
20021fa4:	b447883a 	add	r3,r22,r17
20021fa8:	bc45c83a 	sub	r2,r23,r17
20021fac:	e0c00215 	stw	r3,8(fp)
20021fb0:	10800054 	ori	r2,r2,1
20021fb4:	18800115 	stw	r2,4(r3)
20021fb8:	b0800117 	ldw	r2,4(r22)
20021fbc:	a009883a 	mov	r4,r20
20021fc0:	1080004c 	andi	r2,r2,1
20021fc4:	1462b03a 	or	r17,r2,r17
20021fc8:	b4400115 	stw	r17,4(r22)
20021fcc:	0023ca40 	call	20023ca4 <__malloc_unlock>
20021fd0:	9005883a 	mov	r2,r18
20021fd4:	003f4006 	br	20021cd8 <__flash_rwdata_start+0xffff41f0>
20021fd8:	a8c00217 	ldw	r3,8(r21)
20021fdc:	90c00215 	stw	r3,8(r18)
20021fe0:	a8c00317 	ldw	r3,12(r21)
20021fe4:	90c00315 	stw	r3,12(r18)
20021fe8:	30801126 	beq	r6,r2,20022030 <_realloc_r+0x4c8>
20021fec:	90800404 	addi	r2,r18,16
20021ff0:	a8c00404 	addi	r3,r21,16
20021ff4:	003f1906 	br	20021c5c <__flash_rwdata_start+0xffff4174>
20021ff8:	90ffff17 	ldw	r3,-4(r18)
20021ffc:	00bfff04 	movi	r2,-4
20022000:	a825883a 	mov	r18,r21
20022004:	1884703a 	and	r2,r3,r2
20022008:	80a1883a 	add	r16,r16,r2
2002200c:	003f2406 	br	20021ca0 <__flash_rwdata_start+0xffff41b8>
20022010:	a8800217 	ldw	r2,8(r21)
20022014:	b0800415 	stw	r2,16(r22)
20022018:	a8800317 	ldw	r2,12(r21)
2002201c:	b0800515 	stw	r2,20(r22)
20022020:	31000a26 	beq	r6,r4,2002204c <_realloc_r+0x4e4>
20022024:	b0800604 	addi	r2,r22,24
20022028:	ad400404 	addi	r21,r21,16
2002202c:	003fa906 	br	20021ed4 <__flash_rwdata_start+0xffff43ec>
20022030:	a9000417 	ldw	r4,16(r21)
20022034:	90800604 	addi	r2,r18,24
20022038:	a8c00604 	addi	r3,r21,24
2002203c:	91000415 	stw	r4,16(r18)
20022040:	a9000517 	ldw	r4,20(r21)
20022044:	91000515 	stw	r4,20(r18)
20022048:	003f0406 	br	20021c5c <__flash_rwdata_start+0xffff4174>
2002204c:	a8c00417 	ldw	r3,16(r21)
20022050:	ad400604 	addi	r21,r21,24
20022054:	b0800804 	addi	r2,r22,32
20022058:	b0c00615 	stw	r3,24(r22)
2002205c:	a8ffff17 	ldw	r3,-4(r21)
20022060:	b0c00715 	stw	r3,28(r22)
20022064:	003f9b06 	br	20021ed4 <__flash_rwdata_start+0xffff43ec>
20022068:	9005883a 	mov	r2,r18
2002206c:	003fc706 	br	20021f8c <__flash_rwdata_start+0xffff44a4>
20022070:	a80b883a 	mov	r5,r21
20022074:	9009883a 	mov	r4,r18
20022078:	00218e40 	call	200218e4 <memmove>
2002207c:	003fc906 	br	20021fa4 <__flash_rwdata_start+0xffff44bc>
20022080:	a8800217 	ldw	r2,8(r21)
20022084:	b0800415 	stw	r2,16(r22)
20022088:	a8800317 	ldw	r2,12(r21)
2002208c:	b0800515 	stw	r2,20(r22)
20022090:	31000726 	beq	r6,r4,200220b0 <_realloc_r+0x548>
20022094:	b0800604 	addi	r2,r22,24
20022098:	ad400404 	addi	r21,r21,16
2002209c:	003fbb06 	br	20021f8c <__flash_rwdata_start+0xffff44a4>
200220a0:	a009883a 	mov	r4,r20
200220a4:	0023ca40 	call	20023ca4 <__malloc_unlock>
200220a8:	0005883a 	mov	r2,zero
200220ac:	003f0a06 	br	20021cd8 <__flash_rwdata_start+0xffff41f0>
200220b0:	a8c00417 	ldw	r3,16(r21)
200220b4:	ad400604 	addi	r21,r21,24
200220b8:	b0800804 	addi	r2,r22,32
200220bc:	b0c00615 	stw	r3,24(r22)
200220c0:	a8ffff17 	ldw	r3,-4(r21)
200220c4:	b0c00715 	stw	r3,28(r22)
200220c8:	003fb006 	br	20021f8c <__flash_rwdata_start+0xffff44a4>

200220cc <_sbrk_r>:
200220cc:	defffd04 	addi	sp,sp,-12
200220d0:	dc000015 	stw	r16,0(sp)
200220d4:	04000034 	movhi	r16,0
200220d8:	dc400115 	stw	r17,4(sp)
200220dc:	84072504 	addi	r16,r16,7316
200220e0:	2023883a 	mov	r17,r4
200220e4:	2809883a 	mov	r4,r5
200220e8:	dfc00215 	stw	ra,8(sp)
200220ec:	80000015 	stw	zero,0(r16)
200220f0:	002387c0 	call	2002387c <sbrk>
200220f4:	00ffffc4 	movi	r3,-1
200220f8:	10c00526 	beq	r2,r3,20022110 <_sbrk_r+0x44>
200220fc:	dfc00217 	ldw	ra,8(sp)
20022100:	dc400117 	ldw	r17,4(sp)
20022104:	dc000017 	ldw	r16,0(sp)
20022108:	dec00304 	addi	sp,sp,12
2002210c:	f800283a 	ret
20022110:	80c00017 	ldw	r3,0(r16)
20022114:	183ff926 	beq	r3,zero,200220fc <__flash_rwdata_start+0xffff4614>
20022118:	88c00015 	stw	r3,0(r17)
2002211c:	003ff706 	br	200220fc <__flash_rwdata_start+0xffff4614>

20022120 <__sread>:
20022120:	defffe04 	addi	sp,sp,-8
20022124:	dc000015 	stw	r16,0(sp)
20022128:	2821883a 	mov	r16,r5
2002212c:	2940038f 	ldh	r5,14(r5)
20022130:	dfc00115 	stw	ra,4(sp)
20022134:	0022e600 	call	20022e60 <_read_r>
20022138:	10000716 	blt	r2,zero,20022158 <__sread+0x38>
2002213c:	80c01417 	ldw	r3,80(r16)
20022140:	1887883a 	add	r3,r3,r2
20022144:	80c01415 	stw	r3,80(r16)
20022148:	dfc00117 	ldw	ra,4(sp)
2002214c:	dc000017 	ldw	r16,0(sp)
20022150:	dec00204 	addi	sp,sp,8
20022154:	f800283a 	ret
20022158:	80c0030b 	ldhu	r3,12(r16)
2002215c:	18fbffcc 	andi	r3,r3,61439
20022160:	80c0030d 	sth	r3,12(r16)
20022164:	dfc00117 	ldw	ra,4(sp)
20022168:	dc000017 	ldw	r16,0(sp)
2002216c:	dec00204 	addi	sp,sp,8
20022170:	f800283a 	ret

20022174 <__seofread>:
20022174:	0005883a 	mov	r2,zero
20022178:	f800283a 	ret

2002217c <__swrite>:
2002217c:	2880030b 	ldhu	r2,12(r5)
20022180:	defffb04 	addi	sp,sp,-20
20022184:	dcc00315 	stw	r19,12(sp)
20022188:	dc800215 	stw	r18,8(sp)
2002218c:	dc400115 	stw	r17,4(sp)
20022190:	dc000015 	stw	r16,0(sp)
20022194:	dfc00415 	stw	ra,16(sp)
20022198:	10c0400c 	andi	r3,r2,256
2002219c:	2821883a 	mov	r16,r5
200221a0:	2023883a 	mov	r17,r4
200221a4:	3025883a 	mov	r18,r6
200221a8:	3827883a 	mov	r19,r7
200221ac:	18000526 	beq	r3,zero,200221c4 <__swrite+0x48>
200221b0:	2940038f 	ldh	r5,14(r5)
200221b4:	01c00084 	movi	r7,2
200221b8:	000d883a 	mov	r6,zero
200221bc:	0022c440 	call	20022c44 <_lseek_r>
200221c0:	8080030b 	ldhu	r2,12(r16)
200221c4:	8140038f 	ldh	r5,14(r16)
200221c8:	10bbffcc 	andi	r2,r2,61439
200221cc:	980f883a 	mov	r7,r19
200221d0:	900d883a 	mov	r6,r18
200221d4:	8809883a 	mov	r4,r17
200221d8:	8080030d 	sth	r2,12(r16)
200221dc:	dfc00417 	ldw	ra,16(sp)
200221e0:	dcc00317 	ldw	r19,12(sp)
200221e4:	dc800217 	ldw	r18,8(sp)
200221e8:	dc400117 	ldw	r17,4(sp)
200221ec:	dc000017 	ldw	r16,0(sp)
200221f0:	dec00504 	addi	sp,sp,20
200221f4:	002225c1 	jmpi	2002225c <_write_r>

200221f8 <__sseek>:
200221f8:	defffe04 	addi	sp,sp,-8
200221fc:	dc000015 	stw	r16,0(sp)
20022200:	2821883a 	mov	r16,r5
20022204:	2940038f 	ldh	r5,14(r5)
20022208:	dfc00115 	stw	ra,4(sp)
2002220c:	0022c440 	call	20022c44 <_lseek_r>
20022210:	00ffffc4 	movi	r3,-1
20022214:	10c00826 	beq	r2,r3,20022238 <__sseek+0x40>
20022218:	80c0030b 	ldhu	r3,12(r16)
2002221c:	80801415 	stw	r2,80(r16)
20022220:	18c40014 	ori	r3,r3,4096
20022224:	80c0030d 	sth	r3,12(r16)
20022228:	dfc00117 	ldw	ra,4(sp)
2002222c:	dc000017 	ldw	r16,0(sp)
20022230:	dec00204 	addi	sp,sp,8
20022234:	f800283a 	ret
20022238:	80c0030b 	ldhu	r3,12(r16)
2002223c:	18fbffcc 	andi	r3,r3,61439
20022240:	80c0030d 	sth	r3,12(r16)
20022244:	dfc00117 	ldw	ra,4(sp)
20022248:	dc000017 	ldw	r16,0(sp)
2002224c:	dec00204 	addi	sp,sp,8
20022250:	f800283a 	ret

20022254 <__sclose>:
20022254:	2940038f 	ldh	r5,14(r5)
20022258:	00224101 	jmpi	20022410 <_close_r>

2002225c <_write_r>:
2002225c:	defffd04 	addi	sp,sp,-12
20022260:	2805883a 	mov	r2,r5
20022264:	dc000015 	stw	r16,0(sp)
20022268:	04000034 	movhi	r16,0
2002226c:	dc400115 	stw	r17,4(sp)
20022270:	300b883a 	mov	r5,r6
20022274:	84072504 	addi	r16,r16,7316
20022278:	2023883a 	mov	r17,r4
2002227c:	380d883a 	mov	r6,r7
20022280:	1009883a 	mov	r4,r2
20022284:	dfc00215 	stw	ra,8(sp)
20022288:	80000015 	stw	zero,0(r16)
2002228c:	00239680 	call	20023968 <write>
20022290:	00ffffc4 	movi	r3,-1
20022294:	10c00526 	beq	r2,r3,200222ac <_write_r+0x50>
20022298:	dfc00217 	ldw	ra,8(sp)
2002229c:	dc400117 	ldw	r17,4(sp)
200222a0:	dc000017 	ldw	r16,0(sp)
200222a4:	dec00304 	addi	sp,sp,12
200222a8:	f800283a 	ret
200222ac:	80c00017 	ldw	r3,0(r16)
200222b0:	183ff926 	beq	r3,zero,20022298 <__flash_rwdata_start+0xffff47b0>
200222b4:	88c00015 	stw	r3,0(r17)
200222b8:	003ff706 	br	20022298 <__flash_rwdata_start+0xffff47b0>

200222bc <__swsetup_r>:
200222bc:	00800034 	movhi	r2,0
200222c0:	defffd04 	addi	sp,sp,-12
200222c4:	1086f504 	addi	r2,r2,7124
200222c8:	dc400115 	stw	r17,4(sp)
200222cc:	2023883a 	mov	r17,r4
200222d0:	11000017 	ldw	r4,0(r2)
200222d4:	dc000015 	stw	r16,0(sp)
200222d8:	dfc00215 	stw	ra,8(sp)
200222dc:	2821883a 	mov	r16,r5
200222e0:	20000226 	beq	r4,zero,200222ec <__swsetup_r+0x30>
200222e4:	20800e17 	ldw	r2,56(r4)
200222e8:	10003126 	beq	r2,zero,200223b0 <__swsetup_r+0xf4>
200222ec:	8080030b 	ldhu	r2,12(r16)
200222f0:	10c0020c 	andi	r3,r2,8
200222f4:	1009883a 	mov	r4,r2
200222f8:	18000f26 	beq	r3,zero,20022338 <__swsetup_r+0x7c>
200222fc:	80c00417 	ldw	r3,16(r16)
20022300:	18001526 	beq	r3,zero,20022358 <__swsetup_r+0x9c>
20022304:	1100004c 	andi	r4,r2,1
20022308:	20001c1e 	bne	r4,zero,2002237c <__swsetup_r+0xc0>
2002230c:	1080008c 	andi	r2,r2,2
20022310:	1000291e 	bne	r2,zero,200223b8 <__swsetup_r+0xfc>
20022314:	80800517 	ldw	r2,20(r16)
20022318:	80800215 	stw	r2,8(r16)
2002231c:	18001c26 	beq	r3,zero,20022390 <__swsetup_r+0xd4>
20022320:	0005883a 	mov	r2,zero
20022324:	dfc00217 	ldw	ra,8(sp)
20022328:	dc400117 	ldw	r17,4(sp)
2002232c:	dc000017 	ldw	r16,0(sp)
20022330:	dec00304 	addi	sp,sp,12
20022334:	f800283a 	ret
20022338:	2080040c 	andi	r2,r4,16
2002233c:	10002e26 	beq	r2,zero,200223f8 <__swsetup_r+0x13c>
20022340:	2080010c 	andi	r2,r4,4
20022344:	10001e1e 	bne	r2,zero,200223c0 <__swsetup_r+0x104>
20022348:	80c00417 	ldw	r3,16(r16)
2002234c:	20800214 	ori	r2,r4,8
20022350:	8080030d 	sth	r2,12(r16)
20022354:	183feb1e 	bne	r3,zero,20022304 <__flash_rwdata_start+0xffff481c>
20022358:	1100a00c 	andi	r4,r2,640
2002235c:	01408004 	movi	r5,512
20022360:	217fe826 	beq	r4,r5,20022304 <__flash_rwdata_start+0xffff481c>
20022364:	800b883a 	mov	r5,r16
20022368:	8809883a 	mov	r4,r17
2002236c:	0022ca40 	call	20022ca4 <__smakebuf_r>
20022370:	8080030b 	ldhu	r2,12(r16)
20022374:	80c00417 	ldw	r3,16(r16)
20022378:	003fe206 	br	20022304 <__flash_rwdata_start+0xffff481c>
2002237c:	80800517 	ldw	r2,20(r16)
20022380:	80000215 	stw	zero,8(r16)
20022384:	0085c83a 	sub	r2,zero,r2
20022388:	80800615 	stw	r2,24(r16)
2002238c:	183fe41e 	bne	r3,zero,20022320 <__flash_rwdata_start+0xffff4838>
20022390:	80c0030b 	ldhu	r3,12(r16)
20022394:	0005883a 	mov	r2,zero
20022398:	1900200c 	andi	r4,r3,128
2002239c:	203fe126 	beq	r4,zero,20022324 <__flash_rwdata_start+0xffff483c>
200223a0:	18c01014 	ori	r3,r3,64
200223a4:	80c0030d 	sth	r3,12(r16)
200223a8:	00bfffc4 	movi	r2,-1
200223ac:	003fdd06 	br	20022324 <__flash_rwdata_start+0xffff483c>
200223b0:	00208180 	call	20020818 <__sinit>
200223b4:	003fcd06 	br	200222ec <__flash_rwdata_start+0xffff4804>
200223b8:	0005883a 	mov	r2,zero
200223bc:	003fd606 	br	20022318 <__flash_rwdata_start+0xffff4830>
200223c0:	81400c17 	ldw	r5,48(r16)
200223c4:	28000626 	beq	r5,zero,200223e0 <__swsetup_r+0x124>
200223c8:	80801004 	addi	r2,r16,64
200223cc:	28800326 	beq	r5,r2,200223dc <__swsetup_r+0x120>
200223d0:	8809883a 	mov	r4,r17
200223d4:	00229340 	call	20022934 <_free_r>
200223d8:	8100030b 	ldhu	r4,12(r16)
200223dc:	80000c15 	stw	zero,48(r16)
200223e0:	80c00417 	ldw	r3,16(r16)
200223e4:	00bff6c4 	movi	r2,-37
200223e8:	1108703a 	and	r4,r2,r4
200223ec:	80000115 	stw	zero,4(r16)
200223f0:	80c00015 	stw	r3,0(r16)
200223f4:	003fd506 	br	2002234c <__flash_rwdata_start+0xffff4864>
200223f8:	00800244 	movi	r2,9
200223fc:	88800015 	stw	r2,0(r17)
20022400:	20801014 	ori	r2,r4,64
20022404:	8080030d 	sth	r2,12(r16)
20022408:	00bfffc4 	movi	r2,-1
2002240c:	003fc506 	br	20022324 <__flash_rwdata_start+0xffff483c>

20022410 <_close_r>:
20022410:	defffd04 	addi	sp,sp,-12
20022414:	dc000015 	stw	r16,0(sp)
20022418:	04000034 	movhi	r16,0
2002241c:	dc400115 	stw	r17,4(sp)
20022420:	84072504 	addi	r16,r16,7316
20022424:	2023883a 	mov	r17,r4
20022428:	2809883a 	mov	r4,r5
2002242c:	dfc00215 	stw	ra,8(sp)
20022430:	80000015 	stw	zero,0(r16)
20022434:	00231600 	call	20023160 <close>
20022438:	00ffffc4 	movi	r3,-1
2002243c:	10c00526 	beq	r2,r3,20022454 <_close_r+0x44>
20022440:	dfc00217 	ldw	ra,8(sp)
20022444:	dc400117 	ldw	r17,4(sp)
20022448:	dc000017 	ldw	r16,0(sp)
2002244c:	dec00304 	addi	sp,sp,12
20022450:	f800283a 	ret
20022454:	80c00017 	ldw	r3,0(r16)
20022458:	183ff926 	beq	r3,zero,20022440 <__flash_rwdata_start+0xffff4958>
2002245c:	88c00015 	stw	r3,0(r17)
20022460:	003ff706 	br	20022440 <__flash_rwdata_start+0xffff4958>

20022464 <_fclose_r>:
20022464:	28003926 	beq	r5,zero,2002254c <_fclose_r+0xe8>
20022468:	defffc04 	addi	sp,sp,-16
2002246c:	dc400115 	stw	r17,4(sp)
20022470:	dc000015 	stw	r16,0(sp)
20022474:	dfc00315 	stw	ra,12(sp)
20022478:	dc800215 	stw	r18,8(sp)
2002247c:	2023883a 	mov	r17,r4
20022480:	2821883a 	mov	r16,r5
20022484:	20000226 	beq	r4,zero,20022490 <_fclose_r+0x2c>
20022488:	20800e17 	ldw	r2,56(r4)
2002248c:	10002726 	beq	r2,zero,2002252c <_fclose_r+0xc8>
20022490:	8080030f 	ldh	r2,12(r16)
20022494:	1000071e 	bne	r2,zero,200224b4 <_fclose_r+0x50>
20022498:	0005883a 	mov	r2,zero
2002249c:	dfc00317 	ldw	ra,12(sp)
200224a0:	dc800217 	ldw	r18,8(sp)
200224a4:	dc400117 	ldw	r17,4(sp)
200224a8:	dc000017 	ldw	r16,0(sp)
200224ac:	dec00404 	addi	sp,sp,16
200224b0:	f800283a 	ret
200224b4:	800b883a 	mov	r5,r16
200224b8:	8809883a 	mov	r4,r17
200224bc:	00225680 	call	20022568 <__sflush_r>
200224c0:	1025883a 	mov	r18,r2
200224c4:	80800b17 	ldw	r2,44(r16)
200224c8:	10000426 	beq	r2,zero,200224dc <_fclose_r+0x78>
200224cc:	81400717 	ldw	r5,28(r16)
200224d0:	8809883a 	mov	r4,r17
200224d4:	103ee83a 	callr	r2
200224d8:	10001616 	blt	r2,zero,20022534 <_fclose_r+0xd0>
200224dc:	8080030b 	ldhu	r2,12(r16)
200224e0:	1080200c 	andi	r2,r2,128
200224e4:	1000151e 	bne	r2,zero,2002253c <_fclose_r+0xd8>
200224e8:	81400c17 	ldw	r5,48(r16)
200224ec:	28000526 	beq	r5,zero,20022504 <_fclose_r+0xa0>
200224f0:	80801004 	addi	r2,r16,64
200224f4:	28800226 	beq	r5,r2,20022500 <_fclose_r+0x9c>
200224f8:	8809883a 	mov	r4,r17
200224fc:	00229340 	call	20022934 <_free_r>
20022500:	80000c15 	stw	zero,48(r16)
20022504:	81401117 	ldw	r5,68(r16)
20022508:	28000326 	beq	r5,zero,20022518 <_fclose_r+0xb4>
2002250c:	8809883a 	mov	r4,r17
20022510:	00229340 	call	20022934 <_free_r>
20022514:	80001115 	stw	zero,68(r16)
20022518:	00208280 	call	20020828 <__sfp_lock_acquire>
2002251c:	8000030d 	sth	zero,12(r16)
20022520:	002082c0 	call	2002082c <__sfp_lock_release>
20022524:	9005883a 	mov	r2,r18
20022528:	003fdc06 	br	2002249c <__flash_rwdata_start+0xffff49b4>
2002252c:	00208180 	call	20020818 <__sinit>
20022530:	003fd706 	br	20022490 <__flash_rwdata_start+0xffff49a8>
20022534:	04bfffc4 	movi	r18,-1
20022538:	003fe806 	br	200224dc <__flash_rwdata_start+0xffff49f4>
2002253c:	81400417 	ldw	r5,16(r16)
20022540:	8809883a 	mov	r4,r17
20022544:	00229340 	call	20022934 <_free_r>
20022548:	003fe706 	br	200224e8 <__flash_rwdata_start+0xffff4a00>
2002254c:	0005883a 	mov	r2,zero
20022550:	f800283a 	ret

20022554 <fclose>:
20022554:	00800034 	movhi	r2,0
20022558:	1086f504 	addi	r2,r2,7124
2002255c:	200b883a 	mov	r5,r4
20022560:	11000017 	ldw	r4,0(r2)
20022564:	00224641 	jmpi	20022464 <_fclose_r>

20022568 <__sflush_r>:
20022568:	2880030b 	ldhu	r2,12(r5)
2002256c:	defffb04 	addi	sp,sp,-20
20022570:	dcc00315 	stw	r19,12(sp)
20022574:	dc400115 	stw	r17,4(sp)
20022578:	dfc00415 	stw	ra,16(sp)
2002257c:	dc800215 	stw	r18,8(sp)
20022580:	dc000015 	stw	r16,0(sp)
20022584:	10c0020c 	andi	r3,r2,8
20022588:	2823883a 	mov	r17,r5
2002258c:	2027883a 	mov	r19,r4
20022590:	1800311e 	bne	r3,zero,20022658 <__sflush_r+0xf0>
20022594:	28c00117 	ldw	r3,4(r5)
20022598:	10820014 	ori	r2,r2,2048
2002259c:	2880030d 	sth	r2,12(r5)
200225a0:	00c04b0e 	bge	zero,r3,200226d0 <__sflush_r+0x168>
200225a4:	8a000a17 	ldw	r8,40(r17)
200225a8:	40002326 	beq	r8,zero,20022638 <__sflush_r+0xd0>
200225ac:	9c000017 	ldw	r16,0(r19)
200225b0:	10c4000c 	andi	r3,r2,4096
200225b4:	98000015 	stw	zero,0(r19)
200225b8:	18004826 	beq	r3,zero,200226dc <__sflush_r+0x174>
200225bc:	89801417 	ldw	r6,80(r17)
200225c0:	10c0010c 	andi	r3,r2,4
200225c4:	18000626 	beq	r3,zero,200225e0 <__sflush_r+0x78>
200225c8:	88c00117 	ldw	r3,4(r17)
200225cc:	88800c17 	ldw	r2,48(r17)
200225d0:	30cdc83a 	sub	r6,r6,r3
200225d4:	10000226 	beq	r2,zero,200225e0 <__sflush_r+0x78>
200225d8:	88800f17 	ldw	r2,60(r17)
200225dc:	308dc83a 	sub	r6,r6,r2
200225e0:	89400717 	ldw	r5,28(r17)
200225e4:	000f883a 	mov	r7,zero
200225e8:	9809883a 	mov	r4,r19
200225ec:	403ee83a 	callr	r8
200225f0:	00ffffc4 	movi	r3,-1
200225f4:	10c04426 	beq	r2,r3,20022708 <__sflush_r+0x1a0>
200225f8:	88c0030b 	ldhu	r3,12(r17)
200225fc:	89000417 	ldw	r4,16(r17)
20022600:	88000115 	stw	zero,4(r17)
20022604:	197dffcc 	andi	r5,r3,63487
20022608:	8940030d 	sth	r5,12(r17)
2002260c:	89000015 	stw	r4,0(r17)
20022610:	18c4000c 	andi	r3,r3,4096
20022614:	18002c1e 	bne	r3,zero,200226c8 <__sflush_r+0x160>
20022618:	89400c17 	ldw	r5,48(r17)
2002261c:	9c000015 	stw	r16,0(r19)
20022620:	28000526 	beq	r5,zero,20022638 <__sflush_r+0xd0>
20022624:	88801004 	addi	r2,r17,64
20022628:	28800226 	beq	r5,r2,20022634 <__sflush_r+0xcc>
2002262c:	9809883a 	mov	r4,r19
20022630:	00229340 	call	20022934 <_free_r>
20022634:	88000c15 	stw	zero,48(r17)
20022638:	0005883a 	mov	r2,zero
2002263c:	dfc00417 	ldw	ra,16(sp)
20022640:	dcc00317 	ldw	r19,12(sp)
20022644:	dc800217 	ldw	r18,8(sp)
20022648:	dc400117 	ldw	r17,4(sp)
2002264c:	dc000017 	ldw	r16,0(sp)
20022650:	dec00504 	addi	sp,sp,20
20022654:	f800283a 	ret
20022658:	2c800417 	ldw	r18,16(r5)
2002265c:	903ff626 	beq	r18,zero,20022638 <__flash_rwdata_start+0xffff4b50>
20022660:	2c000017 	ldw	r16,0(r5)
20022664:	108000cc 	andi	r2,r2,3
20022668:	2c800015 	stw	r18,0(r5)
2002266c:	84a1c83a 	sub	r16,r16,r18
20022670:	1000131e 	bne	r2,zero,200226c0 <__sflush_r+0x158>
20022674:	28800517 	ldw	r2,20(r5)
20022678:	88800215 	stw	r2,8(r17)
2002267c:	04000316 	blt	zero,r16,2002268c <__sflush_r+0x124>
20022680:	003fed06 	br	20022638 <__flash_rwdata_start+0xffff4b50>
20022684:	90a5883a 	add	r18,r18,r2
20022688:	043feb0e 	bge	zero,r16,20022638 <__flash_rwdata_start+0xffff4b50>
2002268c:	88800917 	ldw	r2,36(r17)
20022690:	89400717 	ldw	r5,28(r17)
20022694:	800f883a 	mov	r7,r16
20022698:	900d883a 	mov	r6,r18
2002269c:	9809883a 	mov	r4,r19
200226a0:	103ee83a 	callr	r2
200226a4:	80a1c83a 	sub	r16,r16,r2
200226a8:	00bff616 	blt	zero,r2,20022684 <__flash_rwdata_start+0xffff4b9c>
200226ac:	88c0030b 	ldhu	r3,12(r17)
200226b0:	00bfffc4 	movi	r2,-1
200226b4:	18c01014 	ori	r3,r3,64
200226b8:	88c0030d 	sth	r3,12(r17)
200226bc:	003fdf06 	br	2002263c <__flash_rwdata_start+0xffff4b54>
200226c0:	0005883a 	mov	r2,zero
200226c4:	003fec06 	br	20022678 <__flash_rwdata_start+0xffff4b90>
200226c8:	88801415 	stw	r2,80(r17)
200226cc:	003fd206 	br	20022618 <__flash_rwdata_start+0xffff4b30>
200226d0:	28c00f17 	ldw	r3,60(r5)
200226d4:	00ffb316 	blt	zero,r3,200225a4 <__flash_rwdata_start+0xffff4abc>
200226d8:	003fd706 	br	20022638 <__flash_rwdata_start+0xffff4b50>
200226dc:	89400717 	ldw	r5,28(r17)
200226e0:	000d883a 	mov	r6,zero
200226e4:	01c00044 	movi	r7,1
200226e8:	9809883a 	mov	r4,r19
200226ec:	403ee83a 	callr	r8
200226f0:	100d883a 	mov	r6,r2
200226f4:	00bfffc4 	movi	r2,-1
200226f8:	30801426 	beq	r6,r2,2002274c <__sflush_r+0x1e4>
200226fc:	8880030b 	ldhu	r2,12(r17)
20022700:	8a000a17 	ldw	r8,40(r17)
20022704:	003fae06 	br	200225c0 <__flash_rwdata_start+0xffff4ad8>
20022708:	98c00017 	ldw	r3,0(r19)
2002270c:	183fba26 	beq	r3,zero,200225f8 <__flash_rwdata_start+0xffff4b10>
20022710:	01000744 	movi	r4,29
20022714:	19000626 	beq	r3,r4,20022730 <__sflush_r+0x1c8>
20022718:	01000584 	movi	r4,22
2002271c:	19000426 	beq	r3,r4,20022730 <__sflush_r+0x1c8>
20022720:	88c0030b 	ldhu	r3,12(r17)
20022724:	18c01014 	ori	r3,r3,64
20022728:	88c0030d 	sth	r3,12(r17)
2002272c:	003fc306 	br	2002263c <__flash_rwdata_start+0xffff4b54>
20022730:	8880030b 	ldhu	r2,12(r17)
20022734:	88c00417 	ldw	r3,16(r17)
20022738:	88000115 	stw	zero,4(r17)
2002273c:	10bdffcc 	andi	r2,r2,63487
20022740:	8880030d 	sth	r2,12(r17)
20022744:	88c00015 	stw	r3,0(r17)
20022748:	003fb306 	br	20022618 <__flash_rwdata_start+0xffff4b30>
2002274c:	98800017 	ldw	r2,0(r19)
20022750:	103fea26 	beq	r2,zero,200226fc <__flash_rwdata_start+0xffff4c14>
20022754:	00c00744 	movi	r3,29
20022758:	10c00226 	beq	r2,r3,20022764 <__sflush_r+0x1fc>
2002275c:	00c00584 	movi	r3,22
20022760:	10c0031e 	bne	r2,r3,20022770 <__sflush_r+0x208>
20022764:	9c000015 	stw	r16,0(r19)
20022768:	0005883a 	mov	r2,zero
2002276c:	003fb306 	br	2002263c <__flash_rwdata_start+0xffff4b54>
20022770:	88c0030b 	ldhu	r3,12(r17)
20022774:	3005883a 	mov	r2,r6
20022778:	18c01014 	ori	r3,r3,64
2002277c:	88c0030d 	sth	r3,12(r17)
20022780:	003fae06 	br	2002263c <__flash_rwdata_start+0xffff4b54>

20022784 <_fflush_r>:
20022784:	defffd04 	addi	sp,sp,-12
20022788:	dc000115 	stw	r16,4(sp)
2002278c:	dfc00215 	stw	ra,8(sp)
20022790:	2021883a 	mov	r16,r4
20022794:	20000226 	beq	r4,zero,200227a0 <_fflush_r+0x1c>
20022798:	20800e17 	ldw	r2,56(r4)
2002279c:	10000c26 	beq	r2,zero,200227d0 <_fflush_r+0x4c>
200227a0:	2880030f 	ldh	r2,12(r5)
200227a4:	1000051e 	bne	r2,zero,200227bc <_fflush_r+0x38>
200227a8:	0005883a 	mov	r2,zero
200227ac:	dfc00217 	ldw	ra,8(sp)
200227b0:	dc000117 	ldw	r16,4(sp)
200227b4:	dec00304 	addi	sp,sp,12
200227b8:	f800283a 	ret
200227bc:	8009883a 	mov	r4,r16
200227c0:	dfc00217 	ldw	ra,8(sp)
200227c4:	dc000117 	ldw	r16,4(sp)
200227c8:	dec00304 	addi	sp,sp,12
200227cc:	00225681 	jmpi	20022568 <__sflush_r>
200227d0:	d9400015 	stw	r5,0(sp)
200227d4:	00208180 	call	20020818 <__sinit>
200227d8:	d9400017 	ldw	r5,0(sp)
200227dc:	003ff006 	br	200227a0 <__flash_rwdata_start+0xffff4cb8>

200227e0 <fflush>:
200227e0:	20000526 	beq	r4,zero,200227f8 <fflush+0x18>
200227e4:	00800034 	movhi	r2,0
200227e8:	1086f504 	addi	r2,r2,7124
200227ec:	200b883a 	mov	r5,r4
200227f0:	11000017 	ldw	r4,0(r2)
200227f4:	00227841 	jmpi	20022784 <_fflush_r>
200227f8:	00800034 	movhi	r2,0
200227fc:	1086f404 	addi	r2,r2,7120
20022800:	11000017 	ldw	r4,0(r2)
20022804:	014800b4 	movhi	r5,8194
20022808:	2949e104 	addi	r5,r5,10116
2002280c:	0020de81 	jmpi	20020de8 <_fwalk_reent>

20022810 <_malloc_trim_r>:
20022810:	defffb04 	addi	sp,sp,-20
20022814:	dcc00315 	stw	r19,12(sp)
20022818:	04c00034 	movhi	r19,0
2002281c:	dc800215 	stw	r18,8(sp)
20022820:	dc400115 	stw	r17,4(sp)
20022824:	dc000015 	stw	r16,0(sp)
20022828:	dfc00415 	stw	ra,16(sp)
2002282c:	2821883a 	mov	r16,r5
20022830:	9cc16d04 	addi	r19,r19,1460
20022834:	2025883a 	mov	r18,r4
20022838:	0023b840 	call	20023b84 <__malloc_lock>
2002283c:	98800217 	ldw	r2,8(r19)
20022840:	14400117 	ldw	r17,4(r2)
20022844:	00bfff04 	movi	r2,-4
20022848:	88a2703a 	and	r17,r17,r2
2002284c:	8c21c83a 	sub	r16,r17,r16
20022850:	8403fbc4 	addi	r16,r16,4079
20022854:	8020d33a 	srli	r16,r16,12
20022858:	0083ffc4 	movi	r2,4095
2002285c:	843fffc4 	addi	r16,r16,-1
20022860:	8020933a 	slli	r16,r16,12
20022864:	1400060e 	bge	r2,r16,20022880 <_malloc_trim_r+0x70>
20022868:	000b883a 	mov	r5,zero
2002286c:	9009883a 	mov	r4,r18
20022870:	00220cc0 	call	200220cc <_sbrk_r>
20022874:	98c00217 	ldw	r3,8(r19)
20022878:	1c47883a 	add	r3,r3,r17
2002287c:	10c00a26 	beq	r2,r3,200228a8 <_malloc_trim_r+0x98>
20022880:	9009883a 	mov	r4,r18
20022884:	0023ca40 	call	20023ca4 <__malloc_unlock>
20022888:	0005883a 	mov	r2,zero
2002288c:	dfc00417 	ldw	ra,16(sp)
20022890:	dcc00317 	ldw	r19,12(sp)
20022894:	dc800217 	ldw	r18,8(sp)
20022898:	dc400117 	ldw	r17,4(sp)
2002289c:	dc000017 	ldw	r16,0(sp)
200228a0:	dec00504 	addi	sp,sp,20
200228a4:	f800283a 	ret
200228a8:	040bc83a 	sub	r5,zero,r16
200228ac:	9009883a 	mov	r4,r18
200228b0:	00220cc0 	call	200220cc <_sbrk_r>
200228b4:	00ffffc4 	movi	r3,-1
200228b8:	10c00d26 	beq	r2,r3,200228f0 <_malloc_trim_r+0xe0>
200228bc:	00c00034 	movhi	r3,0
200228c0:	18c74504 	addi	r3,r3,7444
200228c4:	18800017 	ldw	r2,0(r3)
200228c8:	99000217 	ldw	r4,8(r19)
200228cc:	8c23c83a 	sub	r17,r17,r16
200228d0:	8c400054 	ori	r17,r17,1
200228d4:	1421c83a 	sub	r16,r2,r16
200228d8:	24400115 	stw	r17,4(r4)
200228dc:	9009883a 	mov	r4,r18
200228e0:	1c000015 	stw	r16,0(r3)
200228e4:	0023ca40 	call	20023ca4 <__malloc_unlock>
200228e8:	00800044 	movi	r2,1
200228ec:	003fe706 	br	2002288c <__flash_rwdata_start+0xffff4da4>
200228f0:	000b883a 	mov	r5,zero
200228f4:	9009883a 	mov	r4,r18
200228f8:	00220cc0 	call	200220cc <_sbrk_r>
200228fc:	99000217 	ldw	r4,8(r19)
20022900:	014003c4 	movi	r5,15
20022904:	1107c83a 	sub	r3,r2,r4
20022908:	28ffdd0e 	bge	r5,r3,20022880 <__flash_rwdata_start+0xffff4d98>
2002290c:	01400034 	movhi	r5,0
20022910:	2946f604 	addi	r5,r5,7128
20022914:	29400017 	ldw	r5,0(r5)
20022918:	18c00054 	ori	r3,r3,1
2002291c:	20c00115 	stw	r3,4(r4)
20022920:	00c00034 	movhi	r3,0
20022924:	1145c83a 	sub	r2,r2,r5
20022928:	18c74504 	addi	r3,r3,7444
2002292c:	18800015 	stw	r2,0(r3)
20022930:	003fd306 	br	20022880 <__flash_rwdata_start+0xffff4d98>

20022934 <_free_r>:
20022934:	28004126 	beq	r5,zero,20022a3c <_free_r+0x108>
20022938:	defffd04 	addi	sp,sp,-12
2002293c:	dc400115 	stw	r17,4(sp)
20022940:	dc000015 	stw	r16,0(sp)
20022944:	2023883a 	mov	r17,r4
20022948:	2821883a 	mov	r16,r5
2002294c:	dfc00215 	stw	ra,8(sp)
20022950:	0023b840 	call	20023b84 <__malloc_lock>
20022954:	81ffff17 	ldw	r7,-4(r16)
20022958:	00bfff84 	movi	r2,-2
2002295c:	01000034 	movhi	r4,0
20022960:	81bffe04 	addi	r6,r16,-8
20022964:	3884703a 	and	r2,r7,r2
20022968:	21016d04 	addi	r4,r4,1460
2002296c:	308b883a 	add	r5,r6,r2
20022970:	2a400117 	ldw	r9,4(r5)
20022974:	22000217 	ldw	r8,8(r4)
20022978:	00ffff04 	movi	r3,-4
2002297c:	48c6703a 	and	r3,r9,r3
20022980:	2a005726 	beq	r5,r8,20022ae0 <_free_r+0x1ac>
20022984:	28c00115 	stw	r3,4(r5)
20022988:	39c0004c 	andi	r7,r7,1
2002298c:	3800091e 	bne	r7,zero,200229b4 <_free_r+0x80>
20022990:	823ffe17 	ldw	r8,-8(r16)
20022994:	22400204 	addi	r9,r4,8
20022998:	320dc83a 	sub	r6,r6,r8
2002299c:	31c00217 	ldw	r7,8(r6)
200229a0:	1205883a 	add	r2,r2,r8
200229a4:	3a406526 	beq	r7,r9,20022b3c <_free_r+0x208>
200229a8:	32000317 	ldw	r8,12(r6)
200229ac:	3a000315 	stw	r8,12(r7)
200229b0:	41c00215 	stw	r7,8(r8)
200229b4:	28cf883a 	add	r7,r5,r3
200229b8:	39c00117 	ldw	r7,4(r7)
200229bc:	39c0004c 	andi	r7,r7,1
200229c0:	38003a26 	beq	r7,zero,20022aac <_free_r+0x178>
200229c4:	10c00054 	ori	r3,r2,1
200229c8:	30c00115 	stw	r3,4(r6)
200229cc:	3087883a 	add	r3,r6,r2
200229d0:	18800015 	stw	r2,0(r3)
200229d4:	00c07fc4 	movi	r3,511
200229d8:	18801936 	bltu	r3,r2,20022a40 <_free_r+0x10c>
200229dc:	1004d0fa 	srli	r2,r2,3
200229e0:	01c00044 	movi	r7,1
200229e4:	21400117 	ldw	r5,4(r4)
200229e8:	10c00044 	addi	r3,r2,1
200229ec:	18c7883a 	add	r3,r3,r3
200229f0:	1005d0ba 	srai	r2,r2,2
200229f4:	18c7883a 	add	r3,r3,r3
200229f8:	18c7883a 	add	r3,r3,r3
200229fc:	1907883a 	add	r3,r3,r4
20022a00:	3884983a 	sll	r2,r7,r2
20022a04:	19c00017 	ldw	r7,0(r3)
20022a08:	1a3ffe04 	addi	r8,r3,-8
20022a0c:	1144b03a 	or	r2,r2,r5
20022a10:	32000315 	stw	r8,12(r6)
20022a14:	31c00215 	stw	r7,8(r6)
20022a18:	20800115 	stw	r2,4(r4)
20022a1c:	19800015 	stw	r6,0(r3)
20022a20:	39800315 	stw	r6,12(r7)
20022a24:	8809883a 	mov	r4,r17
20022a28:	dfc00217 	ldw	ra,8(sp)
20022a2c:	dc400117 	ldw	r17,4(sp)
20022a30:	dc000017 	ldw	r16,0(sp)
20022a34:	dec00304 	addi	sp,sp,12
20022a38:	0023ca41 	jmpi	20023ca4 <__malloc_unlock>
20022a3c:	f800283a 	ret
20022a40:	100ad27a 	srli	r5,r2,9
20022a44:	00c00104 	movi	r3,4
20022a48:	19404a36 	bltu	r3,r5,20022b74 <_free_r+0x240>
20022a4c:	100ad1ba 	srli	r5,r2,6
20022a50:	28c00e44 	addi	r3,r5,57
20022a54:	18c7883a 	add	r3,r3,r3
20022a58:	29400e04 	addi	r5,r5,56
20022a5c:	18c7883a 	add	r3,r3,r3
20022a60:	18c7883a 	add	r3,r3,r3
20022a64:	1909883a 	add	r4,r3,r4
20022a68:	20c00017 	ldw	r3,0(r4)
20022a6c:	01c00034 	movhi	r7,0
20022a70:	213ffe04 	addi	r4,r4,-8
20022a74:	39c16d04 	addi	r7,r7,1460
20022a78:	20c04426 	beq	r4,r3,20022b8c <_free_r+0x258>
20022a7c:	01ffff04 	movi	r7,-4
20022a80:	19400117 	ldw	r5,4(r3)
20022a84:	29ca703a 	and	r5,r5,r7
20022a88:	1140022e 	bgeu	r2,r5,20022a94 <_free_r+0x160>
20022a8c:	18c00217 	ldw	r3,8(r3)
20022a90:	20fffb1e 	bne	r4,r3,20022a80 <__flash_rwdata_start+0xffff4f98>
20022a94:	19000317 	ldw	r4,12(r3)
20022a98:	31000315 	stw	r4,12(r6)
20022a9c:	30c00215 	stw	r3,8(r6)
20022aa0:	21800215 	stw	r6,8(r4)
20022aa4:	19800315 	stw	r6,12(r3)
20022aa8:	003fde06 	br	20022a24 <__flash_rwdata_start+0xffff4f3c>
20022aac:	29c00217 	ldw	r7,8(r5)
20022ab0:	10c5883a 	add	r2,r2,r3
20022ab4:	00c00034 	movhi	r3,0
20022ab8:	18c16f04 	addi	r3,r3,1468
20022abc:	38c03b26 	beq	r7,r3,20022bac <_free_r+0x278>
20022ac0:	2a000317 	ldw	r8,12(r5)
20022ac4:	11400054 	ori	r5,r2,1
20022ac8:	3087883a 	add	r3,r6,r2
20022acc:	3a000315 	stw	r8,12(r7)
20022ad0:	41c00215 	stw	r7,8(r8)
20022ad4:	31400115 	stw	r5,4(r6)
20022ad8:	18800015 	stw	r2,0(r3)
20022adc:	003fbd06 	br	200229d4 <__flash_rwdata_start+0xffff4eec>
20022ae0:	39c0004c 	andi	r7,r7,1
20022ae4:	10c5883a 	add	r2,r2,r3
20022ae8:	3800071e 	bne	r7,zero,20022b08 <_free_r+0x1d4>
20022aec:	81fffe17 	ldw	r7,-8(r16)
20022af0:	31cdc83a 	sub	r6,r6,r7
20022af4:	30c00317 	ldw	r3,12(r6)
20022af8:	31400217 	ldw	r5,8(r6)
20022afc:	11c5883a 	add	r2,r2,r7
20022b00:	28c00315 	stw	r3,12(r5)
20022b04:	19400215 	stw	r5,8(r3)
20022b08:	10c00054 	ori	r3,r2,1
20022b0c:	30c00115 	stw	r3,4(r6)
20022b10:	00c00034 	movhi	r3,0
20022b14:	18c6f704 	addi	r3,r3,7132
20022b18:	18c00017 	ldw	r3,0(r3)
20022b1c:	21800215 	stw	r6,8(r4)
20022b20:	10ffc036 	bltu	r2,r3,20022a24 <__flash_rwdata_start+0xffff4f3c>
20022b24:	00800034 	movhi	r2,0
20022b28:	10872404 	addi	r2,r2,7312
20022b2c:	11400017 	ldw	r5,0(r2)
20022b30:	8809883a 	mov	r4,r17
20022b34:	00228100 	call	20022810 <_malloc_trim_r>
20022b38:	003fba06 	br	20022a24 <__flash_rwdata_start+0xffff4f3c>
20022b3c:	28c9883a 	add	r4,r5,r3
20022b40:	21000117 	ldw	r4,4(r4)
20022b44:	2100004c 	andi	r4,r4,1
20022b48:	2000391e 	bne	r4,zero,20022c30 <_free_r+0x2fc>
20022b4c:	29c00217 	ldw	r7,8(r5)
20022b50:	29000317 	ldw	r4,12(r5)
20022b54:	1885883a 	add	r2,r3,r2
20022b58:	10c00054 	ori	r3,r2,1
20022b5c:	39000315 	stw	r4,12(r7)
20022b60:	21c00215 	stw	r7,8(r4)
20022b64:	30c00115 	stw	r3,4(r6)
20022b68:	308d883a 	add	r6,r6,r2
20022b6c:	30800015 	stw	r2,0(r6)
20022b70:	003fac06 	br	20022a24 <__flash_rwdata_start+0xffff4f3c>
20022b74:	00c00504 	movi	r3,20
20022b78:	19401536 	bltu	r3,r5,20022bd0 <_free_r+0x29c>
20022b7c:	28c01704 	addi	r3,r5,92
20022b80:	18c7883a 	add	r3,r3,r3
20022b84:	294016c4 	addi	r5,r5,91
20022b88:	003fb406 	br	20022a5c <__flash_rwdata_start+0xffff4f74>
20022b8c:	280bd0ba 	srai	r5,r5,2
20022b90:	00c00044 	movi	r3,1
20022b94:	38800117 	ldw	r2,4(r7)
20022b98:	194a983a 	sll	r5,r3,r5
20022b9c:	2007883a 	mov	r3,r4
20022ba0:	2884b03a 	or	r2,r5,r2
20022ba4:	38800115 	stw	r2,4(r7)
20022ba8:	003fbb06 	br	20022a98 <__flash_rwdata_start+0xffff4fb0>
20022bac:	21800515 	stw	r6,20(r4)
20022bb0:	21800415 	stw	r6,16(r4)
20022bb4:	10c00054 	ori	r3,r2,1
20022bb8:	31c00315 	stw	r7,12(r6)
20022bbc:	31c00215 	stw	r7,8(r6)
20022bc0:	30c00115 	stw	r3,4(r6)
20022bc4:	308d883a 	add	r6,r6,r2
20022bc8:	30800015 	stw	r2,0(r6)
20022bcc:	003f9506 	br	20022a24 <__flash_rwdata_start+0xffff4f3c>
20022bd0:	00c01504 	movi	r3,84
20022bd4:	19400536 	bltu	r3,r5,20022bec <_free_r+0x2b8>
20022bd8:	100ad33a 	srli	r5,r2,12
20022bdc:	28c01bc4 	addi	r3,r5,111
20022be0:	18c7883a 	add	r3,r3,r3
20022be4:	29401b84 	addi	r5,r5,110
20022be8:	003f9c06 	br	20022a5c <__flash_rwdata_start+0xffff4f74>
20022bec:	00c05504 	movi	r3,340
20022bf0:	19400536 	bltu	r3,r5,20022c08 <_free_r+0x2d4>
20022bf4:	100ad3fa 	srli	r5,r2,15
20022bf8:	28c01e04 	addi	r3,r5,120
20022bfc:	18c7883a 	add	r3,r3,r3
20022c00:	29401dc4 	addi	r5,r5,119
20022c04:	003f9506 	br	20022a5c <__flash_rwdata_start+0xffff4f74>
20022c08:	00c15504 	movi	r3,1364
20022c0c:	19400536 	bltu	r3,r5,20022c24 <_free_r+0x2f0>
20022c10:	100ad4ba 	srli	r5,r2,18
20022c14:	28c01f44 	addi	r3,r5,125
20022c18:	18c7883a 	add	r3,r3,r3
20022c1c:	29401f04 	addi	r5,r5,124
20022c20:	003f8e06 	br	20022a5c <__flash_rwdata_start+0xffff4f74>
20022c24:	00c03f84 	movi	r3,254
20022c28:	01401f84 	movi	r5,126
20022c2c:	003f8b06 	br	20022a5c <__flash_rwdata_start+0xffff4f74>
20022c30:	10c00054 	ori	r3,r2,1
20022c34:	30c00115 	stw	r3,4(r6)
20022c38:	308d883a 	add	r6,r6,r2
20022c3c:	30800015 	stw	r2,0(r6)
20022c40:	003f7806 	br	20022a24 <__flash_rwdata_start+0xffff4f3c>

20022c44 <_lseek_r>:
20022c44:	defffd04 	addi	sp,sp,-12
20022c48:	2805883a 	mov	r2,r5
20022c4c:	dc000015 	stw	r16,0(sp)
20022c50:	04000034 	movhi	r16,0
20022c54:	dc400115 	stw	r17,4(sp)
20022c58:	300b883a 	mov	r5,r6
20022c5c:	84072504 	addi	r16,r16,7316
20022c60:	2023883a 	mov	r17,r4
20022c64:	380d883a 	mov	r6,r7
20022c68:	1009883a 	mov	r4,r2
20022c6c:	dfc00215 	stw	ra,8(sp)
20022c70:	80000015 	stw	zero,0(r16)
20022c74:	00235500 	call	20023550 <lseek>
20022c78:	00ffffc4 	movi	r3,-1
20022c7c:	10c00526 	beq	r2,r3,20022c94 <_lseek_r+0x50>
20022c80:	dfc00217 	ldw	ra,8(sp)
20022c84:	dc400117 	ldw	r17,4(sp)
20022c88:	dc000017 	ldw	r16,0(sp)
20022c8c:	dec00304 	addi	sp,sp,12
20022c90:	f800283a 	ret
20022c94:	80c00017 	ldw	r3,0(r16)
20022c98:	183ff926 	beq	r3,zero,20022c80 <__flash_rwdata_start+0xffff5198>
20022c9c:	88c00015 	stw	r3,0(r17)
20022ca0:	003ff706 	br	20022c80 <__flash_rwdata_start+0xffff5198>

20022ca4 <__smakebuf_r>:
20022ca4:	2880030b 	ldhu	r2,12(r5)
20022ca8:	10c0008c 	andi	r3,r2,2
20022cac:	1800411e 	bne	r3,zero,20022db4 <__smakebuf_r+0x110>
20022cb0:	deffec04 	addi	sp,sp,-80
20022cb4:	dc000f15 	stw	r16,60(sp)
20022cb8:	2821883a 	mov	r16,r5
20022cbc:	2940038f 	ldh	r5,14(r5)
20022cc0:	dc401015 	stw	r17,64(sp)
20022cc4:	dfc01315 	stw	ra,76(sp)
20022cc8:	dcc01215 	stw	r19,72(sp)
20022ccc:	dc801115 	stw	r18,68(sp)
20022cd0:	2023883a 	mov	r17,r4
20022cd4:	28001c16 	blt	r5,zero,20022d48 <__smakebuf_r+0xa4>
20022cd8:	d80d883a 	mov	r6,sp
20022cdc:	0022ec00 	call	20022ec0 <_fstat_r>
20022ce0:	10001816 	blt	r2,zero,20022d44 <__smakebuf_r+0xa0>
20022ce4:	d8800117 	ldw	r2,4(sp)
20022ce8:	00e00014 	movui	r3,32768
20022cec:	10bc000c 	andi	r2,r2,61440
20022cf0:	14c80020 	cmpeqi	r19,r2,8192
20022cf4:	10c03726 	beq	r2,r3,20022dd4 <__smakebuf_r+0x130>
20022cf8:	80c0030b 	ldhu	r3,12(r16)
20022cfc:	18c20014 	ori	r3,r3,2048
20022d00:	80c0030d 	sth	r3,12(r16)
20022d04:	00c80004 	movi	r3,8192
20022d08:	10c0521e 	bne	r2,r3,20022e54 <__smakebuf_r+0x1b0>
20022d0c:	8140038f 	ldh	r5,14(r16)
20022d10:	8809883a 	mov	r4,r17
20022d14:	0022f1c0 	call	20022f1c <_isatty_r>
20022d18:	10004c26 	beq	r2,zero,20022e4c <__smakebuf_r+0x1a8>
20022d1c:	8080030b 	ldhu	r2,12(r16)
20022d20:	80c010c4 	addi	r3,r16,67
20022d24:	80c00015 	stw	r3,0(r16)
20022d28:	10800054 	ori	r2,r2,1
20022d2c:	8080030d 	sth	r2,12(r16)
20022d30:	00800044 	movi	r2,1
20022d34:	80c00415 	stw	r3,16(r16)
20022d38:	80800515 	stw	r2,20(r16)
20022d3c:	04810004 	movi	r18,1024
20022d40:	00000706 	br	20022d60 <__smakebuf_r+0xbc>
20022d44:	8080030b 	ldhu	r2,12(r16)
20022d48:	10c0200c 	andi	r3,r2,128
20022d4c:	18001f1e 	bne	r3,zero,20022dcc <__smakebuf_r+0x128>
20022d50:	04810004 	movi	r18,1024
20022d54:	10820014 	ori	r2,r2,2048
20022d58:	8080030d 	sth	r2,12(r16)
20022d5c:	0027883a 	mov	r19,zero
20022d60:	900b883a 	mov	r5,r18
20022d64:	8809883a 	mov	r4,r17
20022d68:	0020eac0 	call	20020eac <_malloc_r>
20022d6c:	10002c26 	beq	r2,zero,20022e20 <__smakebuf_r+0x17c>
20022d70:	80c0030b 	ldhu	r3,12(r16)
20022d74:	010800b4 	movhi	r4,8194
20022d78:	21013404 	addi	r4,r4,1232
20022d7c:	89000f15 	stw	r4,60(r17)
20022d80:	18c02014 	ori	r3,r3,128
20022d84:	80c0030d 	sth	r3,12(r16)
20022d88:	80800015 	stw	r2,0(r16)
20022d8c:	80800415 	stw	r2,16(r16)
20022d90:	84800515 	stw	r18,20(r16)
20022d94:	98001a1e 	bne	r19,zero,20022e00 <__smakebuf_r+0x15c>
20022d98:	dfc01317 	ldw	ra,76(sp)
20022d9c:	dcc01217 	ldw	r19,72(sp)
20022da0:	dc801117 	ldw	r18,68(sp)
20022da4:	dc401017 	ldw	r17,64(sp)
20022da8:	dc000f17 	ldw	r16,60(sp)
20022dac:	dec01404 	addi	sp,sp,80
20022db0:	f800283a 	ret
20022db4:	288010c4 	addi	r2,r5,67
20022db8:	28800015 	stw	r2,0(r5)
20022dbc:	28800415 	stw	r2,16(r5)
20022dc0:	00800044 	movi	r2,1
20022dc4:	28800515 	stw	r2,20(r5)
20022dc8:	f800283a 	ret
20022dcc:	04801004 	movi	r18,64
20022dd0:	003fe006 	br	20022d54 <__flash_rwdata_start+0xffff526c>
20022dd4:	81000a17 	ldw	r4,40(r16)
20022dd8:	00c800b4 	movhi	r3,8194
20022ddc:	18c87e04 	addi	r3,r3,8696
20022de0:	20ffc51e 	bne	r4,r3,20022cf8 <__flash_rwdata_start+0xffff5210>
20022de4:	8080030b 	ldhu	r2,12(r16)
20022de8:	04810004 	movi	r18,1024
20022dec:	84801315 	stw	r18,76(r16)
20022df0:	1484b03a 	or	r2,r2,r18
20022df4:	8080030d 	sth	r2,12(r16)
20022df8:	0027883a 	mov	r19,zero
20022dfc:	003fd806 	br	20022d60 <__flash_rwdata_start+0xffff5278>
20022e00:	8140038f 	ldh	r5,14(r16)
20022e04:	8809883a 	mov	r4,r17
20022e08:	0022f1c0 	call	20022f1c <_isatty_r>
20022e0c:	103fe226 	beq	r2,zero,20022d98 <__flash_rwdata_start+0xffff52b0>
20022e10:	8080030b 	ldhu	r2,12(r16)
20022e14:	10800054 	ori	r2,r2,1
20022e18:	8080030d 	sth	r2,12(r16)
20022e1c:	003fde06 	br	20022d98 <__flash_rwdata_start+0xffff52b0>
20022e20:	8080030b 	ldhu	r2,12(r16)
20022e24:	10c0800c 	andi	r3,r2,512
20022e28:	183fdb1e 	bne	r3,zero,20022d98 <__flash_rwdata_start+0xffff52b0>
20022e2c:	10800094 	ori	r2,r2,2
20022e30:	80c010c4 	addi	r3,r16,67
20022e34:	8080030d 	sth	r2,12(r16)
20022e38:	00800044 	movi	r2,1
20022e3c:	80c00015 	stw	r3,0(r16)
20022e40:	80c00415 	stw	r3,16(r16)
20022e44:	80800515 	stw	r2,20(r16)
20022e48:	003fd306 	br	20022d98 <__flash_rwdata_start+0xffff52b0>
20022e4c:	04810004 	movi	r18,1024
20022e50:	003fc306 	br	20022d60 <__flash_rwdata_start+0xffff5278>
20022e54:	0027883a 	mov	r19,zero
20022e58:	04810004 	movi	r18,1024
20022e5c:	003fc006 	br	20022d60 <__flash_rwdata_start+0xffff5278>

20022e60 <_read_r>:
20022e60:	defffd04 	addi	sp,sp,-12
20022e64:	2805883a 	mov	r2,r5
20022e68:	dc000015 	stw	r16,0(sp)
20022e6c:	04000034 	movhi	r16,0
20022e70:	dc400115 	stw	r17,4(sp)
20022e74:	300b883a 	mov	r5,r6
20022e78:	84072504 	addi	r16,r16,7316
20022e7c:	2023883a 	mov	r17,r4
20022e80:	380d883a 	mov	r6,r7
20022e84:	1009883a 	mov	r4,r2
20022e88:	dfc00215 	stw	ra,8(sp)
20022e8c:	80000015 	stw	zero,0(r16)
20022e90:	002371c0 	call	2002371c <read>
20022e94:	00ffffc4 	movi	r3,-1
20022e98:	10c00526 	beq	r2,r3,20022eb0 <_read_r+0x50>
20022e9c:	dfc00217 	ldw	ra,8(sp)
20022ea0:	dc400117 	ldw	r17,4(sp)
20022ea4:	dc000017 	ldw	r16,0(sp)
20022ea8:	dec00304 	addi	sp,sp,12
20022eac:	f800283a 	ret
20022eb0:	80c00017 	ldw	r3,0(r16)
20022eb4:	183ff926 	beq	r3,zero,20022e9c <__flash_rwdata_start+0xffff53b4>
20022eb8:	88c00015 	stw	r3,0(r17)
20022ebc:	003ff706 	br	20022e9c <__flash_rwdata_start+0xffff53b4>

20022ec0 <_fstat_r>:
20022ec0:	defffd04 	addi	sp,sp,-12
20022ec4:	2805883a 	mov	r2,r5
20022ec8:	dc000015 	stw	r16,0(sp)
20022ecc:	04000034 	movhi	r16,0
20022ed0:	dc400115 	stw	r17,4(sp)
20022ed4:	84072504 	addi	r16,r16,7316
20022ed8:	2023883a 	mov	r17,r4
20022edc:	300b883a 	mov	r5,r6
20022ee0:	1009883a 	mov	r4,r2
20022ee4:	dfc00215 	stw	ra,8(sp)
20022ee8:	80000015 	stw	zero,0(r16)
20022eec:	00232980 	call	20023298 <fstat>
20022ef0:	00ffffc4 	movi	r3,-1
20022ef4:	10c00526 	beq	r2,r3,20022f0c <_fstat_r+0x4c>
20022ef8:	dfc00217 	ldw	ra,8(sp)
20022efc:	dc400117 	ldw	r17,4(sp)
20022f00:	dc000017 	ldw	r16,0(sp)
20022f04:	dec00304 	addi	sp,sp,12
20022f08:	f800283a 	ret
20022f0c:	80c00017 	ldw	r3,0(r16)
20022f10:	183ff926 	beq	r3,zero,20022ef8 <__flash_rwdata_start+0xffff5410>
20022f14:	88c00015 	stw	r3,0(r17)
20022f18:	003ff706 	br	20022ef8 <__flash_rwdata_start+0xffff5410>

20022f1c <_isatty_r>:
20022f1c:	defffd04 	addi	sp,sp,-12
20022f20:	dc000015 	stw	r16,0(sp)
20022f24:	04000034 	movhi	r16,0
20022f28:	dc400115 	stw	r17,4(sp)
20022f2c:	84072504 	addi	r16,r16,7316
20022f30:	2023883a 	mov	r17,r4
20022f34:	2809883a 	mov	r4,r5
20022f38:	dfc00215 	stw	ra,8(sp)
20022f3c:	80000015 	stw	zero,0(r16)
20022f40:	00233840 	call	20023384 <isatty>
20022f44:	00ffffc4 	movi	r3,-1
20022f48:	10c00526 	beq	r2,r3,20022f60 <_isatty_r+0x44>
20022f4c:	dfc00217 	ldw	ra,8(sp)
20022f50:	dc400117 	ldw	r17,4(sp)
20022f54:	dc000017 	ldw	r16,0(sp)
20022f58:	dec00304 	addi	sp,sp,12
20022f5c:	f800283a 	ret
20022f60:	80c00017 	ldw	r3,0(r16)
20022f64:	183ff926 	beq	r3,zero,20022f4c <__flash_rwdata_start+0xffff5464>
20022f68:	88c00015 	stw	r3,0(r17)
20022f6c:	003ff706 	br	20022f4c <__flash_rwdata_start+0xffff5464>

20022f70 <__divsi3>:
20022f70:	20001b16 	blt	r4,zero,20022fe0 <__divsi3+0x70>
20022f74:	000f883a 	mov	r7,zero
20022f78:	28001616 	blt	r5,zero,20022fd4 <__divsi3+0x64>
20022f7c:	200d883a 	mov	r6,r4
20022f80:	29001a2e 	bgeu	r5,r4,20022fec <__divsi3+0x7c>
20022f84:	00800804 	movi	r2,32
20022f88:	00c00044 	movi	r3,1
20022f8c:	00000106 	br	20022f94 <__divsi3+0x24>
20022f90:	10000d26 	beq	r2,zero,20022fc8 <__divsi3+0x58>
20022f94:	294b883a 	add	r5,r5,r5
20022f98:	10bfffc4 	addi	r2,r2,-1
20022f9c:	18c7883a 	add	r3,r3,r3
20022fa0:	293ffb36 	bltu	r5,r4,20022f90 <__flash_rwdata_start+0xffff54a8>
20022fa4:	0005883a 	mov	r2,zero
20022fa8:	18000726 	beq	r3,zero,20022fc8 <__divsi3+0x58>
20022fac:	0005883a 	mov	r2,zero
20022fb0:	31400236 	bltu	r6,r5,20022fbc <__divsi3+0x4c>
20022fb4:	314dc83a 	sub	r6,r6,r5
20022fb8:	10c4b03a 	or	r2,r2,r3
20022fbc:	1806d07a 	srli	r3,r3,1
20022fc0:	280ad07a 	srli	r5,r5,1
20022fc4:	183ffa1e 	bne	r3,zero,20022fb0 <__flash_rwdata_start+0xffff54c8>
20022fc8:	38000126 	beq	r7,zero,20022fd0 <__divsi3+0x60>
20022fcc:	0085c83a 	sub	r2,zero,r2
20022fd0:	f800283a 	ret
20022fd4:	014bc83a 	sub	r5,zero,r5
20022fd8:	39c0005c 	xori	r7,r7,1
20022fdc:	003fe706 	br	20022f7c <__flash_rwdata_start+0xffff5494>
20022fe0:	0109c83a 	sub	r4,zero,r4
20022fe4:	01c00044 	movi	r7,1
20022fe8:	003fe306 	br	20022f78 <__flash_rwdata_start+0xffff5490>
20022fec:	00c00044 	movi	r3,1
20022ff0:	003fee06 	br	20022fac <__flash_rwdata_start+0xffff54c4>

20022ff4 <__modsi3>:
20022ff4:	20001716 	blt	r4,zero,20023054 <__modsi3+0x60>
20022ff8:	000f883a 	mov	r7,zero
20022ffc:	2005883a 	mov	r2,r4
20023000:	28001216 	blt	r5,zero,2002304c <__modsi3+0x58>
20023004:	2900162e 	bgeu	r5,r4,20023060 <__modsi3+0x6c>
20023008:	01800804 	movi	r6,32
2002300c:	00c00044 	movi	r3,1
20023010:	00000106 	br	20023018 <__modsi3+0x24>
20023014:	30000a26 	beq	r6,zero,20023040 <__modsi3+0x4c>
20023018:	294b883a 	add	r5,r5,r5
2002301c:	31bfffc4 	addi	r6,r6,-1
20023020:	18c7883a 	add	r3,r3,r3
20023024:	293ffb36 	bltu	r5,r4,20023014 <__flash_rwdata_start+0xffff552c>
20023028:	18000526 	beq	r3,zero,20023040 <__modsi3+0x4c>
2002302c:	1806d07a 	srli	r3,r3,1
20023030:	11400136 	bltu	r2,r5,20023038 <__modsi3+0x44>
20023034:	1145c83a 	sub	r2,r2,r5
20023038:	280ad07a 	srli	r5,r5,1
2002303c:	183ffb1e 	bne	r3,zero,2002302c <__flash_rwdata_start+0xffff5544>
20023040:	38000126 	beq	r7,zero,20023048 <__modsi3+0x54>
20023044:	0085c83a 	sub	r2,zero,r2
20023048:	f800283a 	ret
2002304c:	014bc83a 	sub	r5,zero,r5
20023050:	003fec06 	br	20023004 <__flash_rwdata_start+0xffff551c>
20023054:	0109c83a 	sub	r4,zero,r4
20023058:	01c00044 	movi	r7,1
2002305c:	003fe706 	br	20022ffc <__flash_rwdata_start+0xffff5514>
20023060:	00c00044 	movi	r3,1
20023064:	003ff106 	br	2002302c <__flash_rwdata_start+0xffff5544>

20023068 <__udivsi3>:
20023068:	200d883a 	mov	r6,r4
2002306c:	2900152e 	bgeu	r5,r4,200230c4 <__udivsi3+0x5c>
20023070:	28001416 	blt	r5,zero,200230c4 <__udivsi3+0x5c>
20023074:	00800804 	movi	r2,32
20023078:	00c00044 	movi	r3,1
2002307c:	00000206 	br	20023088 <__udivsi3+0x20>
20023080:	10000e26 	beq	r2,zero,200230bc <__udivsi3+0x54>
20023084:	28000516 	blt	r5,zero,2002309c <__udivsi3+0x34>
20023088:	294b883a 	add	r5,r5,r5
2002308c:	10bfffc4 	addi	r2,r2,-1
20023090:	18c7883a 	add	r3,r3,r3
20023094:	293ffa36 	bltu	r5,r4,20023080 <__flash_rwdata_start+0xffff5598>
20023098:	18000826 	beq	r3,zero,200230bc <__udivsi3+0x54>
2002309c:	0005883a 	mov	r2,zero
200230a0:	31400236 	bltu	r6,r5,200230ac <__udivsi3+0x44>
200230a4:	314dc83a 	sub	r6,r6,r5
200230a8:	10c4b03a 	or	r2,r2,r3
200230ac:	1806d07a 	srli	r3,r3,1
200230b0:	280ad07a 	srli	r5,r5,1
200230b4:	183ffa1e 	bne	r3,zero,200230a0 <__flash_rwdata_start+0xffff55b8>
200230b8:	f800283a 	ret
200230bc:	0005883a 	mov	r2,zero
200230c0:	f800283a 	ret
200230c4:	00c00044 	movi	r3,1
200230c8:	003ff406 	br	2002309c <__flash_rwdata_start+0xffff55b4>

200230cc <__umodsi3>:
200230cc:	2005883a 	mov	r2,r4
200230d0:	2900122e 	bgeu	r5,r4,2002311c <__umodsi3+0x50>
200230d4:	28001116 	blt	r5,zero,2002311c <__umodsi3+0x50>
200230d8:	01800804 	movi	r6,32
200230dc:	00c00044 	movi	r3,1
200230e0:	00000206 	br	200230ec <__umodsi3+0x20>
200230e4:	30000c26 	beq	r6,zero,20023118 <__umodsi3+0x4c>
200230e8:	28000516 	blt	r5,zero,20023100 <__umodsi3+0x34>
200230ec:	294b883a 	add	r5,r5,r5
200230f0:	31bfffc4 	addi	r6,r6,-1
200230f4:	18c7883a 	add	r3,r3,r3
200230f8:	293ffa36 	bltu	r5,r4,200230e4 <__flash_rwdata_start+0xffff55fc>
200230fc:	18000626 	beq	r3,zero,20023118 <__umodsi3+0x4c>
20023100:	1806d07a 	srli	r3,r3,1
20023104:	11400136 	bltu	r2,r5,2002310c <__umodsi3+0x40>
20023108:	1145c83a 	sub	r2,r2,r5
2002310c:	280ad07a 	srli	r5,r5,1
20023110:	183ffb1e 	bne	r3,zero,20023100 <__flash_rwdata_start+0xffff5618>
20023114:	f800283a 	ret
20023118:	f800283a 	ret
2002311c:	00c00044 	movi	r3,1
20023120:	003ff706 	br	20023100 <__flash_rwdata_start+0xffff5618>

20023124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20023124:	defffe04 	addi	sp,sp,-8
20023128:	dfc00115 	stw	ra,4(sp)
2002312c:	df000015 	stw	fp,0(sp)
20023130:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20023134:	d0a00917 	ldw	r2,-32732(gp)
20023138:	10000326 	beq	r2,zero,20023148 <alt_get_errno+0x24>
2002313c:	d0a00917 	ldw	r2,-32732(gp)
20023140:	103ee83a 	callr	r2
20023144:	00000106 	br	2002314c <alt_get_errno+0x28>
20023148:	d0a03104 	addi	r2,gp,-32572
}
2002314c:	e037883a 	mov	sp,fp
20023150:	dfc00117 	ldw	ra,4(sp)
20023154:	df000017 	ldw	fp,0(sp)
20023158:	dec00204 	addi	sp,sp,8
2002315c:	f800283a 	ret

20023160 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
20023160:	defffb04 	addi	sp,sp,-20
20023164:	dfc00415 	stw	ra,16(sp)
20023168:	df000315 	stw	fp,12(sp)
2002316c:	df000304 	addi	fp,sp,12
20023170:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
20023174:	e0bfff17 	ldw	r2,-4(fp)
20023178:	10000616 	blt	r2,zero,20023194 <close+0x34>
2002317c:	e0bfff17 	ldw	r2,-4(fp)
20023180:	10c00324 	muli	r3,r2,12
20023184:	00800034 	movhi	r2,0
20023188:	10827904 	addi	r2,r2,2532
2002318c:	1885883a 	add	r2,r3,r2
20023190:	00000106 	br	20023198 <close+0x38>
20023194:	0005883a 	mov	r2,zero
20023198:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002319c:	e0bffd17 	ldw	r2,-12(fp)
200231a0:	10001926 	beq	r2,zero,20023208 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
200231a4:	e0bffd17 	ldw	r2,-12(fp)
200231a8:	10800017 	ldw	r2,0(r2)
200231ac:	10800417 	ldw	r2,16(r2)
200231b0:	10000626 	beq	r2,zero,200231cc <close+0x6c>
200231b4:	e0bffd17 	ldw	r2,-12(fp)
200231b8:	10800017 	ldw	r2,0(r2)
200231bc:	10800417 	ldw	r2,16(r2)
200231c0:	e13ffd17 	ldw	r4,-12(fp)
200231c4:	103ee83a 	callr	r2
200231c8:	00000106 	br	200231d0 <close+0x70>
200231cc:	0005883a 	mov	r2,zero
200231d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
200231d4:	e13fff17 	ldw	r4,-4(fp)
200231d8:	00238180 	call	20023818 <alt_release_fd>
    if (rval < 0)
200231dc:	e0bffe17 	ldw	r2,-8(fp)
200231e0:	1000070e 	bge	r2,zero,20023200 <close+0xa0>
    {
      ALT_ERRNO = -rval;
200231e4:	00231240 	call	20023124 <alt_get_errno>
200231e8:	1007883a 	mov	r3,r2
200231ec:	e0bffe17 	ldw	r2,-8(fp)
200231f0:	0085c83a 	sub	r2,zero,r2
200231f4:	18800015 	stw	r2,0(r3)
      return -1;
200231f8:	00bfffc4 	movi	r2,-1
200231fc:	00000706 	br	2002321c <close+0xbc>
    }
    return 0;
20023200:	0005883a 	mov	r2,zero
20023204:	00000506 	br	2002321c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
20023208:	00231240 	call	20023124 <alt_get_errno>
2002320c:	1007883a 	mov	r3,r2
20023210:	00801444 	movi	r2,81
20023214:	18800015 	stw	r2,0(r3)
    return -1;
20023218:	00bfffc4 	movi	r2,-1
  }
}
2002321c:	e037883a 	mov	sp,fp
20023220:	dfc00117 	ldw	ra,4(sp)
20023224:	df000017 	ldw	fp,0(sp)
20023228:	dec00204 	addi	sp,sp,8
2002322c:	f800283a 	ret

20023230 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
20023230:	defffc04 	addi	sp,sp,-16
20023234:	df000315 	stw	fp,12(sp)
20023238:	df000304 	addi	fp,sp,12
2002323c:	e13ffd15 	stw	r4,-12(fp)
20023240:	e17ffe15 	stw	r5,-8(fp)
20023244:	e1bfff15 	stw	r6,-4(fp)
  return len;
20023248:	e0bfff17 	ldw	r2,-4(fp)
}
2002324c:	e037883a 	mov	sp,fp
20023250:	df000017 	ldw	fp,0(sp)
20023254:	dec00104 	addi	sp,sp,4
20023258:	f800283a 	ret

2002325c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002325c:	defffe04 	addi	sp,sp,-8
20023260:	dfc00115 	stw	ra,4(sp)
20023264:	df000015 	stw	fp,0(sp)
20023268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002326c:	d0a00917 	ldw	r2,-32732(gp)
20023270:	10000326 	beq	r2,zero,20023280 <alt_get_errno+0x24>
20023274:	d0a00917 	ldw	r2,-32732(gp)
20023278:	103ee83a 	callr	r2
2002327c:	00000106 	br	20023284 <alt_get_errno+0x28>
20023280:	d0a03104 	addi	r2,gp,-32572
}
20023284:	e037883a 	mov	sp,fp
20023288:	dfc00117 	ldw	ra,4(sp)
2002328c:	df000017 	ldw	fp,0(sp)
20023290:	dec00204 	addi	sp,sp,8
20023294:	f800283a 	ret

20023298 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
20023298:	defffb04 	addi	sp,sp,-20
2002329c:	dfc00415 	stw	ra,16(sp)
200232a0:	df000315 	stw	fp,12(sp)
200232a4:	df000304 	addi	fp,sp,12
200232a8:	e13ffe15 	stw	r4,-8(fp)
200232ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200232b0:	e0bffe17 	ldw	r2,-8(fp)
200232b4:	10000616 	blt	r2,zero,200232d0 <fstat+0x38>
200232b8:	e0bffe17 	ldw	r2,-8(fp)
200232bc:	10c00324 	muli	r3,r2,12
200232c0:	00800034 	movhi	r2,0
200232c4:	10827904 	addi	r2,r2,2532
200232c8:	1885883a 	add	r2,r3,r2
200232cc:	00000106 	br	200232d4 <fstat+0x3c>
200232d0:	0005883a 	mov	r2,zero
200232d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
200232d8:	e0bffd17 	ldw	r2,-12(fp)
200232dc:	10001026 	beq	r2,zero,20023320 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
200232e0:	e0bffd17 	ldw	r2,-12(fp)
200232e4:	10800017 	ldw	r2,0(r2)
200232e8:	10800817 	ldw	r2,32(r2)
200232ec:	10000726 	beq	r2,zero,2002330c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
200232f0:	e0bffd17 	ldw	r2,-12(fp)
200232f4:	10800017 	ldw	r2,0(r2)
200232f8:	10800817 	ldw	r2,32(r2)
200232fc:	e17fff17 	ldw	r5,-4(fp)
20023300:	e13ffd17 	ldw	r4,-12(fp)
20023304:	103ee83a 	callr	r2
20023308:	00000a06 	br	20023334 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002330c:	e0bfff17 	ldw	r2,-4(fp)
20023310:	00c80004 	movi	r3,8192
20023314:	10c00115 	stw	r3,4(r2)
      return 0;
20023318:	0005883a 	mov	r2,zero
2002331c:	00000506 	br	20023334 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20023320:	002325c0 	call	2002325c <alt_get_errno>
20023324:	1007883a 	mov	r3,r2
20023328:	00801444 	movi	r2,81
2002332c:	18800015 	stw	r2,0(r3)
    return -1;
20023330:	00bfffc4 	movi	r2,-1
  }
}
20023334:	e037883a 	mov	sp,fp
20023338:	dfc00117 	ldw	ra,4(sp)
2002333c:	df000017 	ldw	fp,0(sp)
20023340:	dec00204 	addi	sp,sp,8
20023344:	f800283a 	ret

20023348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20023348:	defffe04 	addi	sp,sp,-8
2002334c:	dfc00115 	stw	ra,4(sp)
20023350:	df000015 	stw	fp,0(sp)
20023354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20023358:	d0a00917 	ldw	r2,-32732(gp)
2002335c:	10000326 	beq	r2,zero,2002336c <alt_get_errno+0x24>
20023360:	d0a00917 	ldw	r2,-32732(gp)
20023364:	103ee83a 	callr	r2
20023368:	00000106 	br	20023370 <alt_get_errno+0x28>
2002336c:	d0a03104 	addi	r2,gp,-32572
}
20023370:	e037883a 	mov	sp,fp
20023374:	dfc00117 	ldw	ra,4(sp)
20023378:	df000017 	ldw	fp,0(sp)
2002337c:	dec00204 	addi	sp,sp,8
20023380:	f800283a 	ret

20023384 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
20023384:	deffed04 	addi	sp,sp,-76
20023388:	dfc01215 	stw	ra,72(sp)
2002338c:	df001115 	stw	fp,68(sp)
20023390:	df001104 	addi	fp,sp,68
20023394:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20023398:	e0bfff17 	ldw	r2,-4(fp)
2002339c:	10000616 	blt	r2,zero,200233b8 <isatty+0x34>
200233a0:	e0bfff17 	ldw	r2,-4(fp)
200233a4:	10c00324 	muli	r3,r2,12
200233a8:	00800034 	movhi	r2,0
200233ac:	10827904 	addi	r2,r2,2532
200233b0:	1885883a 	add	r2,r3,r2
200233b4:	00000106 	br	200233bc <isatty+0x38>
200233b8:	0005883a 	mov	r2,zero
200233bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
200233c0:	e0bfef17 	ldw	r2,-68(fp)
200233c4:	10000e26 	beq	r2,zero,20023400 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
200233c8:	e0bfef17 	ldw	r2,-68(fp)
200233cc:	10800017 	ldw	r2,0(r2)
200233d0:	10800817 	ldw	r2,32(r2)
200233d4:	1000021e 	bne	r2,zero,200233e0 <isatty+0x5c>
    {
      return 1;
200233d8:	00800044 	movi	r2,1
200233dc:	00000d06 	br	20023414 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
200233e0:	e0bff004 	addi	r2,fp,-64
200233e4:	100b883a 	mov	r5,r2
200233e8:	e13fff17 	ldw	r4,-4(fp)
200233ec:	00232980 	call	20023298 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
200233f0:	e0bff117 	ldw	r2,-60(fp)
200233f4:	10880020 	cmpeqi	r2,r2,8192
200233f8:	10803fcc 	andi	r2,r2,255
200233fc:	00000506 	br	20023414 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20023400:	00233480 	call	20023348 <alt_get_errno>
20023404:	1007883a 	mov	r3,r2
20023408:	00801444 	movi	r2,81
2002340c:	18800015 	stw	r2,0(r3)
    return 0;
20023410:	0005883a 	mov	r2,zero
  }
}
20023414:	e037883a 	mov	sp,fp
20023418:	dfc00117 	ldw	ra,4(sp)
2002341c:	df000017 	ldw	fp,0(sp)
20023420:	dec00204 	addi	sp,sp,8
20023424:	f800283a 	ret

20023428 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
20023428:	defffc04 	addi	sp,sp,-16
2002342c:	df000315 	stw	fp,12(sp)
20023430:	df000304 	addi	fp,sp,12
20023434:	e13ffd15 	stw	r4,-12(fp)
20023438:	e17ffe15 	stw	r5,-8(fp)
2002343c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
20023440:	e0fffe17 	ldw	r3,-8(fp)
20023444:	e0bffd17 	ldw	r2,-12(fp)
20023448:	18800c26 	beq	r3,r2,2002347c <alt_load_section+0x54>
  {
    while( to != end )
2002344c:	00000806 	br	20023470 <alt_load_section+0x48>
    {
      *to++ = *from++;
20023450:	e0bffe17 	ldw	r2,-8(fp)
20023454:	10c00104 	addi	r3,r2,4
20023458:	e0fffe15 	stw	r3,-8(fp)
2002345c:	e0fffd17 	ldw	r3,-12(fp)
20023460:	19000104 	addi	r4,r3,4
20023464:	e13ffd15 	stw	r4,-12(fp)
20023468:	18c00017 	ldw	r3,0(r3)
2002346c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
20023470:	e0fffe17 	ldw	r3,-8(fp)
20023474:	e0bfff17 	ldw	r2,-4(fp)
20023478:	18bff51e 	bne	r3,r2,20023450 <__flash_rwdata_start+0xffff5968>
    {
      *to++ = *from++;
    }
  }
}
2002347c:	0001883a 	nop
20023480:	e037883a 	mov	sp,fp
20023484:	df000017 	ldw	fp,0(sp)
20023488:	dec00104 	addi	sp,sp,4
2002348c:	f800283a 	ret

20023490 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20023490:	defffe04 	addi	sp,sp,-8
20023494:	dfc00115 	stw	ra,4(sp)
20023498:	df000015 	stw	fp,0(sp)
2002349c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
200234a0:	01800034 	movhi	r6,0
200234a4:	31872104 	addi	r6,r6,7300
200234a8:	01400034 	movhi	r5,0
200234ac:	29406404 	addi	r5,r5,400
200234b0:	010800f4 	movhi	r4,8195
200234b4:	2136ba04 	addi	r4,r4,-9496
200234b8:	00234280 	call	20023428 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
200234bc:	018800b4 	movhi	r6,8194
200234c0:	31807004 	addi	r6,r6,448
200234c4:	014800b4 	movhi	r5,8194
200234c8:	29400804 	addi	r5,r5,32
200234cc:	010800b4 	movhi	r4,8194
200234d0:	21000804 	addi	r4,r4,32
200234d4:	00234280 	call	20023428 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
200234d8:	01800034 	movhi	r6,0
200234dc:	31806404 	addi	r6,r6,400
200234e0:	01400034 	movhi	r5,0
200234e4:	29400004 	addi	r5,r5,0
200234e8:	010800f4 	movhi	r4,8195
200234ec:	21365604 	addi	r4,r4,-9896
200234f0:	00234280 	call	20023428 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
200234f4:	002c5500 	call	2002c550 <alt_dcache_flush_all>
  alt_icache_flush_all();
200234f8:	002c7380 	call	2002c738 <alt_icache_flush_all>
}
200234fc:	0001883a 	nop
20023500:	e037883a 	mov	sp,fp
20023504:	dfc00117 	ldw	ra,4(sp)
20023508:	df000017 	ldw	fp,0(sp)
2002350c:	dec00204 	addi	sp,sp,8
20023510:	f800283a 	ret

20023514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20023514:	defffe04 	addi	sp,sp,-8
20023518:	dfc00115 	stw	ra,4(sp)
2002351c:	df000015 	stw	fp,0(sp)
20023520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20023524:	d0a00917 	ldw	r2,-32732(gp)
20023528:	10000326 	beq	r2,zero,20023538 <alt_get_errno+0x24>
2002352c:	d0a00917 	ldw	r2,-32732(gp)
20023530:	103ee83a 	callr	r2
20023534:	00000106 	br	2002353c <alt_get_errno+0x28>
20023538:	d0a03104 	addi	r2,gp,-32572
}
2002353c:	e037883a 	mov	sp,fp
20023540:	dfc00117 	ldw	ra,4(sp)
20023544:	df000017 	ldw	fp,0(sp)
20023548:	dec00204 	addi	sp,sp,8
2002354c:	f800283a 	ret

20023550 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
20023550:	defff904 	addi	sp,sp,-28
20023554:	dfc00615 	stw	ra,24(sp)
20023558:	df000515 	stw	fp,20(sp)
2002355c:	df000504 	addi	fp,sp,20
20023560:	e13ffd15 	stw	r4,-12(fp)
20023564:	e17ffe15 	stw	r5,-8(fp)
20023568:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002356c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20023570:	e0bffd17 	ldw	r2,-12(fp)
20023574:	10000616 	blt	r2,zero,20023590 <lseek+0x40>
20023578:	e0bffd17 	ldw	r2,-12(fp)
2002357c:	10c00324 	muli	r3,r2,12
20023580:	00800034 	movhi	r2,0
20023584:	10827904 	addi	r2,r2,2532
20023588:	1885883a 	add	r2,r3,r2
2002358c:	00000106 	br	20023594 <lseek+0x44>
20023590:	0005883a 	mov	r2,zero
20023594:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20023598:	e0bffc17 	ldw	r2,-16(fp)
2002359c:	10001026 	beq	r2,zero,200235e0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
200235a0:	e0bffc17 	ldw	r2,-16(fp)
200235a4:	10800017 	ldw	r2,0(r2)
200235a8:	10800717 	ldw	r2,28(r2)
200235ac:	10000926 	beq	r2,zero,200235d4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
200235b0:	e0bffc17 	ldw	r2,-16(fp)
200235b4:	10800017 	ldw	r2,0(r2)
200235b8:	10800717 	ldw	r2,28(r2)
200235bc:	e1bfff17 	ldw	r6,-4(fp)
200235c0:	e17ffe17 	ldw	r5,-8(fp)
200235c4:	e13ffc17 	ldw	r4,-16(fp)
200235c8:	103ee83a 	callr	r2
200235cc:	e0bffb15 	stw	r2,-20(fp)
200235d0:	00000506 	br	200235e8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
200235d4:	00bfde84 	movi	r2,-134
200235d8:	e0bffb15 	stw	r2,-20(fp)
200235dc:	00000206 	br	200235e8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
200235e0:	00bfebc4 	movi	r2,-81
200235e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
200235e8:	e0bffb17 	ldw	r2,-20(fp)
200235ec:	1000070e 	bge	r2,zero,2002360c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
200235f0:	00235140 	call	20023514 <alt_get_errno>
200235f4:	1007883a 	mov	r3,r2
200235f8:	e0bffb17 	ldw	r2,-20(fp)
200235fc:	0085c83a 	sub	r2,zero,r2
20023600:	18800015 	stw	r2,0(r3)
    rc = -1;
20023604:	00bfffc4 	movi	r2,-1
20023608:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002360c:	e0bffb17 	ldw	r2,-20(fp)
}
20023610:	e037883a 	mov	sp,fp
20023614:	dfc00117 	ldw	ra,4(sp)
20023618:	df000017 	ldw	fp,0(sp)
2002361c:	dec00204 	addi	sp,sp,8
20023620:	f800283a 	ret

20023624 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20023624:	defff904 	addi	sp,sp,-28
20023628:	dfc00615 	stw	ra,24(sp)
2002362c:	df000515 	stw	fp,20(sp)
20023630:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20023634:	0009883a 	mov	r4,zero
20023638:	002b5680 	call	2002b568 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002363c:	00245e00 	call	200245e0 <OSInit>
20023640:	01000044 	movi	r4,1
20023644:	0028f300 	call	20028f30 <OSSemCreate>
20023648:	d0a03715 	stw	r2,-32548(gp)
2002364c:	01000044 	movi	r4,1
20023650:	0028f300 	call	20028f30 <OSSemCreate>
20023654:	d0a03915 	stw	r2,-32540(gp)
20023658:	d0a03204 	addi	r2,gp,-32568
2002365c:	e0bffc15 	stw	r2,-16(fp)
20023660:	00800044 	movi	r2,1
20023664:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
20023668:	e0bffd0b 	ldhu	r2,-12(fp)
2002366c:	1009883a 	mov	r4,r2
20023670:	0028f300 	call	20028f30 <OSSemCreate>
20023674:	1007883a 	mov	r3,r2
20023678:	e0bffc17 	ldw	r2,-16(fp)
2002367c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20023680:	002b5a00 	call	2002b5a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20023684:	01800034 	movhi	r6,0
20023688:	31801304 	addi	r6,r6,76
2002368c:	01400034 	movhi	r5,0
20023690:	29401304 	addi	r5,r5,76
20023694:	01000034 	movhi	r4,0
20023698:	21001304 	addi	r4,r4,76
2002369c:	002cad00 	call	2002cad0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
200236a0:	002c6780 	call	2002c678 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
200236a4:	010800f4 	movhi	r4,8195
200236a8:	2131b604 	addi	r4,r4,-14632
200236ac:	002d5c40 	call	2002d5c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
200236b0:	d0a03317 	ldw	r2,-32564(gp)
200236b4:	d0e03417 	ldw	r3,-32560(gp)
200236b8:	d1203517 	ldw	r4,-32556(gp)
200236bc:	200d883a 	mov	r6,r4
200236c0:	180b883a 	mov	r5,r3
200236c4:	1009883a 	mov	r4,r2
200236c8:	00202980 	call	20020298 <main>
200236cc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
200236d0:	01000044 	movi	r4,1
200236d4:	00231600 	call	20023160 <close>
  exit (result);
200236d8:	e13ffb17 	ldw	r4,-20(fp)
200236dc:	002d5d80 	call	2002d5d8 <exit>

200236e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200236e0:	defffe04 	addi	sp,sp,-8
200236e4:	dfc00115 	stw	ra,4(sp)
200236e8:	df000015 	stw	fp,0(sp)
200236ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200236f0:	d0a00917 	ldw	r2,-32732(gp)
200236f4:	10000326 	beq	r2,zero,20023704 <alt_get_errno+0x24>
200236f8:	d0a00917 	ldw	r2,-32732(gp)
200236fc:	103ee83a 	callr	r2
20023700:	00000106 	br	20023708 <alt_get_errno+0x28>
20023704:	d0a03104 	addi	r2,gp,-32572
}
20023708:	e037883a 	mov	sp,fp
2002370c:	dfc00117 	ldw	ra,4(sp)
20023710:	df000017 	ldw	fp,0(sp)
20023714:	dec00204 	addi	sp,sp,8
20023718:	f800283a 	ret

2002371c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002371c:	defff904 	addi	sp,sp,-28
20023720:	dfc00615 	stw	ra,24(sp)
20023724:	df000515 	stw	fp,20(sp)
20023728:	df000504 	addi	fp,sp,20
2002372c:	e13ffd15 	stw	r4,-12(fp)
20023730:	e17ffe15 	stw	r5,-8(fp)
20023734:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20023738:	e0bffd17 	ldw	r2,-12(fp)
2002373c:	10000616 	blt	r2,zero,20023758 <read+0x3c>
20023740:	e0bffd17 	ldw	r2,-12(fp)
20023744:	10c00324 	muli	r3,r2,12
20023748:	00800034 	movhi	r2,0
2002374c:	10827904 	addi	r2,r2,2532
20023750:	1885883a 	add	r2,r3,r2
20023754:	00000106 	br	2002375c <read+0x40>
20023758:	0005883a 	mov	r2,zero
2002375c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20023760:	e0bffb17 	ldw	r2,-20(fp)
20023764:	10002226 	beq	r2,zero,200237f0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20023768:	e0bffb17 	ldw	r2,-20(fp)
2002376c:	10800217 	ldw	r2,8(r2)
20023770:	108000cc 	andi	r2,r2,3
20023774:	10800060 	cmpeqi	r2,r2,1
20023778:	1000181e 	bne	r2,zero,200237dc <read+0xc0>
        (fd->dev->read))
2002377c:	e0bffb17 	ldw	r2,-20(fp)
20023780:	10800017 	ldw	r2,0(r2)
20023784:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20023788:	10001426 	beq	r2,zero,200237dc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002378c:	e0bffb17 	ldw	r2,-20(fp)
20023790:	10800017 	ldw	r2,0(r2)
20023794:	10800517 	ldw	r2,20(r2)
20023798:	e0ffff17 	ldw	r3,-4(fp)
2002379c:	180d883a 	mov	r6,r3
200237a0:	e17ffe17 	ldw	r5,-8(fp)
200237a4:	e13ffb17 	ldw	r4,-20(fp)
200237a8:	103ee83a 	callr	r2
200237ac:	e0bffc15 	stw	r2,-16(fp)
200237b0:	e0bffc17 	ldw	r2,-16(fp)
200237b4:	1000070e 	bge	r2,zero,200237d4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
200237b8:	00236e00 	call	200236e0 <alt_get_errno>
200237bc:	1007883a 	mov	r3,r2
200237c0:	e0bffc17 	ldw	r2,-16(fp)
200237c4:	0085c83a 	sub	r2,zero,r2
200237c8:	18800015 	stw	r2,0(r3)
          return -1;
200237cc:	00bfffc4 	movi	r2,-1
200237d0:	00000c06 	br	20023804 <read+0xe8>
        }
        return rval;
200237d4:	e0bffc17 	ldw	r2,-16(fp)
200237d8:	00000a06 	br	20023804 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
200237dc:	00236e00 	call	200236e0 <alt_get_errno>
200237e0:	1007883a 	mov	r3,r2
200237e4:	00800344 	movi	r2,13
200237e8:	18800015 	stw	r2,0(r3)
200237ec:	00000406 	br	20023800 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
200237f0:	00236e00 	call	200236e0 <alt_get_errno>
200237f4:	1007883a 	mov	r3,r2
200237f8:	00801444 	movi	r2,81
200237fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
20023800:	00bfffc4 	movi	r2,-1
}
20023804:	e037883a 	mov	sp,fp
20023808:	dfc00117 	ldw	ra,4(sp)
2002380c:	df000017 	ldw	fp,0(sp)
20023810:	dec00204 	addi	sp,sp,8
20023814:	f800283a 	ret

20023818 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20023818:	defffe04 	addi	sp,sp,-8
2002381c:	df000115 	stw	fp,4(sp)
20023820:	df000104 	addi	fp,sp,4
20023824:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20023828:	e0bfff17 	ldw	r2,-4(fp)
2002382c:	108000d0 	cmplti	r2,r2,3
20023830:	10000d1e 	bne	r2,zero,20023868 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
20023834:	00800034 	movhi	r2,0
20023838:	10827904 	addi	r2,r2,2532
2002383c:	e0ffff17 	ldw	r3,-4(fp)
20023840:	18c00324 	muli	r3,r3,12
20023844:	10c5883a 	add	r2,r2,r3
20023848:	10800204 	addi	r2,r2,8
2002384c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
20023850:	00800034 	movhi	r2,0
20023854:	10827904 	addi	r2,r2,2532
20023858:	e0ffff17 	ldw	r3,-4(fp)
2002385c:	18c00324 	muli	r3,r3,12
20023860:	10c5883a 	add	r2,r2,r3
20023864:	10000015 	stw	zero,0(r2)
  }
}
20023868:	0001883a 	nop
2002386c:	e037883a 	mov	sp,fp
20023870:	df000017 	ldw	fp,0(sp)
20023874:	dec00104 	addi	sp,sp,4
20023878:	f800283a 	ret

2002387c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002387c:	defff904 	addi	sp,sp,-28
20023880:	df000615 	stw	fp,24(sp)
20023884:	df000604 	addi	fp,sp,24
20023888:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002388c:	0005303a 	rdctl	r2,status
20023890:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20023894:	e0fffe17 	ldw	r3,-8(fp)
20023898:	00bfff84 	movi	r2,-2
2002389c:	1884703a 	and	r2,r3,r2
200238a0:	1001703a 	wrctl	status,r2
  
  return context;
200238a4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
200238a8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
200238ac:	d0a00a17 	ldw	r2,-32728(gp)
200238b0:	10c000c4 	addi	r3,r2,3
200238b4:	00bfff04 	movi	r2,-4
200238b8:	1884703a 	and	r2,r3,r2
200238bc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
200238c0:	d0e00a17 	ldw	r3,-32728(gp)
200238c4:	e0bfff17 	ldw	r2,-4(fp)
200238c8:	1887883a 	add	r3,r3,r2
200238cc:	00810034 	movhi	r2,1024
200238d0:	10800004 	addi	r2,r2,0
200238d4:	10c0062e 	bgeu	r2,r3,200238f0 <sbrk+0x74>
200238d8:	e0bffb17 	ldw	r2,-20(fp)
200238dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200238e0:	e0bffa17 	ldw	r2,-24(fp)
200238e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
200238e8:	00bfffc4 	movi	r2,-1
200238ec:	00000b06 	br	2002391c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
200238f0:	d0a00a17 	ldw	r2,-32728(gp)
200238f4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
200238f8:	d0e00a17 	ldw	r3,-32728(gp)
200238fc:	e0bfff17 	ldw	r2,-4(fp)
20023900:	1885883a 	add	r2,r3,r2
20023904:	d0a00a15 	stw	r2,-32728(gp)
20023908:	e0bffb17 	ldw	r2,-20(fp)
2002390c:	e0bffc15 	stw	r2,-16(fp)
20023910:	e0bffc17 	ldw	r2,-16(fp)
20023914:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
20023918:	e0bffd17 	ldw	r2,-12(fp)
} 
2002391c:	e037883a 	mov	sp,fp
20023920:	df000017 	ldw	fp,0(sp)
20023924:	dec00104 	addi	sp,sp,4
20023928:	f800283a 	ret

2002392c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002392c:	defffe04 	addi	sp,sp,-8
20023930:	dfc00115 	stw	ra,4(sp)
20023934:	df000015 	stw	fp,0(sp)
20023938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002393c:	d0a00917 	ldw	r2,-32732(gp)
20023940:	10000326 	beq	r2,zero,20023950 <alt_get_errno+0x24>
20023944:	d0a00917 	ldw	r2,-32732(gp)
20023948:	103ee83a 	callr	r2
2002394c:	00000106 	br	20023954 <alt_get_errno+0x28>
20023950:	d0a03104 	addi	r2,gp,-32572
}
20023954:	e037883a 	mov	sp,fp
20023958:	dfc00117 	ldw	ra,4(sp)
2002395c:	df000017 	ldw	fp,0(sp)
20023960:	dec00204 	addi	sp,sp,8
20023964:	f800283a 	ret

20023968 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
20023968:	defff904 	addi	sp,sp,-28
2002396c:	dfc00615 	stw	ra,24(sp)
20023970:	df000515 	stw	fp,20(sp)
20023974:	df000504 	addi	fp,sp,20
20023978:	e13ffd15 	stw	r4,-12(fp)
2002397c:	e17ffe15 	stw	r5,-8(fp)
20023980:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20023984:	e0bffd17 	ldw	r2,-12(fp)
20023988:	10000616 	blt	r2,zero,200239a4 <write+0x3c>
2002398c:	e0bffd17 	ldw	r2,-12(fp)
20023990:	10c00324 	muli	r3,r2,12
20023994:	00800034 	movhi	r2,0
20023998:	10827904 	addi	r2,r2,2532
2002399c:	1885883a 	add	r2,r3,r2
200239a0:	00000106 	br	200239a8 <write+0x40>
200239a4:	0005883a 	mov	r2,zero
200239a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
200239ac:	e0bffb17 	ldw	r2,-20(fp)
200239b0:	10002126 	beq	r2,zero,20023a38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
200239b4:	e0bffb17 	ldw	r2,-20(fp)
200239b8:	10800217 	ldw	r2,8(r2)
200239bc:	108000cc 	andi	r2,r2,3
200239c0:	10001826 	beq	r2,zero,20023a24 <write+0xbc>
200239c4:	e0bffb17 	ldw	r2,-20(fp)
200239c8:	10800017 	ldw	r2,0(r2)
200239cc:	10800617 	ldw	r2,24(r2)
200239d0:	10001426 	beq	r2,zero,20023a24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
200239d4:	e0bffb17 	ldw	r2,-20(fp)
200239d8:	10800017 	ldw	r2,0(r2)
200239dc:	10800617 	ldw	r2,24(r2)
200239e0:	e0ffff17 	ldw	r3,-4(fp)
200239e4:	180d883a 	mov	r6,r3
200239e8:	e17ffe17 	ldw	r5,-8(fp)
200239ec:	e13ffb17 	ldw	r4,-20(fp)
200239f0:	103ee83a 	callr	r2
200239f4:	e0bffc15 	stw	r2,-16(fp)
200239f8:	e0bffc17 	ldw	r2,-16(fp)
200239fc:	1000070e 	bge	r2,zero,20023a1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
20023a00:	002392c0 	call	2002392c <alt_get_errno>
20023a04:	1007883a 	mov	r3,r2
20023a08:	e0bffc17 	ldw	r2,-16(fp)
20023a0c:	0085c83a 	sub	r2,zero,r2
20023a10:	18800015 	stw	r2,0(r3)
        return -1;
20023a14:	00bfffc4 	movi	r2,-1
20023a18:	00000c06 	br	20023a4c <write+0xe4>
      }
      return rval;
20023a1c:	e0bffc17 	ldw	r2,-16(fp)
20023a20:	00000a06 	br	20023a4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
20023a24:	002392c0 	call	2002392c <alt_get_errno>
20023a28:	1007883a 	mov	r3,r2
20023a2c:	00800344 	movi	r2,13
20023a30:	18800015 	stw	r2,0(r3)
20023a34:	00000406 	br	20023a48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
20023a38:	002392c0 	call	2002392c <alt_get_errno>
20023a3c:	1007883a 	mov	r3,r2
20023a40:	00801444 	movi	r2,81
20023a44:	18800015 	stw	r2,0(r3)
  }
  return -1;
20023a48:	00bfffc4 	movi	r2,-1
}
20023a4c:	e037883a 	mov	sp,fp
20023a50:	dfc00117 	ldw	ra,4(sp)
20023a54:	df000017 	ldw	fp,0(sp)
20023a58:	dec00204 	addi	sp,sp,8
20023a5c:	f800283a 	ret

20023a60 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
20023a60:	deffdf04 	addi	sp,sp,-132
20023a64:	dfc02015 	stw	ra,128(sp)
20023a68:	df001f15 	stw	fp,124(sp)
20023a6c:	df001f04 	addi	fp,sp,124
20023a70:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
20023a74:	e0bfe204 	addi	r2,fp,-120
20023a78:	100b883a 	mov	r5,r2
20023a7c:	01003fc4 	movi	r4,255
20023a80:	002aeb80 	call	2002aeb8 <OSTaskQuery>
20023a84:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
20023a88:	e0bffe83 	ldbu	r2,-6(fp)
20023a8c:	10803fcc 	andi	r2,r2,255
20023a90:	10001e1e 	bne	r2,zero,20023b0c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
20023a94:	e0bfee83 	ldbu	r2,-70(fp)
20023a98:	10803fcc 	andi	r2,r2,255
20023a9c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
20023aa0:	d0a03717 	ldw	r2,-32548(gp)
20023aa4:	e0fffd04 	addi	r3,fp,-12
20023aa8:	180b883a 	mov	r5,r3
20023aac:	1009883a 	mov	r4,r2
20023ab0:	00296d00 	call	200296d0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
20023ab4:	e0bffe43 	ldbu	r2,-7(fp)
20023ab8:	10803fcc 	andi	r2,r2,255
20023abc:	10000726 	beq	r2,zero,20023adc <__env_lock+0x7c>
20023ac0:	d0a00b17 	ldw	r2,-32724(gp)
20023ac4:	e0ffe117 	ldw	r3,-124(fp)
20023ac8:	1880041e 	bne	r3,r2,20023adc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
20023acc:	d0a03617 	ldw	r2,-32552(gp)
20023ad0:	10800044 	addi	r2,r2,1
20023ad4:	d0a03615 	stw	r2,-32552(gp)
20023ad8:	00000a06 	br	20023b04 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
20023adc:	d0a03717 	ldw	r2,-32548(gp)
20023ae0:	e0fffe84 	addi	r3,fp,-6
20023ae4:	180d883a 	mov	r6,r3
20023ae8:	000b883a 	mov	r5,zero
20023aec:	1009883a 	mov	r4,r2
20023af0:	00292480 	call	20029248 <OSSemPend>
    locks  = 1;
20023af4:	00800044 	movi	r2,1
20023af8:	d0a03615 	stw	r2,-32552(gp)
    lockid = id;
20023afc:	e0bfe117 	ldw	r2,-124(fp)
20023b00:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
20023b04:	0001883a 	nop
20023b08:	00000106 	br	20023b10 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
20023b0c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
20023b10:	e037883a 	mov	sp,fp
20023b14:	dfc00117 	ldw	ra,4(sp)
20023b18:	df000017 	ldw	fp,0(sp)
20023b1c:	dec00204 	addi	sp,sp,8
20023b20:	f800283a 	ret

20023b24 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
20023b24:	defffd04 	addi	sp,sp,-12
20023b28:	dfc00215 	stw	ra,8(sp)
20023b2c:	df000115 	stw	fp,4(sp)
20023b30:	df000104 	addi	fp,sp,4
20023b34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
20023b38:	d0a03617 	ldw	r2,-32552(gp)
20023b3c:	10000b26 	beq	r2,zero,20023b6c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
20023b40:	d0a03617 	ldw	r2,-32552(gp)
20023b44:	10bfffc4 	addi	r2,r2,-1
20023b48:	d0a03615 	stw	r2,-32552(gp)
20023b4c:	d0a03617 	ldw	r2,-32552(gp)
20023b50:	1000071e 	bne	r2,zero,20023b70 <__env_unlock+0x4c>
  {
    lockid = -1;
20023b54:	00bfffc4 	movi	r2,-1
20023b58:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
20023b5c:	d0a03717 	ldw	r2,-32548(gp)
20023b60:	1009883a 	mov	r4,r2
20023b64:	00295c00 	call	200295c0 <OSSemPost>
20023b68:	00000106 	br	20023b70 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
20023b6c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
20023b70:	e037883a 	mov	sp,fp
20023b74:	dfc00117 	ldw	ra,4(sp)
20023b78:	df000017 	ldw	fp,0(sp)
20023b7c:	dec00204 	addi	sp,sp,8
20023b80:	f800283a 	ret

20023b84 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
20023b84:	deffdb04 	addi	sp,sp,-148
20023b88:	dfc02415 	stw	ra,144(sp)
20023b8c:	df002315 	stw	fp,140(sp)
20023b90:	df002304 	addi	fp,sp,140
20023b94:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20023b98:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
20023b9c:	d0a03a43 	ldbu	r2,-32535(gp)
20023ba0:	10803fcc 	andi	r2,r2,255
20023ba4:	10800060 	cmpeqi	r2,r2,1
20023ba8:	10003626 	beq	r2,zero,20023c84 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
20023bac:	e0bfe204 	addi	r2,fp,-120
20023bb0:	100b883a 	mov	r5,r2
20023bb4:	01003fc4 	movi	r4,255
20023bb8:	002aeb80 	call	2002aeb8 <OSTaskQuery>
20023bbc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
20023bc0:	e0bffe83 	ldbu	r2,-6(fp)
20023bc4:	10803fcc 	andi	r2,r2,255
20023bc8:	1000301e 	bne	r2,zero,20023c8c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
20023bcc:	e0bfee83 	ldbu	r2,-70(fp)
20023bd0:	10803fcc 	andi	r2,r2,255
20023bd4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
20023bd8:	d0a03917 	ldw	r2,-32540(gp)
20023bdc:	e0fffd04 	addi	r3,fp,-12
20023be0:	180b883a 	mov	r5,r3
20023be4:	1009883a 	mov	r4,r2
20023be8:	00296d00 	call	200296d0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20023bec:	0005303a 	rdctl	r2,status
20023bf0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20023bf4:	e0ffe117 	ldw	r3,-124(fp)
20023bf8:	00bfff84 	movi	r2,-2
20023bfc:	1884703a 	and	r2,r3,r2
20023c00:	1001703a 	wrctl	status,r2
  
  return context;
20023c04:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
20023c08:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
20023c0c:	e0bffd0b 	ldhu	r2,-12(fp)
20023c10:	10bfffcc 	andi	r2,r2,65535
20023c14:	10000b1e 	bne	r2,zero,20023c44 <__malloc_lock+0xc0>
20023c18:	d0a00c17 	ldw	r2,-32720(gp)
20023c1c:	e0ffde17 	ldw	r3,-136(fp)
20023c20:	1880081e 	bne	r3,r2,20023c44 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
20023c24:	d0a03817 	ldw	r2,-32544(gp)
20023c28:	10800044 	addi	r2,r2,1
20023c2c:	d0a03815 	stw	r2,-32544(gp)
20023c30:	e0bfdd17 	ldw	r2,-140(fp)
20023c34:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20023c38:	e0bfdf17 	ldw	r2,-132(fp)
20023c3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
20023c40:	00000e06 	br	20023c7c <__malloc_lock+0xf8>
20023c44:	e0bfdd17 	ldw	r2,-140(fp)
20023c48:	e0bfe015 	stw	r2,-128(fp)
20023c4c:	e0bfe017 	ldw	r2,-128(fp)
20023c50:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
20023c54:	d0a03917 	ldw	r2,-32540(gp)
20023c58:	e0fffe84 	addi	r3,fp,-6
20023c5c:	180d883a 	mov	r6,r3
20023c60:	000b883a 	mov	r5,zero
20023c64:	1009883a 	mov	r4,r2
20023c68:	00292480 	call	20029248 <OSSemPend>
    locks  = 1;
20023c6c:	00800044 	movi	r2,1
20023c70:	d0a03815 	stw	r2,-32544(gp)
    lockid = id;
20023c74:	e0bfde17 	ldw	r2,-136(fp)
20023c78:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
20023c7c:	0001883a 	nop
20023c80:	00000306 	br	20023c90 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
20023c84:	0001883a 	nop
20023c88:	00000106 	br	20023c90 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
20023c8c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
20023c90:	e037883a 	mov	sp,fp
20023c94:	dfc00117 	ldw	ra,4(sp)
20023c98:	df000017 	ldw	fp,0(sp)
20023c9c:	dec00204 	addi	sp,sp,8
20023ca0:	f800283a 	ret

20023ca4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20023ca4:	defff804 	addi	sp,sp,-32
20023ca8:	dfc00715 	stw	ra,28(sp)
20023cac:	df000615 	stw	fp,24(sp)
20023cb0:	df000604 	addi	fp,sp,24
20023cb4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20023cb8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
20023cbc:	d0a03a43 	ldbu	r2,-32535(gp)
20023cc0:	10803fcc 	andi	r2,r2,255
20023cc4:	10800060 	cmpeqi	r2,r2,1
20023cc8:	10002326 	beq	r2,zero,20023d58 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20023ccc:	0005303a 	rdctl	r2,status
20023cd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20023cd4:	e0fffe17 	ldw	r3,-8(fp)
20023cd8:	00bfff84 	movi	r2,-2
20023cdc:	1884703a 	and	r2,r3,r2
20023ce0:	1001703a 	wrctl	status,r2
  
  return context;
20023ce4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
20023ce8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
20023cec:	d0a03817 	ldw	r2,-32544(gp)
20023cf0:	1000051e 	bne	r2,zero,20023d08 <__malloc_unlock+0x64>
20023cf4:	e0bffa17 	ldw	r2,-24(fp)
20023cf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20023cfc:	e0bffb17 	ldw	r2,-20(fp)
20023d00:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
20023d04:	00001506 	br	20023d5c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
20023d08:	d0a03817 	ldw	r2,-32544(gp)
20023d0c:	10bfffc4 	addi	r2,r2,-1
20023d10:	d0a03815 	stw	r2,-32544(gp)
20023d14:	d0a03817 	ldw	r2,-32544(gp)
20023d18:	10000a1e 	bne	r2,zero,20023d44 <__malloc_unlock+0xa0>
  {
    lockid = -1;
20023d1c:	00bfffc4 	movi	r2,-1
20023d20:	d0a00c15 	stw	r2,-32720(gp)
20023d24:	e0bffa17 	ldw	r2,-24(fp)
20023d28:	e0bffc15 	stw	r2,-16(fp)
20023d2c:	e0bffc17 	ldw	r2,-16(fp)
20023d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
20023d34:	d0a03917 	ldw	r2,-32540(gp)
20023d38:	1009883a 	mov	r4,r2
20023d3c:	00295c00 	call	200295c0 <OSSemPost>
20023d40:	00000606 	br	20023d5c <__malloc_unlock+0xb8>
20023d44:	e0bffa17 	ldw	r2,-24(fp)
20023d48:	e0bffd15 	stw	r2,-12(fp)
20023d4c:	e0bffd17 	ldw	r2,-12(fp)
20023d50:	1001703a 	wrctl	status,r2
20023d54:	00000106 	br	20023d5c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
20023d58:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
20023d5c:	e037883a 	mov	sp,fp
20023d60:	dfc00117 	ldw	ra,4(sp)
20023d64:	df000017 	ldw	fp,0(sp)
20023d68:	dec00204 	addi	sp,sp,8
20023d6c:	f800283a 	ret

20023d70 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
20023d70:	defff704 	addi	sp,sp,-36
20023d74:	dfc00815 	stw	ra,32(sp)
20023d78:	df000715 	stw	fp,28(sp)
20023d7c:	df000704 	addi	fp,sp,28
20023d80:	e13ffd15 	stw	r4,-12(fp)
20023d84:	e17ffe15 	stw	r5,-8(fp)
20023d88:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20023d8c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20023d90:	e0bfff17 	ldw	r2,-4(fp)
20023d94:	1000021e 	bne	r2,zero,20023da0 <OSEventNameGet+0x30>
        return (0);
20023d98:	0005883a 	mov	r2,zero
20023d9c:	00003706 	br	20023e7c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
20023da0:	e0bffd17 	ldw	r2,-12(fp)
20023da4:	1000051e 	bne	r2,zero,20023dbc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
20023da8:	e0bfff17 	ldw	r2,-4(fp)
20023dac:	00c00104 	movi	r3,4
20023db0:	10c00005 	stb	r3,0(r2)
        return (0);
20023db4:	0005883a 	mov	r2,zero
20023db8:	00003006 	br	20023e7c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20023dbc:	e0bffe17 	ldw	r2,-8(fp)
20023dc0:	1000051e 	bne	r2,zero,20023dd8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
20023dc4:	e0bfff17 	ldw	r2,-4(fp)
20023dc8:	00c00304 	movi	r3,12
20023dcc:	10c00005 	stb	r3,0(r2)
        return (0);
20023dd0:	0005883a 	mov	r2,zero
20023dd4:	00002906 	br	20023e7c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20023dd8:	d0a04803 	ldbu	r2,-32480(gp)
20023ddc:	10803fcc 	andi	r2,r2,255
20023de0:	10000526 	beq	r2,zero,20023df8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
20023de4:	e0bfff17 	ldw	r2,-4(fp)
20023de8:	00c00444 	movi	r3,17
20023dec:	10c00005 	stb	r3,0(r2)
        return (0);
20023df0:	0005883a 	mov	r2,zero
20023df4:	00002106 	br	20023e7c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
20023df8:	e0bffd17 	ldw	r2,-12(fp)
20023dfc:	10800003 	ldbu	r2,0(r2)
20023e00:	10803fcc 	andi	r2,r2,255
20023e04:	10bfffc4 	addi	r2,r2,-1
20023e08:	10800128 	cmpgeui	r2,r2,4
20023e0c:	10000526 	beq	r2,zero,20023e24 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
20023e10:	e0bfff17 	ldw	r2,-4(fp)
20023e14:	00c00044 	movi	r3,1
20023e18:	10c00005 	stb	r3,0(r2)
             return (0);
20023e1c:	0005883a 	mov	r2,zero
20023e20:	00001606 	br	20023e7c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
20023e24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20023e28:	0005303a 	rdctl	r2,status
20023e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20023e30:	e0fffb17 	ldw	r3,-20(fp)
20023e34:	00bfff84 	movi	r2,-2
20023e38:	1884703a 	and	r2,r3,r2
20023e3c:	1001703a 	wrctl	status,r2
  
  return context;
20023e40:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
20023e44:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
20023e48:	e0bffd17 	ldw	r2,-12(fp)
20023e4c:	10800384 	addi	r2,r2,14
20023e50:	100b883a 	mov	r5,r2
20023e54:	e13ffe17 	ldw	r4,-8(fp)
20023e58:	00257f40 	call	200257f4 <OS_StrCopy>
20023e5c:	e0bffa05 	stb	r2,-24(fp)
20023e60:	e0bff917 	ldw	r2,-28(fp)
20023e64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20023e68:	e0bffc17 	ldw	r2,-16(fp)
20023e6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20023e70:	e0bfff17 	ldw	r2,-4(fp)
20023e74:	10000005 	stb	zero,0(r2)
    return (len);
20023e78:	e0bffa03 	ldbu	r2,-24(fp)
}
20023e7c:	e037883a 	mov	sp,fp
20023e80:	dfc00117 	ldw	ra,4(sp)
20023e84:	df000017 	ldw	fp,0(sp)
20023e88:	dec00204 	addi	sp,sp,8
20023e8c:	f800283a 	ret

20023e90 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
20023e90:	defff604 	addi	sp,sp,-40
20023e94:	dfc00915 	stw	ra,36(sp)
20023e98:	df000815 	stw	fp,32(sp)
20023e9c:	df000804 	addi	fp,sp,32
20023ea0:	e13ffd15 	stw	r4,-12(fp)
20023ea4:	e17ffe15 	stw	r5,-8(fp)
20023ea8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20023eac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20023eb0:	e0bfff17 	ldw	r2,-4(fp)
20023eb4:	10004026 	beq	r2,zero,20023fb8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
20023eb8:	e0bffd17 	ldw	r2,-12(fp)
20023ebc:	1000041e 	bne	r2,zero,20023ed0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
20023ec0:	e0bfff17 	ldw	r2,-4(fp)
20023ec4:	00c00104 	movi	r3,4
20023ec8:	10c00005 	stb	r3,0(r2)
        return;
20023ecc:	00003b06 	br	20023fbc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20023ed0:	e0bffe17 	ldw	r2,-8(fp)
20023ed4:	1000041e 	bne	r2,zero,20023ee8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
20023ed8:	e0bfff17 	ldw	r2,-4(fp)
20023edc:	00c00304 	movi	r3,12
20023ee0:	10c00005 	stb	r3,0(r2)
        return;
20023ee4:	00003506 	br	20023fbc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20023ee8:	d0a04803 	ldbu	r2,-32480(gp)
20023eec:	10803fcc 	andi	r2,r2,255
20023ef0:	10000426 	beq	r2,zero,20023f04 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20023ef4:	e0bfff17 	ldw	r2,-4(fp)
20023ef8:	00c00484 	movi	r3,18
20023efc:	10c00005 	stb	r3,0(r2)
        return;
20023f00:	00002e06 	br	20023fbc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
20023f04:	e0bffd17 	ldw	r2,-12(fp)
20023f08:	10800003 	ldbu	r2,0(r2)
20023f0c:	10803fcc 	andi	r2,r2,255
20023f10:	10bfffc4 	addi	r2,r2,-1
20023f14:	10800128 	cmpgeui	r2,r2,4
20023f18:	10000426 	beq	r2,zero,20023f2c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
20023f1c:	e0bfff17 	ldw	r2,-4(fp)
20023f20:	00c00044 	movi	r3,1
20023f24:	10c00005 	stb	r3,0(r2)
             return;
20023f28:	00002406 	br	20023fbc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
20023f2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20023f30:	0005303a 	rdctl	r2,status
20023f34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20023f38:	e0fffc17 	ldw	r3,-16(fp)
20023f3c:	00bfff84 	movi	r2,-2
20023f40:	1884703a 	and	r2,r3,r2
20023f44:	1001703a 	wrctl	status,r2
  
  return context;
20023f48:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
20023f4c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
20023f50:	e13ffe17 	ldw	r4,-8(fp)
20023f54:	00258680 	call	20025868 <OS_StrLen>
20023f58:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
20023f5c:	e0bffa03 	ldbu	r2,-24(fp)
20023f60:	10800830 	cmpltui	r2,r2,32
20023f64:	1000081e 	bne	r2,zero,20023f88 <OSEventNameSet+0xf8>
20023f68:	e0bff817 	ldw	r2,-32(fp)
20023f6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20023f70:	e0bff917 	ldw	r2,-28(fp)
20023f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
20023f78:	e0bfff17 	ldw	r2,-4(fp)
20023f7c:	00c002c4 	movi	r3,11
20023f80:	10c00005 	stb	r3,0(r2)
        return;
20023f84:	00000d06 	br	20023fbc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
20023f88:	e0bffd17 	ldw	r2,-12(fp)
20023f8c:	10800384 	addi	r2,r2,14
20023f90:	e17ffe17 	ldw	r5,-8(fp)
20023f94:	1009883a 	mov	r4,r2
20023f98:	00257f40 	call	200257f4 <OS_StrCopy>
20023f9c:	e0bff817 	ldw	r2,-32(fp)
20023fa0:	e0bffb15 	stw	r2,-20(fp)
20023fa4:	e0bffb17 	ldw	r2,-20(fp)
20023fa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20023fac:	e0bfff17 	ldw	r2,-4(fp)
20023fb0:	10000005 	stb	zero,0(r2)
20023fb4:	00000106 	br	20023fbc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20023fb8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
20023fbc:	e037883a 	mov	sp,fp
20023fc0:	dfc00117 	ldw	ra,4(sp)
20023fc4:	df000017 	ldw	fp,0(sp)
20023fc8:	dec00204 	addi	sp,sp,8
20023fcc:	f800283a 	ret

20023fd0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
20023fd0:	deffed04 	addi	sp,sp,-76
20023fd4:	dfc01215 	stw	ra,72(sp)
20023fd8:	df001115 	stw	fp,68(sp)
20023fdc:	df001104 	addi	fp,sp,68
20023fe0:	e13ffc15 	stw	r4,-16(fp)
20023fe4:	e17ffd15 	stw	r5,-12(fp)
20023fe8:	e1bffe15 	stw	r6,-8(fp)
20023fec:	3805883a 	mov	r2,r7
20023ff0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
20023ff4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
20023ff8:	e0800217 	ldw	r2,8(fp)
20023ffc:	1000021e 	bne	r2,zero,20024008 <OSEventPendMulti+0x38>
        return (0);
20024000:	0005883a 	mov	r2,zero
20024004:	00017106 	br	200245cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
20024008:	e0bffc17 	ldw	r2,-16(fp)
2002400c:	1000051e 	bne	r2,zero,20024024 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
20024010:	e0800217 	ldw	r2,8(fp)
20024014:	00c00104 	movi	r3,4
20024018:	10c00005 	stb	r3,0(r2)
        return (0);
2002401c:	0005883a 	mov	r2,zero
20024020:	00016a06 	br	200245cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
20024024:	e0bffd17 	ldw	r2,-12(fp)
20024028:	1000051e 	bne	r2,zero,20024040 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
2002402c:	e0800217 	ldw	r2,8(fp)
20024030:	00c00104 	movi	r3,4
20024034:	10c00005 	stb	r3,0(r2)
        return (0);
20024038:	0005883a 	mov	r2,zero
2002403c:	00016306 	br	200245cc <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
20024040:	e0bffe17 	ldw	r2,-8(fp)
20024044:	1000051e 	bne	r2,zero,2002405c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
20024048:	e0800217 	ldw	r2,8(fp)
2002404c:	00c00104 	movi	r3,4
20024050:	10c00005 	stb	r3,0(r2)
        return (0);
20024054:	0005883a 	mov	r2,zero
20024058:	00015c06 	br	200245cc <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
2002405c:	e0bffd17 	ldw	r2,-12(fp)
20024060:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
20024064:	e0bffc17 	ldw	r2,-16(fp)
20024068:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
2002406c:	e0bfef17 	ldw	r2,-68(fp)
20024070:	10800017 	ldw	r2,0(r2)
20024074:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
20024078:	00001906 	br	200240e0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
2002407c:	e0bff017 	ldw	r2,-64(fp)
20024080:	10800003 	ldbu	r2,0(r2)
20024084:	10803fcc 	andi	r2,r2,255
20024088:	10c000a0 	cmpeqi	r3,r2,2
2002408c:	1800091e 	bne	r3,zero,200240b4 <OSEventPendMulti+0xe4>
20024090:	10c000e0 	cmpeqi	r3,r2,3
20024094:	1800091e 	bne	r3,zero,200240bc <OSEventPendMulti+0xec>
20024098:	10800060 	cmpeqi	r2,r2,1
2002409c:	1000091e 	bne	r2,zero,200240c4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
200240a0:	e0800217 	ldw	r2,8(fp)
200240a4:	00c00044 	movi	r3,1
200240a8:	10c00005 	stb	r3,0(r2)
                 return (0);
200240ac:	0005883a 	mov	r2,zero
200240b0:	00014606 	br	200245cc <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
200240b4:	0001883a 	nop
200240b8:	00000306 	br	200240c8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
200240bc:	0001883a 	nop
200240c0:	00000106 	br	200240c8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
200240c4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
200240c8:	e0bfef17 	ldw	r2,-68(fp)
200240cc:	10800104 	addi	r2,r2,4
200240d0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
200240d4:	e0bfef17 	ldw	r2,-68(fp)
200240d8:	10800017 	ldw	r2,0(r2)
200240dc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
200240e0:	e0bff017 	ldw	r2,-64(fp)
200240e4:	103fe51e 	bne	r2,zero,2002407c <__flash_rwdata_start+0xffff6594>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
200240e8:	d0a04803 	ldbu	r2,-32480(gp)
200240ec:	10803fcc 	andi	r2,r2,255
200240f0:	10000526 	beq	r2,zero,20024108 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
200240f4:	e0800217 	ldw	r2,8(fp)
200240f8:	00c00084 	movi	r3,2
200240fc:	10c00005 	stb	r3,0(r2)
        return (0);
20024100:	0005883a 	mov	r2,zero
20024104:	00013106 	br	200245cc <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
20024108:	d0a03a03 	ldbu	r2,-32536(gp)
2002410c:	10803fcc 	andi	r2,r2,255
20024110:	10000526 	beq	r2,zero,20024128 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
20024114:	e0800217 	ldw	r2,8(fp)
20024118:	00c00344 	movi	r3,13
2002411c:	10c00005 	stb	r3,0(r2)
        return (0);
20024120:	0005883a 	mov	r2,zero
20024124:	00012906 	br	200245cc <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20024128:	0005303a 	rdctl	r2,status
2002412c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024130:	e0fffb17 	ldw	r3,-20(fp)
20024134:	00bfff84 	movi	r2,-2
20024138:	1884703a 	and	r2,r3,r2
2002413c:	1001703a 	wrctl	status,r2
  
  return context;
20024140:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
20024144:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
20024148:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
2002414c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
20024150:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
20024154:	e0bffc17 	ldw	r2,-16(fp)
20024158:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
2002415c:	e0bfef17 	ldw	r2,-68(fp)
20024160:	10800017 	ldw	r2,0(r2)
20024164:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
20024168:	00008106 	br	20024370 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
2002416c:	e0bff017 	ldw	r2,-64(fp)
20024170:	10800003 	ldbu	r2,0(r2)
20024174:	10803fcc 	andi	r2,r2,255
20024178:	10c000a0 	cmpeqi	r3,r2,2
2002417c:	18003c1e 	bne	r3,zero,20024270 <OSEventPendMulti+0x2a0>
20024180:	10c000e0 	cmpeqi	r3,r2,3
20024184:	1800031e 	bne	r3,zero,20024194 <OSEventPendMulti+0x1c4>
20024188:	10800060 	cmpeqi	r2,r2,1
2002418c:	10001e1e 	bne	r2,zero,20024208 <OSEventPendMulti+0x238>
20024190:	00006606 	br	2002432c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
20024194:	e0bff017 	ldw	r2,-64(fp)
20024198:	1080020b 	ldhu	r2,8(r2)
2002419c:	10bfffcc 	andi	r2,r2,65535
200241a0:	10001526 	beq	r2,zero,200241f8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
200241a4:	e0bff017 	ldw	r2,-64(fp)
200241a8:	1080020b 	ldhu	r2,8(r2)
200241ac:	10bfffc4 	addi	r2,r2,-1
200241b0:	1007883a 	mov	r3,r2
200241b4:	e0bff017 	ldw	r2,-64(fp)
200241b8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
200241bc:	e0bffd17 	ldw	r2,-12(fp)
200241c0:	10c00104 	addi	r3,r2,4
200241c4:	e0fffd15 	stw	r3,-12(fp)
200241c8:	e0fff017 	ldw	r3,-64(fp)
200241cc:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
200241d0:	00800044 	movi	r2,1
200241d4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
200241d8:	e0bffe17 	ldw	r2,-8(fp)
200241dc:	10c00104 	addi	r3,r2,4
200241e0:	e0fffe15 	stw	r3,-8(fp)
200241e4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
200241e8:	e0bff18b 	ldhu	r2,-58(fp)
200241ec:	10800044 	addi	r2,r2,1
200241f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
200241f4:	00005806 	br	20024358 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
200241f8:	e0bff203 	ldbu	r2,-56(fp)
200241fc:	10800054 	ori	r2,r2,1
20024200:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
20024204:	00005406 	br	20024358 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
20024208:	e0bff017 	ldw	r2,-64(fp)
2002420c:	10800117 	ldw	r2,4(r2)
20024210:	10001326 	beq	r2,zero,20024260 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
20024214:	e0bffe17 	ldw	r2,-8(fp)
20024218:	10c00104 	addi	r3,r2,4
2002421c:	e0fffe15 	stw	r3,-8(fp)
20024220:	e0fff017 	ldw	r3,-64(fp)
20024224:	18c00117 	ldw	r3,4(r3)
20024228:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
2002422c:	e0bff017 	ldw	r2,-64(fp)
20024230:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
20024234:	e0bffd17 	ldw	r2,-12(fp)
20024238:	10c00104 	addi	r3,r2,4
2002423c:	e0fffd15 	stw	r3,-12(fp)
20024240:	e0fff017 	ldw	r3,-64(fp)
20024244:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
20024248:	00800044 	movi	r2,1
2002424c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
20024250:	e0bff18b 	ldhu	r2,-58(fp)
20024254:	10800044 	addi	r2,r2,1
20024258:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
2002425c:	00003e06 	br	20024358 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
20024260:	e0bff203 	ldbu	r2,-56(fp)
20024264:	10800094 	ori	r2,r2,2
20024268:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
2002426c:	00003a06 	br	20024358 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
20024270:	e0bff017 	ldw	r2,-64(fp)
20024274:	10800117 	ldw	r2,4(r2)
20024278:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
2002427c:	e0bff517 	ldw	r2,-44(fp)
20024280:	1080058b 	ldhu	r2,22(r2)
20024284:	10bfffcc 	andi	r2,r2,65535
20024288:	10002426 	beq	r2,zero,2002431c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
2002428c:	e0bffe17 	ldw	r2,-8(fp)
20024290:	10c00104 	addi	r3,r2,4
20024294:	e0fffe15 	stw	r3,-8(fp)
20024298:	e0fff517 	ldw	r3,-44(fp)
2002429c:	18c00417 	ldw	r3,16(r3)
200242a0:	19400104 	addi	r5,r3,4
200242a4:	e13ff517 	ldw	r4,-44(fp)
200242a8:	21400415 	stw	r5,16(r4)
200242ac:	18c00017 	ldw	r3,0(r3)
200242b0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
200242b4:	e0bff517 	ldw	r2,-44(fp)
200242b8:	10c00417 	ldw	r3,16(r2)
200242bc:	e0bff517 	ldw	r2,-44(fp)
200242c0:	10800217 	ldw	r2,8(r2)
200242c4:	1880041e 	bne	r3,r2,200242d8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
200242c8:	e0bff517 	ldw	r2,-44(fp)
200242cc:	10c00117 	ldw	r3,4(r2)
200242d0:	e0bff517 	ldw	r2,-44(fp)
200242d4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
200242d8:	e0bff517 	ldw	r2,-44(fp)
200242dc:	1080058b 	ldhu	r2,22(r2)
200242e0:	10bfffc4 	addi	r2,r2,-1
200242e4:	1007883a 	mov	r3,r2
200242e8:	e0bff517 	ldw	r2,-44(fp)
200242ec:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
200242f0:	e0bffd17 	ldw	r2,-12(fp)
200242f4:	10c00104 	addi	r3,r2,4
200242f8:	e0fffd15 	stw	r3,-12(fp)
200242fc:	e0fff017 	ldw	r3,-64(fp)
20024300:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
20024304:	00800044 	movi	r2,1
20024308:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
2002430c:	e0bff18b 	ldhu	r2,-58(fp)
20024310:	10800044 	addi	r2,r2,1
20024314:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
20024318:	00000f06 	br	20024358 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
2002431c:	e0bff203 	ldbu	r2,-56(fp)
20024320:	10800114 	ori	r2,r2,4
20024324:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
20024328:	00000b06 	br	20024358 <OSEventPendMulti+0x388>
2002432c:	e0bff317 	ldw	r2,-52(fp)
20024330:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20024334:	e0bff417 	ldw	r2,-48(fp)
20024338:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
2002433c:	e0bffd17 	ldw	r2,-12(fp)
20024340:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
20024344:	e0800217 	ldw	r2,8(fp)
20024348:	00c00044 	movi	r3,1
2002434c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
20024350:	e0bff18b 	ldhu	r2,-58(fp)
20024354:	00009d06 	br	200245cc <OSEventPendMulti+0x5fc>
        }
        pevents++;
20024358:	e0bfef17 	ldw	r2,-68(fp)
2002435c:	10800104 	addi	r2,r2,4
20024360:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
20024364:	e0bfef17 	ldw	r2,-68(fp)
20024368:	10800017 	ldw	r2,0(r2)
2002436c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
20024370:	e0bff017 	ldw	r2,-64(fp)
20024374:	103f7d1e 	bne	r2,zero,2002416c <__flash_rwdata_start+0xffff6684>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
20024378:	e0bff103 	ldbu	r2,-60(fp)
2002437c:	10800058 	cmpnei	r2,r2,1
20024380:	10000a1e 	bne	r2,zero,200243ac <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
20024384:	e0bffd17 	ldw	r2,-12(fp)
20024388:	10000015 	stw	zero,0(r2)
2002438c:	e0bff317 	ldw	r2,-52(fp)
20024390:	e0bff615 	stw	r2,-40(fp)
20024394:	e0bff617 	ldw	r2,-40(fp)
20024398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
2002439c:	e0800217 	ldw	r2,8(fp)
200243a0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
200243a4:	e0bff18b 	ldhu	r2,-58(fp)
200243a8:	00008806 	br	200245cc <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
200243ac:	d0a04917 	ldw	r2,-32476(gp)
200243b0:	d0e04917 	ldw	r3,-32476(gp)
200243b4:	19000c03 	ldbu	r4,48(r3)
200243b8:	e0fff203 	ldbu	r3,-56(fp)
200243bc:	20c6b03a 	or	r3,r4,r3
200243c0:	1809883a 	mov	r4,r3
200243c4:	00ffe004 	movi	r3,-128
200243c8:	20c6b03a 	or	r3,r4,r3
200243cc:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
200243d0:	d0a04917 	ldw	r2,-32476(gp)
200243d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
200243d8:	d0a04917 	ldw	r2,-32476(gp)
200243dc:	e0ffff0b 	ldhu	r3,-4(fp)
200243e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
200243e4:	e13ffc17 	ldw	r4,-16(fp)
200243e8:	0024f0c0 	call	20024f0c <OS_EventTaskWaitMulti>
200243ec:	e0bff317 	ldw	r2,-52(fp)
200243f0:	e0bff915 	stw	r2,-28(fp)
200243f4:	e0bff917 	ldw	r2,-28(fp)
200243f8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
200243fc:	00256b00 	call	200256b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20024400:	0005303a 	rdctl	r2,status
20024404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024408:	e0fff717 	ldw	r3,-36(fp)
2002440c:	00bfff84 	movi	r2,-2
20024410:	1884703a 	and	r2,r3,r2
20024414:	1001703a 	wrctl	status,r2
  
  return context;
20024418:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
2002441c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
20024420:	d0a04917 	ldw	r2,-32476(gp)
20024424:	10800c43 	ldbu	r2,49(r2)
20024428:	10803fcc 	andi	r2,r2,255
2002442c:	10000226 	beq	r2,zero,20024438 <OSEventPendMulti+0x468>
20024430:	108000a0 	cmpeqi	r2,r2,2
20024434:	10001826 	beq	r2,zero,20024498 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
20024438:	d0a04917 	ldw	r2,-32476(gp)
2002443c:	10800717 	ldw	r2,28(r2)
20024440:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
20024444:	e0bff017 	ldw	r2,-64(fp)
20024448:	10000b26 	beq	r2,zero,20024478 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
2002444c:	e0bffd17 	ldw	r2,-12(fp)
20024450:	10c00104 	addi	r3,r2,4
20024454:	e0fffd15 	stw	r3,-12(fp)
20024458:	e0fff017 	ldw	r3,-64(fp)
2002445c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
20024460:	e0bffd17 	ldw	r2,-12(fp)
20024464:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
20024468:	e0bff18b 	ldhu	r2,-58(fp)
2002446c:	10800044 	addi	r2,r2,1
20024470:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
20024474:	00000d06 	br	200244ac <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
20024478:	d0a04917 	ldw	r2,-32476(gp)
2002447c:	00c00044 	movi	r3,1
20024480:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
20024484:	d0a04917 	ldw	r2,-32476(gp)
20024488:	e17ffc17 	ldw	r5,-16(fp)
2002448c:	1009883a 	mov	r4,r2
20024490:	00251140 	call	20025114 <OS_EventTaskRemoveMulti>
             }
			 break;
20024494:	00000506 	br	200244ac <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
20024498:	d0a04917 	ldw	r2,-32476(gp)
2002449c:	e17ffc17 	ldw	r5,-16(fp)
200244a0:	1009883a 	mov	r4,r2
200244a4:	00251140 	call	20025114 <OS_EventTaskRemoveMulti>
             break;
200244a8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
200244ac:	d0a04917 	ldw	r2,-32476(gp)
200244b0:	10800c43 	ldbu	r2,49(r2)
200244b4:	10803fcc 	andi	r2,r2,255
200244b8:	10000326 	beq	r2,zero,200244c8 <OSEventPendMulti+0x4f8>
200244bc:	108000a0 	cmpeqi	r2,r2,2
200244c0:	1000231e 	bne	r2,zero,20024550 <OSEventPendMulti+0x580>
200244c4:	00002a06 	br	20024570 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
200244c8:	e0bff017 	ldw	r2,-64(fp)
200244cc:	10800003 	ldbu	r2,0(r2)
200244d0:	10803fcc 	andi	r2,r2,255
200244d4:	0080100e 	bge	zero,r2,20024518 <OSEventPendMulti+0x548>
200244d8:	10c000d0 	cmplti	r3,r2,3
200244dc:	1800071e 	bne	r3,zero,200244fc <OSEventPendMulti+0x52c>
200244e0:	108000e0 	cmpeqi	r2,r2,3
200244e4:	10000c26 	beq	r2,zero,20024518 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
200244e8:	e0bffe17 	ldw	r2,-8(fp)
200244ec:	10c00104 	addi	r3,r2,4
200244f0:	e0fffe15 	stw	r3,-8(fp)
200244f4:	10000015 	stw	zero,0(r2)
                      break;
200244f8:	00001206 	br	20024544 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
200244fc:	e0bffe17 	ldw	r2,-8(fp)
20024500:	10c00104 	addi	r3,r2,4
20024504:	e0fffe15 	stw	r3,-8(fp)
20024508:	d0e04917 	ldw	r3,-32476(gp)
2002450c:	18c00917 	ldw	r3,36(r3)
20024510:	10c00015 	stw	r3,0(r2)
                      break;
20024514:	00000b06 	br	20024544 <OSEventPendMulti+0x574>
20024518:	e0bff317 	ldw	r2,-52(fp)
2002451c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20024520:	e0bff817 	ldw	r2,-32(fp)
20024524:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
20024528:	e0bffd17 	ldw	r2,-12(fp)
2002452c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
20024530:	e0800217 	ldw	r2,8(fp)
20024534:	00c00044 	movi	r3,1
20024538:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
2002453c:	e0bff18b 	ldhu	r2,-58(fp)
20024540:	00002206 	br	200245cc <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
20024544:	e0800217 	ldw	r2,8(fp)
20024548:	10000005 	stb	zero,0(r2)
             break;
2002454c:	00001006 	br	20024590 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
20024550:	e0bffe17 	ldw	r2,-8(fp)
20024554:	10c00104 	addi	r3,r2,4
20024558:	e0fffe15 	stw	r3,-8(fp)
2002455c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
20024560:	e0800217 	ldw	r2,8(fp)
20024564:	00c00384 	movi	r3,14
20024568:	10c00005 	stb	r3,0(r2)
             break;
2002456c:	00000806 	br	20024590 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
20024570:	e0bffe17 	ldw	r2,-8(fp)
20024574:	10c00104 	addi	r3,r2,4
20024578:	e0fffe15 	stw	r3,-8(fp)
2002457c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
20024580:	e0800217 	ldw	r2,8(fp)
20024584:	00c00284 	movi	r3,10
20024588:	10c00005 	stb	r3,0(r2)
             break;
2002458c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
20024590:	d0a04917 	ldw	r2,-32476(gp)
20024594:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
20024598:	d0a04917 	ldw	r2,-32476(gp)
2002459c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
200245a0:	d0a04917 	ldw	r2,-32476(gp)
200245a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
200245a8:	d0a04917 	ldw	r2,-32476(gp)
200245ac:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
200245b0:	d0a04917 	ldw	r2,-32476(gp)
200245b4:	10000915 	stw	zero,36(r2)
200245b8:	e0bff317 	ldw	r2,-52(fp)
200245bc:	e0bffa15 	stw	r2,-24(fp)
200245c0:	e0bffa17 	ldw	r2,-24(fp)
200245c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
200245c8:	e0bff18b 	ldhu	r2,-58(fp)
}
200245cc:	e037883a 	mov	sp,fp
200245d0:	dfc00117 	ldw	ra,4(sp)
200245d4:	df000017 	ldw	fp,0(sp)
200245d8:	dec00204 	addi	sp,sp,8
200245dc:	f800283a 	ret

200245e0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
200245e0:	defffe04 	addi	sp,sp,-8
200245e4:	dfc00115 	stw	ra,4(sp)
200245e8:	df000015 	stw	fp,0(sp)
200245ec:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
200245f0:	002d23c0 	call	2002d23c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
200245f4:	002535c0 	call	2002535c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
200245f8:	00253a40 	call	200253a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
200245fc:	00255100 	call	20025510 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
20024600:	002527c0 	call	2002527c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
20024604:	00273b00 	call	200273b0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
20024608:	0027cb00 	call	20027cb0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
2002460c:	0028dd80 	call	20028dd8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
20024610:	00254100 	call	20025410 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
20024614:	00254900 	call	20025490 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
20024618:	002d25c0 	call	2002d25c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
2002461c:	0025d840 	call	20025d84 <OSDebugInit>
#endif
}
20024620:	0001883a 	nop
20024624:	e037883a 	mov	sp,fp
20024628:	dfc00117 	ldw	ra,4(sp)
2002462c:	df000017 	ldw	fp,0(sp)
20024630:	dec00204 	addi	sp,sp,8
20024634:	f800283a 	ret

20024638 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
20024638:	deffff04 	addi	sp,sp,-4
2002463c:	df000015 	stw	fp,0(sp)
20024640:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
20024644:	d0a03a43 	ldbu	r2,-32535(gp)
20024648:	10803fcc 	andi	r2,r2,255
2002464c:	10800058 	cmpnei	r2,r2,1
20024650:	1000071e 	bne	r2,zero,20024670 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
20024654:	d0a04803 	ldbu	r2,-32480(gp)
20024658:	10803fcc 	andi	r2,r2,255
2002465c:	10803fe0 	cmpeqi	r2,r2,255
20024660:	1000031e 	bne	r2,zero,20024670 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
20024664:	d0a04803 	ldbu	r2,-32480(gp)
20024668:	10800044 	addi	r2,r2,1
2002466c:	d0a04805 	stb	r2,-32480(gp)
        }
    }
}
20024670:	0001883a 	nop
20024674:	e037883a 	mov	sp,fp
20024678:	df000017 	ldw	fp,0(sp)
2002467c:	dec00104 	addi	sp,sp,4
20024680:	f800283a 	ret

20024684 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
20024684:	defffb04 	addi	sp,sp,-20
20024688:	dfc00415 	stw	ra,16(sp)
2002468c:	df000315 	stw	fp,12(sp)
20024690:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20024694:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
20024698:	d0a03a43 	ldbu	r2,-32535(gp)
2002469c:	10803fcc 	andi	r2,r2,255
200246a0:	10800058 	cmpnei	r2,r2,1
200246a4:	10002f1e 	bne	r2,zero,20024764 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200246a8:	0005303a 	rdctl	r2,status
200246ac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200246b0:	e0ffff17 	ldw	r3,-4(fp)
200246b4:	00bfff84 	movi	r2,-2
200246b8:	1884703a 	and	r2,r3,r2
200246bc:	1001703a 	wrctl	status,r2
  
  return context;
200246c0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
200246c4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
200246c8:	d0a04803 	ldbu	r2,-32480(gp)
200246cc:	10803fcc 	andi	r2,r2,255
200246d0:	10000326 	beq	r2,zero,200246e0 <OSIntExit+0x5c>
            OSIntNesting--;
200246d4:	d0a04803 	ldbu	r2,-32480(gp)
200246d8:	10bfffc4 	addi	r2,r2,-1
200246dc:	d0a04805 	stb	r2,-32480(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
200246e0:	d0a04803 	ldbu	r2,-32480(gp)
200246e4:	10803fcc 	andi	r2,r2,255
200246e8:	10001a1e 	bne	r2,zero,20024754 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
200246ec:	d0a03a03 	ldbu	r2,-32536(gp)
200246f0:	10803fcc 	andi	r2,r2,255
200246f4:	1000171e 	bne	r2,zero,20024754 <OSIntExit+0xd0>
                OS_SchedNew();
200246f8:	00257800 	call	20025780 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
200246fc:	d0e03c03 	ldbu	r3,-32528(gp)
20024700:	d0a03c43 	ldbu	r2,-32527(gp)
20024704:	18c03fcc 	andi	r3,r3,255
20024708:	10803fcc 	andi	r2,r2,255
2002470c:	18801126 	beq	r3,r2,20024754 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
20024710:	d0a03c03 	ldbu	r2,-32528(gp)
20024714:	10c03fcc 	andi	r3,r2,255
20024718:	00800074 	movhi	r2,1
2002471c:	10a3c304 	addi	r2,r2,-28916
20024720:	18c7883a 	add	r3,r3,r3
20024724:	18c7883a 	add	r3,r3,r3
20024728:	10c5883a 	add	r2,r2,r3
2002472c:	10800017 	ldw	r2,0(r2)
20024730:	d0a04415 	stw	r2,-32496(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
20024734:	d0a04417 	ldw	r2,-32496(gp)
20024738:	10c00e17 	ldw	r3,56(r2)
2002473c:	18c00044 	addi	r3,r3,1
20024740:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
20024744:	d0a03f17 	ldw	r2,-32516(gp)
20024748:	10800044 	addi	r2,r2,1
2002474c:	d0a03f15 	stw	r2,-32516(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
20024750:	002cf680 	call	2002cf68 <OSCtxSw>
20024754:	e0bffd17 	ldw	r2,-12(fp)
20024758:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002475c:	e0bffe17 	ldw	r2,-8(fp)
20024760:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
20024764:	0001883a 	nop
20024768:	e037883a 	mov	sp,fp
2002476c:	dfc00117 	ldw	ra,4(sp)
20024770:	df000017 	ldw	fp,0(sp)
20024774:	dec00204 	addi	sp,sp,8
20024778:	f800283a 	ret

2002477c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
2002477c:	defffc04 	addi	sp,sp,-16
20024780:	df000315 	stw	fp,12(sp)
20024784:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20024788:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
2002478c:	d0a03a43 	ldbu	r2,-32535(gp)
20024790:	10803fcc 	andi	r2,r2,255
20024794:	10800058 	cmpnei	r2,r2,1
20024798:	1000161e 	bne	r2,zero,200247f4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002479c:	0005303a 	rdctl	r2,status
200247a0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200247a4:	e0ffff17 	ldw	r3,-4(fp)
200247a8:	00bfff84 	movi	r2,-2
200247ac:	1884703a 	and	r2,r3,r2
200247b0:	1001703a 	wrctl	status,r2
  
  return context;
200247b4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
200247b8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
200247bc:	d0a04803 	ldbu	r2,-32480(gp)
200247c0:	10803fcc 	andi	r2,r2,255
200247c4:	1000071e 	bne	r2,zero,200247e4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
200247c8:	d0a03a03 	ldbu	r2,-32536(gp)
200247cc:	10803fcc 	andi	r2,r2,255
200247d0:	10803fe0 	cmpeqi	r2,r2,255
200247d4:	1000031e 	bne	r2,zero,200247e4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
200247d8:	d0a03a03 	ldbu	r2,-32536(gp)
200247dc:	10800044 	addi	r2,r2,1
200247e0:	d0a03a05 	stb	r2,-32536(gp)
200247e4:	e0bffd17 	ldw	r2,-12(fp)
200247e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200247ec:	e0bffe17 	ldw	r2,-8(fp)
200247f0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
200247f4:	0001883a 	nop
200247f8:	e037883a 	mov	sp,fp
200247fc:	df000017 	ldw	fp,0(sp)
20024800:	dec00104 	addi	sp,sp,4
20024804:	f800283a 	ret

20024808 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
20024808:	defff804 	addi	sp,sp,-32
2002480c:	dfc00715 	stw	ra,28(sp)
20024810:	df000615 	stw	fp,24(sp)
20024814:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20024818:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
2002481c:	d0a03a43 	ldbu	r2,-32535(gp)
20024820:	10803fcc 	andi	r2,r2,255
20024824:	10800058 	cmpnei	r2,r2,1
20024828:	1000281e 	bne	r2,zero,200248cc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002482c:	0005303a 	rdctl	r2,status
20024830:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024834:	e0ffff17 	ldw	r3,-4(fp)
20024838:	00bfff84 	movi	r2,-2
2002483c:	1884703a 	and	r2,r3,r2
20024840:	1001703a 	wrctl	status,r2
  
  return context;
20024844:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
20024848:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
2002484c:	d0a03a03 	ldbu	r2,-32536(gp)
20024850:	10803fcc 	andi	r2,r2,255
20024854:	10001926 	beq	r2,zero,200248bc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
20024858:	d0a03a03 	ldbu	r2,-32536(gp)
2002485c:	10bfffc4 	addi	r2,r2,-1
20024860:	d0a03a05 	stb	r2,-32536(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
20024864:	d0a03a03 	ldbu	r2,-32536(gp)
20024868:	10803fcc 	andi	r2,r2,255
2002486c:	10000e1e 	bne	r2,zero,200248a8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
20024870:	d0a04803 	ldbu	r2,-32480(gp)
20024874:	10803fcc 	andi	r2,r2,255
20024878:	1000061e 	bne	r2,zero,20024894 <OSSchedUnlock+0x8c>
2002487c:	e0bffa17 	ldw	r2,-24(fp)
20024880:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20024884:	e0bffb17 	ldw	r2,-20(fp)
20024888:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
2002488c:	00256b00 	call	200256b0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
20024890:	00000e06 	br	200248cc <OSSchedUnlock+0xc4>
20024894:	e0bffa17 	ldw	r2,-24(fp)
20024898:	e0bffc15 	stw	r2,-16(fp)
2002489c:	e0bffc17 	ldw	r2,-16(fp)
200248a0:	1001703a 	wrctl	status,r2
200248a4:	00000906 	br	200248cc <OSSchedUnlock+0xc4>
200248a8:	e0bffa17 	ldw	r2,-24(fp)
200248ac:	e0bffd15 	stw	r2,-12(fp)
200248b0:	e0bffd17 	ldw	r2,-12(fp)
200248b4:	1001703a 	wrctl	status,r2
200248b8:	00000406 	br	200248cc <OSSchedUnlock+0xc4>
200248bc:	e0bffa17 	ldw	r2,-24(fp)
200248c0:	e0bffe15 	stw	r2,-8(fp)
200248c4:	e0bffe17 	ldw	r2,-8(fp)
200248c8:	1001703a 	wrctl	status,r2
200248cc:	0001883a 	nop
200248d0:	e037883a 	mov	sp,fp
200248d4:	dfc00117 	ldw	ra,4(sp)
200248d8:	df000017 	ldw	fp,0(sp)
200248dc:	dec00204 	addi	sp,sp,8
200248e0:	f800283a 	ret

200248e4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
200248e4:	defffe04 	addi	sp,sp,-8
200248e8:	dfc00115 	stw	ra,4(sp)
200248ec:	df000015 	stw	fp,0(sp)
200248f0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
200248f4:	d0a03a43 	ldbu	r2,-32535(gp)
200248f8:	10803fcc 	andi	r2,r2,255
200248fc:	10000f1e 	bne	r2,zero,2002493c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
20024900:	00257800 	call	20025780 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
20024904:	d0a03c03 	ldbu	r2,-32528(gp)
20024908:	d0a03c45 	stb	r2,-32527(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
2002490c:	d0a03c03 	ldbu	r2,-32528(gp)
20024910:	10c03fcc 	andi	r3,r2,255
20024914:	00800074 	movhi	r2,1
20024918:	10a3c304 	addi	r2,r2,-28916
2002491c:	18c7883a 	add	r3,r3,r3
20024920:	18c7883a 	add	r3,r3,r3
20024924:	10c5883a 	add	r2,r2,r3
20024928:	10800017 	ldw	r2,0(r2)
2002492c:	d0a04415 	stw	r2,-32496(gp)
        OSTCBCur      = OSTCBHighRdy;
20024930:	d0a04417 	ldw	r2,-32496(gp)
20024934:	d0a04915 	stw	r2,-32476(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
20024938:	002cff40 	call	2002cff4 <OSStartHighRdy>
    }
}
2002493c:	0001883a 	nop
20024940:	e037883a 	mov	sp,fp
20024944:	dfc00117 	ldw	ra,4(sp)
20024948:	df000017 	ldw	fp,0(sp)
2002494c:	dec00204 	addi	sp,sp,8
20024950:	f800283a 	ret

20024954 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
20024954:	defff904 	addi	sp,sp,-28
20024958:	dfc00615 	stw	ra,24(sp)
2002495c:	df000515 	stw	fp,20(sp)
20024960:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20024964:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
20024968:	01000084 	movi	r4,2
2002496c:	002b04c0 	call	2002b04c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20024970:	0005303a 	rdctl	r2,status
20024974:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024978:	e0fffc17 	ldw	r3,-16(fp)
2002497c:	00bfff84 	movi	r2,-2
20024980:	1884703a 	and	r2,r3,r2
20024984:	1001703a 	wrctl	status,r2
  
  return context;
20024988:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
2002498c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
20024990:	d0203b15 	stw	zero,-32532(gp)
20024994:	e0bffb17 	ldw	r2,-20(fp)
20024998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002499c:	e0bffd17 	ldw	r2,-12(fp)
200249a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
200249a4:	01001904 	movi	r4,100
200249a8:	002b04c0 	call	2002b04c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200249ac:	0005303a 	rdctl	r2,status
200249b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200249b4:	e0fffe17 	ldw	r3,-8(fp)
200249b8:	00bfff84 	movi	r2,-2
200249bc:	1884703a 	and	r2,r3,r2
200249c0:	1001703a 	wrctl	status,r2
  
  return context;
200249c4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
200249c8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
200249cc:	d0a03b17 	ldw	r2,-32532(gp)
200249d0:	d0a04015 	stw	r2,-32512(gp)
    OSStatRdy    = OS_TRUE;
200249d4:	00800044 	movi	r2,1
200249d8:	d0a04c05 	stb	r2,-32464(gp)
200249dc:	e0bffb17 	ldw	r2,-20(fp)
200249e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200249e4:	e0bfff17 	ldw	r2,-4(fp)
200249e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
200249ec:	0001883a 	nop
200249f0:	e037883a 	mov	sp,fp
200249f4:	dfc00117 	ldw	ra,4(sp)
200249f8:	df000017 	ldw	fp,0(sp)
200249fc:	dec00204 	addi	sp,sp,8
20024a00:	f800283a 	ret

20024a04 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
20024a04:	defff704 	addi	sp,sp,-36
20024a08:	dfc00815 	stw	ra,32(sp)
20024a0c:	df000715 	stw	fp,28(sp)
20024a10:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20024a14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
20024a18:	002d21c0 	call	2002d21c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20024a1c:	0005303a 	rdctl	r2,status
20024a20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024a24:	e0fffd17 	ldw	r3,-12(fp)
20024a28:	00bfff84 	movi	r2,-2
20024a2c:	1884703a 	and	r2,r3,r2
20024a30:	1001703a 	wrctl	status,r2
  
  return context;
20024a34:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
20024a38:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
20024a3c:	d0a04a17 	ldw	r2,-32472(gp)
20024a40:	10800044 	addi	r2,r2,1
20024a44:	d0a04a15 	stw	r2,-32472(gp)
20024a48:	e0bffb17 	ldw	r2,-20(fp)
20024a4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20024a50:	e0bfff17 	ldw	r2,-4(fp)
20024a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
20024a58:	d0a03a43 	ldbu	r2,-32535(gp)
20024a5c:	10803fcc 	andi	r2,r2,255
20024a60:	10800058 	cmpnei	r2,r2,1
20024a64:	10006a1e 	bne	r2,zero,20024c10 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
20024a68:	d0a03e03 	ldbu	r2,-32520(gp)
20024a6c:	10803fcc 	andi	r2,r2,255
20024a70:	10c00060 	cmpeqi	r3,r2,1
20024a74:	1800061e 	bne	r3,zero,20024a90 <OSTimeTick+0x8c>
20024a78:	10c000a0 	cmpeqi	r3,r2,2
20024a7c:	1800061e 	bne	r3,zero,20024a98 <OSTimeTick+0x94>
20024a80:	10000a1e 	bne	r2,zero,20024aac <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
20024a84:	00800044 	movi	r2,1
20024a88:	e0bffa05 	stb	r2,-24(fp)
                 break;
20024a8c:	00000b06 	br	20024abc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
20024a90:	e03ffa05 	stb	zero,-24(fp)
                 break;
20024a94:	00000906 	br	20024abc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
20024a98:	00800044 	movi	r2,1
20024a9c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
20024aa0:	00800044 	movi	r2,1
20024aa4:	d0a03e05 	stb	r2,-32520(gp)
                 break;
20024aa8:	00000406 	br	20024abc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
20024aac:	00800044 	movi	r2,1
20024ab0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
20024ab4:	d0203e05 	stb	zero,-32520(gp)
                 break;
20024ab8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
20024abc:	e0bffa03 	ldbu	r2,-24(fp)
20024ac0:	10005226 	beq	r2,zero,20024c0c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
20024ac4:	d0a03d17 	ldw	r2,-32524(gp)
20024ac8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
20024acc:	00004906 	br	20024bf4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20024ad0:	0005303a 	rdctl	r2,status
20024ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20024ad8:	e0fffc17 	ldw	r3,-16(fp)
20024adc:	00bfff84 	movi	r2,-2
20024ae0:	1884703a 	and	r2,r3,r2
20024ae4:	1001703a 	wrctl	status,r2
  
  return context;
20024ae8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
20024aec:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
20024af0:	e0bff917 	ldw	r2,-28(fp)
20024af4:	10800b8b 	ldhu	r2,46(r2)
20024af8:	10bfffcc 	andi	r2,r2,65535
20024afc:	10003626 	beq	r2,zero,20024bd8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
20024b00:	e0bff917 	ldw	r2,-28(fp)
20024b04:	10800b8b 	ldhu	r2,46(r2)
20024b08:	10bfffc4 	addi	r2,r2,-1
20024b0c:	1007883a 	mov	r3,r2
20024b10:	e0bff917 	ldw	r2,-28(fp)
20024b14:	10c00b8d 	sth	r3,46(r2)
20024b18:	e0bff917 	ldw	r2,-28(fp)
20024b1c:	10800b8b 	ldhu	r2,46(r2)
20024b20:	10bfffcc 	andi	r2,r2,65535
20024b24:	10002c1e 	bne	r2,zero,20024bd8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
20024b28:	e0bff917 	ldw	r2,-28(fp)
20024b2c:	10800c03 	ldbu	r2,48(r2)
20024b30:	10803fcc 	andi	r2,r2,255
20024b34:	10800dcc 	andi	r2,r2,55
20024b38:	10000b26 	beq	r2,zero,20024b68 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
20024b3c:	e0bff917 	ldw	r2,-28(fp)
20024b40:	10c00c03 	ldbu	r3,48(r2)
20024b44:	00bff204 	movi	r2,-56
20024b48:	1884703a 	and	r2,r3,r2
20024b4c:	1007883a 	mov	r3,r2
20024b50:	e0bff917 	ldw	r2,-28(fp)
20024b54:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
20024b58:	e0bff917 	ldw	r2,-28(fp)
20024b5c:	00c00044 	movi	r3,1
20024b60:	10c00c45 	stb	r3,49(r2)
20024b64:	00000206 	br	20024b70 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
20024b68:	e0bff917 	ldw	r2,-28(fp)
20024b6c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
20024b70:	e0bff917 	ldw	r2,-28(fp)
20024b74:	10800c03 	ldbu	r2,48(r2)
20024b78:	10803fcc 	andi	r2,r2,255
20024b7c:	1080020c 	andi	r2,r2,8
20024b80:	1000151e 	bne	r2,zero,20024bd8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
20024b84:	e0bff917 	ldw	r2,-28(fp)
20024b88:	10c00d83 	ldbu	r3,54(r2)
20024b8c:	d0a04603 	ldbu	r2,-32488(gp)
20024b90:	1884b03a 	or	r2,r3,r2
20024b94:	d0a04605 	stb	r2,-32488(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20024b98:	e0bff917 	ldw	r2,-28(fp)
20024b9c:	10800d03 	ldbu	r2,52(r2)
20024ba0:	10c03fcc 	andi	r3,r2,255
20024ba4:	e0bff917 	ldw	r2,-28(fp)
20024ba8:	10800d03 	ldbu	r2,52(r2)
20024bac:	11003fcc 	andi	r4,r2,255
20024bb0:	d0a04644 	addi	r2,gp,-32487
20024bb4:	2085883a 	add	r2,r4,r2
20024bb8:	11000003 	ldbu	r4,0(r2)
20024bbc:	e0bff917 	ldw	r2,-28(fp)
20024bc0:	10800d43 	ldbu	r2,53(r2)
20024bc4:	2084b03a 	or	r2,r4,r2
20024bc8:	1009883a 	mov	r4,r2
20024bcc:	d0a04644 	addi	r2,gp,-32487
20024bd0:	1885883a 	add	r2,r3,r2
20024bd4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
20024bd8:	e0bff917 	ldw	r2,-28(fp)
20024bdc:	10800517 	ldw	r2,20(r2)
20024be0:	e0bff915 	stw	r2,-28(fp)
20024be4:	e0bffb17 	ldw	r2,-20(fp)
20024be8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20024bec:	e0bffe17 	ldw	r2,-8(fp)
20024bf0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
20024bf4:	e0bff917 	ldw	r2,-28(fp)
20024bf8:	10800c83 	ldbu	r2,50(r2)
20024bfc:	10803fcc 	andi	r2,r2,255
20024c00:	10800518 	cmpnei	r2,r2,20
20024c04:	103fb21e 	bne	r2,zero,20024ad0 <__flash_rwdata_start+0xffff6fe8>
20024c08:	00000106 	br	20024c10 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
20024c0c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
20024c10:	e037883a 	mov	sp,fp
20024c14:	dfc00117 	ldw	ra,4(sp)
20024c18:	df000017 	ldw	fp,0(sp)
20024c1c:	dec00204 	addi	sp,sp,8
20024c20:	f800283a 	ret

20024c24 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
20024c24:	deffff04 	addi	sp,sp,-4
20024c28:	df000015 	stw	fp,0(sp)
20024c2c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
20024c30:	00804784 	movi	r2,286
}
20024c34:	e037883a 	mov	sp,fp
20024c38:	df000017 	ldw	fp,0(sp)
20024c3c:	dec00104 	addi	sp,sp,4
20024c40:	f800283a 	ret

20024c44 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
20024c44:	deffff04 	addi	sp,sp,-4
20024c48:	df000015 	stw	fp,0(sp)
20024c4c:	d839883a 	mov	fp,sp
}
20024c50:	0001883a 	nop
20024c54:	e037883a 	mov	sp,fp
20024c58:	df000017 	ldw	fp,0(sp)
20024c5c:	dec00104 	addi	sp,sp,4
20024c60:	f800283a 	ret

20024c64 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
20024c64:	defff804 	addi	sp,sp,-32
20024c68:	dfc00715 	stw	ra,28(sp)
20024c6c:	df000615 	stw	fp,24(sp)
20024c70:	df000604 	addi	fp,sp,24
20024c74:	e13ffc15 	stw	r4,-16(fp)
20024c78:	e17ffd15 	stw	r5,-12(fp)
20024c7c:	3007883a 	mov	r3,r6
20024c80:	3805883a 	mov	r2,r7
20024c84:	e0fffe05 	stb	r3,-8(fp)
20024c88:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
20024c8c:	e0bffc17 	ldw	r2,-16(fp)
20024c90:	10800283 	ldbu	r2,10(r2)
20024c94:	10c03fcc 	andi	r3,r2,255
20024c98:	00800034 	movhi	r2,0
20024c9c:	10801704 	addi	r2,r2,92
20024ca0:	10c5883a 	add	r2,r2,r3
20024ca4:	10800003 	ldbu	r2,0(r2)
20024ca8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
20024cac:	e0bffa03 	ldbu	r2,-24(fp)
20024cb0:	e0fffc17 	ldw	r3,-16(fp)
20024cb4:	1885883a 	add	r2,r3,r2
20024cb8:	108002c4 	addi	r2,r2,11
20024cbc:	10800003 	ldbu	r2,0(r2)
20024cc0:	10c03fcc 	andi	r3,r2,255
20024cc4:	00800034 	movhi	r2,0
20024cc8:	10801704 	addi	r2,r2,92
20024ccc:	10c5883a 	add	r2,r2,r3
20024cd0:	10800003 	ldbu	r2,0(r2)
20024cd4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
20024cd8:	e0bffa03 	ldbu	r2,-24(fp)
20024cdc:	100490fa 	slli	r2,r2,3
20024ce0:	1007883a 	mov	r3,r2
20024ce4:	e0bffa43 	ldbu	r2,-23(fp)
20024ce8:	1885883a 	add	r2,r3,r2
20024cec:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
20024cf0:	e0fffa83 	ldbu	r3,-22(fp)
20024cf4:	00800074 	movhi	r2,1
20024cf8:	10a3c304 	addi	r2,r2,-28916
20024cfc:	18c7883a 	add	r3,r3,r3
20024d00:	18c7883a 	add	r3,r3,r3
20024d04:	10c5883a 	add	r2,r2,r3
20024d08:	10800017 	ldw	r2,0(r2)
20024d0c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
20024d10:	e0bffb17 	ldw	r2,-20(fp)
20024d14:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
20024d18:	e0bffb17 	ldw	r2,-20(fp)
20024d1c:	e0fffd17 	ldw	r3,-12(fp)
20024d20:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
20024d24:	e0bffb17 	ldw	r2,-20(fp)
20024d28:	10800c03 	ldbu	r2,48(r2)
20024d2c:	1007883a 	mov	r3,r2
20024d30:	e0bffe03 	ldbu	r2,-8(fp)
20024d34:	0084303a 	nor	r2,zero,r2
20024d38:	1884703a 	and	r2,r3,r2
20024d3c:	1007883a 	mov	r3,r2
20024d40:	e0bffb17 	ldw	r2,-20(fp)
20024d44:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
20024d48:	e0bffb17 	ldw	r2,-20(fp)
20024d4c:	e0ffff03 	ldbu	r3,-4(fp)
20024d50:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
20024d54:	e0bffb17 	ldw	r2,-20(fp)
20024d58:	10800c03 	ldbu	r2,48(r2)
20024d5c:	10803fcc 	andi	r2,r2,255
20024d60:	1080020c 	andi	r2,r2,8
20024d64:	1000111e 	bne	r2,zero,20024dac <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
20024d68:	e0bffb17 	ldw	r2,-20(fp)
20024d6c:	10c00d83 	ldbu	r3,54(r2)
20024d70:	d0a04603 	ldbu	r2,-32488(gp)
20024d74:	1884b03a 	or	r2,r3,r2
20024d78:	d0a04605 	stb	r2,-32488(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
20024d7c:	e0fffa03 	ldbu	r3,-24(fp)
20024d80:	e13ffa03 	ldbu	r4,-24(fp)
20024d84:	d0a04644 	addi	r2,gp,-32487
20024d88:	2085883a 	add	r2,r4,r2
20024d8c:	11000003 	ldbu	r4,0(r2)
20024d90:	e0bffb17 	ldw	r2,-20(fp)
20024d94:	10800d43 	ldbu	r2,53(r2)
20024d98:	2084b03a 	or	r2,r4,r2
20024d9c:	1009883a 	mov	r4,r2
20024da0:	d0a04644 	addi	r2,gp,-32487
20024da4:	1885883a 	add	r2,r3,r2
20024da8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
20024dac:	e17ffc17 	ldw	r5,-16(fp)
20024db0:	e13ffb17 	ldw	r4,-20(fp)
20024db4:	002505c0 	call	2002505c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
20024db8:	e0bffb17 	ldw	r2,-20(fp)
20024dbc:	10800817 	ldw	r2,32(r2)
20024dc0:	10000826 	beq	r2,zero,20024de4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
20024dc4:	e0bffb17 	ldw	r2,-20(fp)
20024dc8:	10800817 	ldw	r2,32(r2)
20024dcc:	100b883a 	mov	r5,r2
20024dd0:	e13ffb17 	ldw	r4,-20(fp)
20024dd4:	00251140 	call	20025114 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
20024dd8:	e0bffb17 	ldw	r2,-20(fp)
20024ddc:	e0fffc17 	ldw	r3,-16(fp)
20024de0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
20024de4:	e0bffa83 	ldbu	r2,-22(fp)
}
20024de8:	e037883a 	mov	sp,fp
20024dec:	dfc00117 	ldw	ra,4(sp)
20024df0:	df000017 	ldw	fp,0(sp)
20024df4:	dec00204 	addi	sp,sp,8
20024df8:	f800283a 	ret

20024dfc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
20024dfc:	defffd04 	addi	sp,sp,-12
20024e00:	df000215 	stw	fp,8(sp)
20024e04:	df000204 	addi	fp,sp,8
20024e08:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
20024e0c:	d0a04917 	ldw	r2,-32476(gp)
20024e10:	e0ffff17 	ldw	r3,-4(fp)
20024e14:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
20024e18:	d0a04917 	ldw	r2,-32476(gp)
20024e1c:	10800d03 	ldbu	r2,52(r2)
20024e20:	10803fcc 	andi	r2,r2,255
20024e24:	d0e04917 	ldw	r3,-32476(gp)
20024e28:	18c00d03 	ldbu	r3,52(r3)
20024e2c:	18c03fcc 	andi	r3,r3,255
20024e30:	e13fff17 	ldw	r4,-4(fp)
20024e34:	20c7883a 	add	r3,r4,r3
20024e38:	18c002c4 	addi	r3,r3,11
20024e3c:	19000003 	ldbu	r4,0(r3)
20024e40:	d0e04917 	ldw	r3,-32476(gp)
20024e44:	18c00d43 	ldbu	r3,53(r3)
20024e48:	20c6b03a 	or	r3,r4,r3
20024e4c:	1809883a 	mov	r4,r3
20024e50:	e0ffff17 	ldw	r3,-4(fp)
20024e54:	1885883a 	add	r2,r3,r2
20024e58:	108002c4 	addi	r2,r2,11
20024e5c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
20024e60:	e0bfff17 	ldw	r2,-4(fp)
20024e64:	10c00283 	ldbu	r3,10(r2)
20024e68:	d0a04917 	ldw	r2,-32476(gp)
20024e6c:	10800d83 	ldbu	r2,54(r2)
20024e70:	1884b03a 	or	r2,r3,r2
20024e74:	1007883a 	mov	r3,r2
20024e78:	e0bfff17 	ldw	r2,-4(fp)
20024e7c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
20024e80:	d0a04917 	ldw	r2,-32476(gp)
20024e84:	10800d03 	ldbu	r2,52(r2)
20024e88:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
20024e8c:	e0fffe03 	ldbu	r3,-8(fp)
20024e90:	e13ffe03 	ldbu	r4,-8(fp)
20024e94:	d0a04644 	addi	r2,gp,-32487
20024e98:	2085883a 	add	r2,r4,r2
20024e9c:	10800003 	ldbu	r2,0(r2)
20024ea0:	1009883a 	mov	r4,r2
20024ea4:	d0a04917 	ldw	r2,-32476(gp)
20024ea8:	10800d43 	ldbu	r2,53(r2)
20024eac:	0084303a 	nor	r2,zero,r2
20024eb0:	2084703a 	and	r2,r4,r2
20024eb4:	1009883a 	mov	r4,r2
20024eb8:	d0a04644 	addi	r2,gp,-32487
20024ebc:	1885883a 	add	r2,r3,r2
20024ec0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
20024ec4:	e0fffe03 	ldbu	r3,-8(fp)
20024ec8:	d0a04644 	addi	r2,gp,-32487
20024ecc:	1885883a 	add	r2,r3,r2
20024ed0:	10800003 	ldbu	r2,0(r2)
20024ed4:	10803fcc 	andi	r2,r2,255
20024ed8:	1000071e 	bne	r2,zero,20024ef8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
20024edc:	d0a04917 	ldw	r2,-32476(gp)
20024ee0:	10800d83 	ldbu	r2,54(r2)
20024ee4:	0084303a 	nor	r2,zero,r2
20024ee8:	1007883a 	mov	r3,r2
20024eec:	d0a04603 	ldbu	r2,-32488(gp)
20024ef0:	1884703a 	and	r2,r3,r2
20024ef4:	d0a04605 	stb	r2,-32488(gp)
    }
}
20024ef8:	0001883a 	nop
20024efc:	e037883a 	mov	sp,fp
20024f00:	df000017 	ldw	fp,0(sp)
20024f04:	dec00104 	addi	sp,sp,4
20024f08:	f800283a 	ret

20024f0c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
20024f0c:	defffb04 	addi	sp,sp,-20
20024f10:	df000415 	stw	fp,16(sp)
20024f14:	df000404 	addi	fp,sp,16
20024f18:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
20024f1c:	d0a04917 	ldw	r2,-32476(gp)
20024f20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
20024f24:	d0a04917 	ldw	r2,-32476(gp)
20024f28:	e0ffff17 	ldw	r3,-4(fp)
20024f2c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
20024f30:	e0bfff17 	ldw	r2,-4(fp)
20024f34:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
20024f38:	e0bffc17 	ldw	r2,-16(fp)
20024f3c:	10800017 	ldw	r2,0(r2)
20024f40:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
20024f44:	00002006 	br	20024fc8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
20024f48:	d0a04917 	ldw	r2,-32476(gp)
20024f4c:	10800d03 	ldbu	r2,52(r2)
20024f50:	10803fcc 	andi	r2,r2,255
20024f54:	d0e04917 	ldw	r3,-32476(gp)
20024f58:	18c00d03 	ldbu	r3,52(r3)
20024f5c:	18c03fcc 	andi	r3,r3,255
20024f60:	e13ffd17 	ldw	r4,-12(fp)
20024f64:	20c7883a 	add	r3,r4,r3
20024f68:	18c002c4 	addi	r3,r3,11
20024f6c:	19000003 	ldbu	r4,0(r3)
20024f70:	d0e04917 	ldw	r3,-32476(gp)
20024f74:	18c00d43 	ldbu	r3,53(r3)
20024f78:	20c6b03a 	or	r3,r4,r3
20024f7c:	1809883a 	mov	r4,r3
20024f80:	e0fffd17 	ldw	r3,-12(fp)
20024f84:	1885883a 	add	r2,r3,r2
20024f88:	108002c4 	addi	r2,r2,11
20024f8c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
20024f90:	e0bffd17 	ldw	r2,-12(fp)
20024f94:	10c00283 	ldbu	r3,10(r2)
20024f98:	d0a04917 	ldw	r2,-32476(gp)
20024f9c:	10800d83 	ldbu	r2,54(r2)
20024fa0:	1884b03a 	or	r2,r3,r2
20024fa4:	1007883a 	mov	r3,r2
20024fa8:	e0bffd17 	ldw	r2,-12(fp)
20024fac:	10c00285 	stb	r3,10(r2)
        pevents++;
20024fb0:	e0bffc17 	ldw	r2,-16(fp)
20024fb4:	10800104 	addi	r2,r2,4
20024fb8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
20024fbc:	e0bffc17 	ldw	r2,-16(fp)
20024fc0:	10800017 	ldw	r2,0(r2)
20024fc4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
20024fc8:	e0bffd17 	ldw	r2,-12(fp)
20024fcc:	103fde1e 	bne	r2,zero,20024f48 <__flash_rwdata_start+0xffff7460>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
20024fd0:	d0a04917 	ldw	r2,-32476(gp)
20024fd4:	10800d03 	ldbu	r2,52(r2)
20024fd8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
20024fdc:	e0fffe03 	ldbu	r3,-8(fp)
20024fe0:	e13ffe03 	ldbu	r4,-8(fp)
20024fe4:	d0a04644 	addi	r2,gp,-32487
20024fe8:	2085883a 	add	r2,r4,r2
20024fec:	10800003 	ldbu	r2,0(r2)
20024ff0:	1009883a 	mov	r4,r2
20024ff4:	d0a04917 	ldw	r2,-32476(gp)
20024ff8:	10800d43 	ldbu	r2,53(r2)
20024ffc:	0084303a 	nor	r2,zero,r2
20025000:	2084703a 	and	r2,r4,r2
20025004:	1009883a 	mov	r4,r2
20025008:	d0a04644 	addi	r2,gp,-32487
2002500c:	1885883a 	add	r2,r3,r2
20025010:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
20025014:	e0fffe03 	ldbu	r3,-8(fp)
20025018:	d0a04644 	addi	r2,gp,-32487
2002501c:	1885883a 	add	r2,r3,r2
20025020:	10800003 	ldbu	r2,0(r2)
20025024:	10803fcc 	andi	r2,r2,255
20025028:	1000071e 	bne	r2,zero,20025048 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
2002502c:	d0a04917 	ldw	r2,-32476(gp)
20025030:	10800d83 	ldbu	r2,54(r2)
20025034:	0084303a 	nor	r2,zero,r2
20025038:	1007883a 	mov	r3,r2
2002503c:	d0a04603 	ldbu	r2,-32488(gp)
20025040:	1884703a 	and	r2,r3,r2
20025044:	d0a04605 	stb	r2,-32488(gp)
    }
}
20025048:	0001883a 	nop
2002504c:	e037883a 	mov	sp,fp
20025050:	df000017 	ldw	fp,0(sp)
20025054:	dec00104 	addi	sp,sp,4
20025058:	f800283a 	ret

2002505c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
2002505c:	defffc04 	addi	sp,sp,-16
20025060:	df000315 	stw	fp,12(sp)
20025064:	df000304 	addi	fp,sp,12
20025068:	e13ffe15 	stw	r4,-8(fp)
2002506c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
20025070:	e0bffe17 	ldw	r2,-8(fp)
20025074:	10800d03 	ldbu	r2,52(r2)
20025078:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
2002507c:	e0bffd03 	ldbu	r2,-12(fp)
20025080:	e0fffd03 	ldbu	r3,-12(fp)
20025084:	e13fff17 	ldw	r4,-4(fp)
20025088:	20c7883a 	add	r3,r4,r3
2002508c:	18c002c4 	addi	r3,r3,11
20025090:	18c00003 	ldbu	r3,0(r3)
20025094:	1809883a 	mov	r4,r3
20025098:	e0fffe17 	ldw	r3,-8(fp)
2002509c:	18c00d43 	ldbu	r3,53(r3)
200250a0:	00c6303a 	nor	r3,zero,r3
200250a4:	20c6703a 	and	r3,r4,r3
200250a8:	1809883a 	mov	r4,r3
200250ac:	e0ffff17 	ldw	r3,-4(fp)
200250b0:	1885883a 	add	r2,r3,r2
200250b4:	108002c4 	addi	r2,r2,11
200250b8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
200250bc:	e0bffd03 	ldbu	r2,-12(fp)
200250c0:	e0ffff17 	ldw	r3,-4(fp)
200250c4:	1885883a 	add	r2,r3,r2
200250c8:	108002c4 	addi	r2,r2,11
200250cc:	10800003 	ldbu	r2,0(r2)
200250d0:	10803fcc 	andi	r2,r2,255
200250d4:	10000a1e 	bne	r2,zero,20025100 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
200250d8:	e0bfff17 	ldw	r2,-4(fp)
200250dc:	10800283 	ldbu	r2,10(r2)
200250e0:	1007883a 	mov	r3,r2
200250e4:	e0bffe17 	ldw	r2,-8(fp)
200250e8:	10800d83 	ldbu	r2,54(r2)
200250ec:	0084303a 	nor	r2,zero,r2
200250f0:	1884703a 	and	r2,r3,r2
200250f4:	1007883a 	mov	r3,r2
200250f8:	e0bfff17 	ldw	r2,-4(fp)
200250fc:	10c00285 	stb	r3,10(r2)
    }
}
20025100:	0001883a 	nop
20025104:	e037883a 	mov	sp,fp
20025108:	df000017 	ldw	fp,0(sp)
2002510c:	dec00104 	addi	sp,sp,4
20025110:	f800283a 	ret

20025114 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
20025114:	defffa04 	addi	sp,sp,-24
20025118:	df000515 	stw	fp,20(sp)
2002511c:	df000504 	addi	fp,sp,20
20025120:	e13ffe15 	stw	r4,-8(fp)
20025124:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
20025128:	e0bffe17 	ldw	r2,-8(fp)
2002512c:	10800d03 	ldbu	r2,52(r2)
20025130:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
20025134:	e0bffe17 	ldw	r2,-8(fp)
20025138:	10800d83 	ldbu	r2,54(r2)
2002513c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
20025140:	e0bffe17 	ldw	r2,-8(fp)
20025144:	10800d43 	ldbu	r2,53(r2)
20025148:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
2002514c:	e0bfff17 	ldw	r2,-4(fp)
20025150:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
20025154:	e0bffb17 	ldw	r2,-20(fp)
20025158:	10800017 	ldw	r2,0(r2)
2002515c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
20025160:	00002506 	br	200251f8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
20025164:	e0bffd03 	ldbu	r2,-12(fp)
20025168:	e0fffd03 	ldbu	r3,-12(fp)
2002516c:	e13ffc17 	ldw	r4,-16(fp)
20025170:	20c7883a 	add	r3,r4,r3
20025174:	18c002c4 	addi	r3,r3,11
20025178:	18c00003 	ldbu	r3,0(r3)
2002517c:	1809883a 	mov	r4,r3
20025180:	e0fffd83 	ldbu	r3,-10(fp)
20025184:	00c6303a 	nor	r3,zero,r3
20025188:	20c6703a 	and	r3,r4,r3
2002518c:	1809883a 	mov	r4,r3
20025190:	e0fffc17 	ldw	r3,-16(fp)
20025194:	1885883a 	add	r2,r3,r2
20025198:	108002c4 	addi	r2,r2,11
2002519c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
200251a0:	e0bffd03 	ldbu	r2,-12(fp)
200251a4:	e0fffc17 	ldw	r3,-16(fp)
200251a8:	1885883a 	add	r2,r3,r2
200251ac:	108002c4 	addi	r2,r2,11
200251b0:	10800003 	ldbu	r2,0(r2)
200251b4:	10803fcc 	andi	r2,r2,255
200251b8:	1000091e 	bne	r2,zero,200251e0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
200251bc:	e0bffc17 	ldw	r2,-16(fp)
200251c0:	10800283 	ldbu	r2,10(r2)
200251c4:	1007883a 	mov	r3,r2
200251c8:	e0bffd43 	ldbu	r2,-11(fp)
200251cc:	0084303a 	nor	r2,zero,r2
200251d0:	1884703a 	and	r2,r3,r2
200251d4:	1007883a 	mov	r3,r2
200251d8:	e0bffc17 	ldw	r2,-16(fp)
200251dc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
200251e0:	e0bffb17 	ldw	r2,-20(fp)
200251e4:	10800104 	addi	r2,r2,4
200251e8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
200251ec:	e0bffb17 	ldw	r2,-20(fp)
200251f0:	10800017 	ldw	r2,0(r2)
200251f4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
200251f8:	e0bffc17 	ldw	r2,-16(fp)
200251fc:	103fd91e 	bne	r2,zero,20025164 <__flash_rwdata_start+0xffff767c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
20025200:	0001883a 	nop
20025204:	e037883a 	mov	sp,fp
20025208:	df000017 	ldw	fp,0(sp)
2002520c:	dec00104 	addi	sp,sp,4
20025210:	f800283a 	ret

20025214 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
20025214:	defffc04 	addi	sp,sp,-16
20025218:	df000315 	stw	fp,12(sp)
2002521c:	df000304 	addi	fp,sp,12
20025220:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
20025224:	e0bfff17 	ldw	r2,-4(fp)
20025228:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
2002522c:	e0bfff17 	ldw	r2,-4(fp)
20025230:	108002c4 	addi	r2,r2,11
20025234:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20025238:	e03ffe05 	stb	zero,-8(fp)
2002523c:	00000706 	br	2002525c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
20025240:	e0bffd17 	ldw	r2,-12(fp)
20025244:	10c00044 	addi	r3,r2,1
20025248:	e0fffd15 	stw	r3,-12(fp)
2002524c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20025250:	e0bffe03 	ldbu	r2,-8(fp)
20025254:	10800044 	addi	r2,r2,1
20025258:	e0bffe05 	stb	r2,-8(fp)
2002525c:	e0bffe03 	ldbu	r2,-8(fp)
20025260:	108000f0 	cmpltui	r2,r2,3
20025264:	103ff61e 	bne	r2,zero,20025240 <__flash_rwdata_start+0xffff7758>
        *ptbl++ = 0;
    }
}
20025268:	0001883a 	nop
2002526c:	e037883a 	mov	sp,fp
20025270:	df000017 	ldw	fp,0(sp)
20025274:	dec00104 	addi	sp,sp,4
20025278:	f800283a 	ret

2002527c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
2002527c:	defffb04 	addi	sp,sp,-20
20025280:	dfc00415 	stw	ra,16(sp)
20025284:	df000315 	stw	fp,12(sp)
20025288:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
2002528c:	0142d004 	movi	r5,2880
20025290:	01000034 	movhi	r4,0
20025294:	211faf04 	addi	r4,r4,32444
20025298:	00255f40 	call	200255f4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
2002529c:	00800034 	movhi	r2,0
200252a0:	109faf04 	addi	r2,r2,32444
200252a4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
200252a8:	00800034 	movhi	r2,0
200252ac:	109fbb04 	addi	r2,r2,32492
200252b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
200252b4:	e03ffd0d 	sth	zero,-12(fp)
200252b8:	00001306 	br	20025308 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
200252bc:	e0bffe17 	ldw	r2,-8(fp)
200252c0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
200252c4:	e0bffe17 	ldw	r2,-8(fp)
200252c8:	e0ffff17 	ldw	r3,-4(fp)
200252cc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
200252d0:	e0bffe17 	ldw	r2,-8(fp)
200252d4:	00c00fc4 	movi	r3,63
200252d8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
200252dc:	e0bffe17 	ldw	r2,-8(fp)
200252e0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
200252e4:	e0bffe17 	ldw	r2,-8(fp)
200252e8:	10800c04 	addi	r2,r2,48
200252ec:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
200252f0:	e0bfff17 	ldw	r2,-4(fp)
200252f4:	10800c04 	addi	r2,r2,48
200252f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
200252fc:	e0bffd0b 	ldhu	r2,-12(fp)
20025300:	10800044 	addi	r2,r2,1
20025304:	e0bffd0d 	sth	r2,-12(fp)
20025308:	e0bffd0b 	ldhu	r2,-12(fp)
2002530c:	10800ef0 	cmpltui	r2,r2,59
20025310:	103fea1e 	bne	r2,zero,200252bc <__flash_rwdata_start+0xffff77d4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
20025314:	e0bffe17 	ldw	r2,-8(fp)
20025318:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
2002531c:	e0bffe17 	ldw	r2,-8(fp)
20025320:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
20025324:	e0bffe17 	ldw	r2,-8(fp)
20025328:	00c00fc4 	movi	r3,63
2002532c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
20025330:	e0bffe17 	ldw	r2,-8(fp)
20025334:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
20025338:	00800034 	movhi	r2,0
2002533c:	109faf04 	addi	r2,r2,32444
20025340:	d0a04715 	stw	r2,-32484(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
20025344:	0001883a 	nop
20025348:	e037883a 	mov	sp,fp
2002534c:	dfc00117 	ldw	ra,4(sp)
20025350:	df000017 	ldw	fp,0(sp)
20025354:	dec00204 	addi	sp,sp,8
20025358:	f800283a 	ret

2002535c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
2002535c:	deffff04 	addi	sp,sp,-4
20025360:	df000015 	stw	fp,0(sp)
20025364:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
20025368:	d0204a15 	stw	zero,-32472(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
2002536c:	d0204805 	stb	zero,-32480(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
20025370:	d0203a05 	stb	zero,-32536(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
20025374:	d0204245 	stb	zero,-32503(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
20025378:	d0203a45 	stb	zero,-32535(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
2002537c:	d0203f15 	stw	zero,-32516(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
20025380:	d0203b15 	stw	zero,-32532(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
20025384:	d0204d15 	stw	zero,-32460(gp)
    OSIdleCtrMax  = 0L;
20025388:	d0204015 	stw	zero,-32512(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
2002538c:	d0204c05 	stb	zero,-32464(gp)
#endif
}
20025390:	0001883a 	nop
20025394:	e037883a 	mov	sp,fp
20025398:	df000017 	ldw	fp,0(sp)
2002539c:	dec00104 	addi	sp,sp,4
200253a0:	f800283a 	ret

200253a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
200253a4:	defffd04 	addi	sp,sp,-12
200253a8:	df000215 	stw	fp,8(sp)
200253ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
200253b0:	d0204605 	stb	zero,-32488(gp)
    prdytbl       = &OSRdyTbl[0];
200253b4:	d0a04644 	addi	r2,gp,-32487
200253b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
200253bc:	e03ffe05 	stb	zero,-8(fp)
200253c0:	00000706 	br	200253e0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
200253c4:	e0bfff17 	ldw	r2,-4(fp)
200253c8:	10c00044 	addi	r3,r2,1
200253cc:	e0ffff15 	stw	r3,-4(fp)
200253d0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
200253d4:	e0bffe03 	ldbu	r2,-8(fp)
200253d8:	10800044 	addi	r2,r2,1
200253dc:	e0bffe05 	stb	r2,-8(fp)
200253e0:	e0bffe03 	ldbu	r2,-8(fp)
200253e4:	108000f0 	cmpltui	r2,r2,3
200253e8:	103ff61e 	bne	r2,zero,200253c4 <__flash_rwdata_start+0xffff78dc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
200253ec:	d0203c45 	stb	zero,-32527(gp)
    OSPrioHighRdy = 0;
200253f0:	d0203c05 	stb	zero,-32528(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
200253f4:	d0204415 	stw	zero,-32496(gp)
    OSTCBCur      = (OS_TCB *)0;
200253f8:	d0204915 	stw	zero,-32476(gp)
}
200253fc:	0001883a 	nop
20025400:	e037883a 	mov	sp,fp
20025404:	df000017 	ldw	fp,0(sp)
20025408:	dec00104 	addi	sp,sp,4
2002540c:	f800283a 	ret

20025410 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
20025410:	defff804 	addi	sp,sp,-32
20025414:	dfc00715 	stw	ra,28(sp)
20025418:	df000615 	stw	fp,24(sp)
2002541c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
20025420:	008000c4 	movi	r2,3
20025424:	d8800415 	stw	r2,16(sp)
20025428:	d8000315 	stw	zero,12(sp)
2002542c:	00808004 	movi	r2,512
20025430:	d8800215 	stw	r2,8(sp)
20025434:	00800034 	movhi	r2,0
20025438:	109daf04 	addi	r2,r2,30396
2002543c:	d8800115 	stw	r2,4(sp)
20025440:	00bfffd4 	movui	r2,65535
20025444:	d8800015 	stw	r2,0(sp)
20025448:	01c00504 	movi	r7,20
2002544c:	01800034 	movhi	r6,0
20025450:	319fae04 	addi	r6,r6,32440
20025454:	000b883a 	mov	r5,zero
20025458:	010800b4 	movhi	r4,8194
2002545c:	21162f04 	addi	r4,r4,22716
20025460:	0029f7c0 	call	20029f7c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
20025464:	e1bfff04 	addi	r6,fp,-4
20025468:	01400034 	movhi	r5,0
2002546c:	29405704 	addi	r5,r5,348
20025470:	01000504 	movi	r4,20
20025474:	002a78c0 	call	2002a78c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
20025478:	0001883a 	nop
2002547c:	e037883a 	mov	sp,fp
20025480:	dfc00117 	ldw	ra,4(sp)
20025484:	df000017 	ldw	fp,0(sp)
20025488:	dec00204 	addi	sp,sp,8
2002548c:	f800283a 	ret

20025490 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
20025490:	defff804 	addi	sp,sp,-32
20025494:	dfc00715 	stw	ra,28(sp)
20025498:	df000615 	stw	fp,24(sp)
2002549c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
200254a0:	008000c4 	movi	r2,3
200254a4:	d8800415 	stw	r2,16(sp)
200254a8:	d8000315 	stw	zero,12(sp)
200254ac:	00808004 	movi	r2,512
200254b0:	d8800215 	stw	r2,8(sp)
200254b4:	00800034 	movhi	r2,0
200254b8:	109b3704 	addi	r2,r2,27868
200254bc:	d8800115 	stw	r2,4(sp)
200254c0:	00bfff94 	movui	r2,65534
200254c4:	d8800015 	stw	r2,0(sp)
200254c8:	01c004c4 	movi	r7,19
200254cc:	01800034 	movhi	r6,0
200254d0:	319d3604 	addi	r6,r6,29912
200254d4:	000b883a 	mov	r5,zero
200254d8:	010800b4 	movhi	r4,8194
200254dc:	21164604 	addi	r4,r4,22808
200254e0:	0029f7c0 	call	20029f7c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
200254e4:	e1bfff04 	addi	r6,fp,-4
200254e8:	01400034 	movhi	r5,0
200254ec:	29405b04 	addi	r5,r5,364
200254f0:	010004c4 	movi	r4,19
200254f4:	002a78c0 	call	2002a78c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
200254f8:	0001883a 	nop
200254fc:	e037883a 	mov	sp,fp
20025500:	dfc00117 	ldw	ra,4(sp)
20025504:	df000017 	ldw	fp,0(sp)
20025508:	dec00204 	addi	sp,sp,8
2002550c:	f800283a 	ret

20025510 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
20025510:	defffb04 	addi	sp,sp,-20
20025514:	dfc00415 	stw	ra,16(sp)
20025518:	df000315 	stw	fp,12(sp)
2002551c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
20025520:	01414404 	movi	r5,1296
20025524:	01000074 	movhi	r4,1
20025528:	21227f04 	addi	r4,r4,-30212
2002552c:	00255f40 	call	200255f4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
20025530:	01401504 	movi	r5,84
20025534:	01000074 	movhi	r4,1
20025538:	2123c304 	addi	r4,r4,-28916
2002553c:	00255f40 	call	200255f4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
20025540:	00800074 	movhi	r2,1
20025544:	10a27f04 	addi	r2,r2,-30212
20025548:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
2002554c:	00800074 	movhi	r2,1
20025550:	10a29a04 	addi	r2,r2,-30104
20025554:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
20025558:	e03ffd05 	stb	zero,-12(fp)
2002555c:	00001106 	br	200255a4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
20025560:	e0bffe17 	ldw	r2,-8(fp)
20025564:	e0ffff17 	ldw	r3,-4(fp)
20025568:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
2002556c:	e0bffe17 	ldw	r2,-8(fp)
20025570:	00c00fc4 	movi	r3,63
20025574:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
20025578:	e0bffe17 	ldw	r2,-8(fp)
2002557c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
20025580:	e0bffe17 	ldw	r2,-8(fp)
20025584:	10801b04 	addi	r2,r2,108
20025588:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
2002558c:	e0bfff17 	ldw	r2,-4(fp)
20025590:	10801b04 	addi	r2,r2,108
20025594:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
20025598:	e0bffd03 	ldbu	r2,-12(fp)
2002559c:	10800044 	addi	r2,r2,1
200255a0:	e0bffd05 	stb	r2,-12(fp)
200255a4:	e0bffd03 	ldbu	r2,-12(fp)
200255a8:	108002f0 	cmpltui	r2,r2,11
200255ac:	103fec1e 	bne	r2,zero,20025560 <__flash_rwdata_start+0xffff7a78>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
200255b0:	e0bffe17 	ldw	r2,-8(fp)
200255b4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
200255b8:	e0bffe17 	ldw	r2,-8(fp)
200255bc:	00c00fc4 	movi	r3,63
200255c0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
200255c4:	e0bffe17 	ldw	r2,-8(fp)
200255c8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
200255cc:	d0203d15 	stw	zero,-32524(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
200255d0:	00800074 	movhi	r2,1
200255d4:	10a27f04 	addi	r2,r2,-30212
200255d8:	d0a04115 	stw	r2,-32508(gp)
}
200255dc:	0001883a 	nop
200255e0:	e037883a 	mov	sp,fp
200255e4:	dfc00117 	ldw	ra,4(sp)
200255e8:	df000017 	ldw	fp,0(sp)
200255ec:	dec00204 	addi	sp,sp,8
200255f0:	f800283a 	ret

200255f4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
200255f4:	defffd04 	addi	sp,sp,-12
200255f8:	df000215 	stw	fp,8(sp)
200255fc:	df000204 	addi	fp,sp,8
20025600:	e13ffe15 	stw	r4,-8(fp)
20025604:	2805883a 	mov	r2,r5
20025608:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
2002560c:	00000706 	br	2002562c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
20025610:	e0bffe17 	ldw	r2,-8(fp)
20025614:	10c00044 	addi	r3,r2,1
20025618:	e0fffe15 	stw	r3,-8(fp)
2002561c:	10000005 	stb	zero,0(r2)
        size--;
20025620:	e0bfff0b 	ldhu	r2,-4(fp)
20025624:	10bfffc4 	addi	r2,r2,-1
20025628:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
2002562c:	e0bfff0b 	ldhu	r2,-4(fp)
20025630:	103ff71e 	bne	r2,zero,20025610 <__flash_rwdata_start+0xffff7b28>
        *pdest++ = (INT8U)0;
        size--;
    }
}
20025634:	0001883a 	nop
20025638:	e037883a 	mov	sp,fp
2002563c:	df000017 	ldw	fp,0(sp)
20025640:	dec00104 	addi	sp,sp,4
20025644:	f800283a 	ret

20025648 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
20025648:	defffc04 	addi	sp,sp,-16
2002564c:	df000315 	stw	fp,12(sp)
20025650:	df000304 	addi	fp,sp,12
20025654:	e13ffd15 	stw	r4,-12(fp)
20025658:	e17ffe15 	stw	r5,-8(fp)
2002565c:	3005883a 	mov	r2,r6
20025660:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
20025664:	00000b06 	br	20025694 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
20025668:	e0bffd17 	ldw	r2,-12(fp)
2002566c:	10c00044 	addi	r3,r2,1
20025670:	e0fffd15 	stw	r3,-12(fp)
20025674:	e0fffe17 	ldw	r3,-8(fp)
20025678:	19000044 	addi	r4,r3,1
2002567c:	e13ffe15 	stw	r4,-8(fp)
20025680:	18c00003 	ldbu	r3,0(r3)
20025684:	10c00005 	stb	r3,0(r2)
        size--;
20025688:	e0bfff0b 	ldhu	r2,-4(fp)
2002568c:	10bfffc4 	addi	r2,r2,-1
20025690:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
20025694:	e0bfff0b 	ldhu	r2,-4(fp)
20025698:	103ff31e 	bne	r2,zero,20025668 <__flash_rwdata_start+0xffff7b80>
        *pdest++ = *psrc++;
        size--;
    }
}
2002569c:	0001883a 	nop
200256a0:	e037883a 	mov	sp,fp
200256a4:	df000017 	ldw	fp,0(sp)
200256a8:	dec00104 	addi	sp,sp,4
200256ac:	f800283a 	ret

200256b0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
200256b0:	defffb04 	addi	sp,sp,-20
200256b4:	dfc00415 	stw	ra,16(sp)
200256b8:	df000315 	stw	fp,12(sp)
200256bc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
200256c0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200256c4:	0005303a 	rdctl	r2,status
200256c8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200256cc:	e0ffff17 	ldw	r3,-4(fp)
200256d0:	00bfff84 	movi	r2,-2
200256d4:	1884703a 	and	r2,r3,r2
200256d8:	1001703a 	wrctl	status,r2
  
  return context;
200256dc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
200256e0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
200256e4:	d0a04803 	ldbu	r2,-32480(gp)
200256e8:	10803fcc 	andi	r2,r2,255
200256ec:	10001a1e 	bne	r2,zero,20025758 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
200256f0:	d0a03a03 	ldbu	r2,-32536(gp)
200256f4:	10803fcc 	andi	r2,r2,255
200256f8:	1000171e 	bne	r2,zero,20025758 <OS_Sched+0xa8>
            OS_SchedNew();
200256fc:	00257800 	call	20025780 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
20025700:	d0e03c03 	ldbu	r3,-32528(gp)
20025704:	d0a03c43 	ldbu	r2,-32527(gp)
20025708:	18c03fcc 	andi	r3,r3,255
2002570c:	10803fcc 	andi	r2,r2,255
20025710:	18801126 	beq	r3,r2,20025758 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
20025714:	d0a03c03 	ldbu	r2,-32528(gp)
20025718:	10c03fcc 	andi	r3,r2,255
2002571c:	00800074 	movhi	r2,1
20025720:	10a3c304 	addi	r2,r2,-28916
20025724:	18c7883a 	add	r3,r3,r3
20025728:	18c7883a 	add	r3,r3,r3
2002572c:	10c5883a 	add	r2,r2,r3
20025730:	10800017 	ldw	r2,0(r2)
20025734:	d0a04415 	stw	r2,-32496(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
20025738:	d0a04417 	ldw	r2,-32496(gp)
2002573c:	10c00e17 	ldw	r3,56(r2)
20025740:	18c00044 	addi	r3,r3,1
20025744:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
20025748:	d0a03f17 	ldw	r2,-32516(gp)
2002574c:	10800044 	addi	r2,r2,1
20025750:	d0a03f15 	stw	r2,-32516(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
20025754:	002cf680 	call	2002cf68 <OSCtxSw>
20025758:	e0bffd17 	ldw	r2,-12(fp)
2002575c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20025760:	e0bffe17 	ldw	r2,-8(fp)
20025764:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
20025768:	0001883a 	nop
2002576c:	e037883a 	mov	sp,fp
20025770:	dfc00117 	ldw	ra,4(sp)
20025774:	df000017 	ldw	fp,0(sp)
20025778:	dec00204 	addi	sp,sp,8
2002577c:	f800283a 	ret

20025780 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
20025780:	defffe04 	addi	sp,sp,-8
20025784:	df000115 	stw	fp,4(sp)
20025788:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
2002578c:	d0a04603 	ldbu	r2,-32488(gp)
20025790:	10c03fcc 	andi	r3,r2,255
20025794:	00800034 	movhi	r2,0
20025798:	10801704 	addi	r2,r2,92
2002579c:	10c5883a 	add	r2,r2,r3
200257a0:	10800003 	ldbu	r2,0(r2)
200257a4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
200257a8:	e0bfff03 	ldbu	r2,-4(fp)
200257ac:	100490fa 	slli	r2,r2,3
200257b0:	1009883a 	mov	r4,r2
200257b4:	e0ffff03 	ldbu	r3,-4(fp)
200257b8:	d0a04644 	addi	r2,gp,-32487
200257bc:	1885883a 	add	r2,r3,r2
200257c0:	10800003 	ldbu	r2,0(r2)
200257c4:	10c03fcc 	andi	r3,r2,255
200257c8:	00800034 	movhi	r2,0
200257cc:	10801704 	addi	r2,r2,92
200257d0:	10c5883a 	add	r2,r2,r3
200257d4:	10800003 	ldbu	r2,0(r2)
200257d8:	2085883a 	add	r2,r4,r2
200257dc:	d0a03c05 	stb	r2,-32528(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
200257e0:	0001883a 	nop
200257e4:	e037883a 	mov	sp,fp
200257e8:	df000017 	ldw	fp,0(sp)
200257ec:	dec00104 	addi	sp,sp,4
200257f0:	f800283a 	ret

200257f4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
200257f4:	defffc04 	addi	sp,sp,-16
200257f8:	df000315 	stw	fp,12(sp)
200257fc:	df000304 	addi	fp,sp,12
20025800:	e13ffe15 	stw	r4,-8(fp)
20025804:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
20025808:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
2002580c:	00000b06 	br	2002583c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
20025810:	e0bffe17 	ldw	r2,-8(fp)
20025814:	10c00044 	addi	r3,r2,1
20025818:	e0fffe15 	stw	r3,-8(fp)
2002581c:	e0ffff17 	ldw	r3,-4(fp)
20025820:	19000044 	addi	r4,r3,1
20025824:	e13fff15 	stw	r4,-4(fp)
20025828:	18c00003 	ldbu	r3,0(r3)
2002582c:	10c00005 	stb	r3,0(r2)
        len++;
20025830:	e0bffd03 	ldbu	r2,-12(fp)
20025834:	10800044 	addi	r2,r2,1
20025838:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
2002583c:	e0bfff17 	ldw	r2,-4(fp)
20025840:	10800003 	ldbu	r2,0(r2)
20025844:	10803fcc 	andi	r2,r2,255
20025848:	103ff11e 	bne	r2,zero,20025810 <__flash_rwdata_start+0xffff7d28>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
2002584c:	e0bffe17 	ldw	r2,-8(fp)
20025850:	10000005 	stb	zero,0(r2)
    return (len);
20025854:	e0bffd03 	ldbu	r2,-12(fp)
}
20025858:	e037883a 	mov	sp,fp
2002585c:	df000017 	ldw	fp,0(sp)
20025860:	dec00104 	addi	sp,sp,4
20025864:	f800283a 	ret

20025868 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
20025868:	defffd04 	addi	sp,sp,-12
2002586c:	df000215 	stw	fp,8(sp)
20025870:	df000204 	addi	fp,sp,8
20025874:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
20025878:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
2002587c:	00000606 	br	20025898 <OS_StrLen+0x30>
        psrc++;
20025880:	e0bfff17 	ldw	r2,-4(fp)
20025884:	10800044 	addi	r2,r2,1
20025888:	e0bfff15 	stw	r2,-4(fp)
        len++;
2002588c:	e0bffe03 	ldbu	r2,-8(fp)
20025890:	10800044 	addi	r2,r2,1
20025894:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
20025898:	e0bfff17 	ldw	r2,-4(fp)
2002589c:	10800003 	ldbu	r2,0(r2)
200258a0:	10803fcc 	andi	r2,r2,255
200258a4:	103ff61e 	bne	r2,zero,20025880 <__flash_rwdata_start+0xffff7d98>
        psrc++;
        len++;
    }
    return (len);
200258a8:	e0bffe03 	ldbu	r2,-8(fp)
}
200258ac:	e037883a 	mov	sp,fp
200258b0:	df000017 	ldw	fp,0(sp)
200258b4:	dec00104 	addi	sp,sp,4
200258b8:	f800283a 	ret

200258bc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
200258bc:	defffa04 	addi	sp,sp,-24
200258c0:	dfc00515 	stw	ra,20(sp)
200258c4:	df000415 	stw	fp,16(sp)
200258c8:	df000404 	addi	fp,sp,16
200258cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200258d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200258d4:	0005303a 	rdctl	r2,status
200258d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200258dc:	e0fffd17 	ldw	r3,-12(fp)
200258e0:	00bfff84 	movi	r2,-2
200258e4:	1884703a 	and	r2,r3,r2
200258e8:	1001703a 	wrctl	status,r2
  
  return context;
200258ec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
200258f0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
200258f4:	d0a03b17 	ldw	r2,-32532(gp)
200258f8:	10800044 	addi	r2,r2,1
200258fc:	d0a03b15 	stw	r2,-32532(gp)
20025900:	e0bffc17 	ldw	r2,-16(fp)
20025904:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20025908:	e0bffe17 	ldw	r2,-8(fp)
2002590c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
20025910:	002d27c0 	call	2002d27c <OSTaskIdleHook>
    }
20025914:	003fef06 	br	200258d4 <__flash_rwdata_start+0xffff7dec>

20025918 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
20025918:	defffa04 	addi	sp,sp,-24
2002591c:	dfc00515 	stw	ra,20(sp)
20025920:	df000415 	stw	fp,16(sp)
20025924:	df000404 	addi	fp,sp,16
20025928:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002592c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
20025930:	00000206 	br	2002593c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
20025934:	01003204 	movi	r4,200
20025938:	002b04c0 	call	2002b04c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
2002593c:	d0a04c03 	ldbu	r2,-32464(gp)
20025940:	10803fcc 	andi	r2,r2,255
20025944:	103ffb26 	beq	r2,zero,20025934 <__flash_rwdata_start+0xffff7e4c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
20025948:	d0a04017 	ldw	r2,-32512(gp)
2002594c:	01401904 	movi	r5,100
20025950:	1009883a 	mov	r4,r2
20025954:	00230680 	call	20023068 <__udivsi3>
20025958:	d0a04015 	stw	r2,-32512(gp)
    if (OSIdleCtrMax == 0L) {
2002595c:	d0a04017 	ldw	r2,-32512(gp)
20025960:	1000031e 	bne	r2,zero,20025970 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
20025964:	d0204205 	stb	zero,-32504(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
20025968:	01003fc4 	movi	r4,255
2002596c:	002acd40 	call	2002acd4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20025970:	0005303a 	rdctl	r2,status
20025974:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20025978:	e0fffd17 	ldw	r3,-12(fp)
2002597c:	00bfff84 	movi	r2,-2
20025980:	1884703a 	and	r2,r3,r2
20025984:	1001703a 	wrctl	status,r2
  
  return context;
20025988:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
2002598c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
20025990:	d0a03b17 	ldw	r2,-32532(gp)
20025994:	d0a04d15 	stw	r2,-32460(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
20025998:	d0203b15 	stw	zero,-32532(gp)
2002599c:	e0bffc17 	ldw	r2,-16(fp)
200259a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200259a4:	e0bffe17 	ldw	r2,-8(fp)
200259a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
200259ac:	d0a04d17 	ldw	r2,-32460(gp)
200259b0:	d0e04017 	ldw	r3,-32512(gp)
200259b4:	180b883a 	mov	r5,r3
200259b8:	1009883a 	mov	r4,r2
200259bc:	00230680 	call	20023068 <__udivsi3>
200259c0:	1007883a 	mov	r3,r2
200259c4:	00801904 	movi	r2,100
200259c8:	10c5c83a 	sub	r2,r2,r3
200259cc:	d0a04205 	stb	r2,-32504(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
200259d0:	002d1fc0 	call	2002d1fc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
200259d4:	00259e40 	call	200259e4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
200259d8:	01001904 	movi	r4,100
200259dc:	002b04c0 	call	2002b04c <OSTimeDly>
    }
200259e0:	003fe306 	br	20025970 <__flash_rwdata_start+0xffff7e88>

200259e4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
200259e4:	defffa04 	addi	sp,sp,-24
200259e8:	dfc00515 	stw	ra,20(sp)
200259ec:	df000415 	stw	fp,16(sp)
200259f0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
200259f4:	e03ffc05 	stb	zero,-16(fp)
200259f8:	00002406 	br	20025a8c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
200259fc:	e0bffc03 	ldbu	r2,-16(fp)
20025a00:	e0fffe04 	addi	r3,fp,-8
20025a04:	180b883a 	mov	r5,r3
20025a08:	1009883a 	mov	r4,r2
20025a0c:	002ab140 	call	2002ab14 <OSTaskStkChk>
20025a10:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
20025a14:	e0bffc43 	ldbu	r2,-15(fp)
20025a18:	1000191e 	bne	r2,zero,20025a80 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
20025a1c:	e0fffc03 	ldbu	r3,-16(fp)
20025a20:	00800074 	movhi	r2,1
20025a24:	10a3c304 	addi	r2,r2,-28916
20025a28:	18c7883a 	add	r3,r3,r3
20025a2c:	18c7883a 	add	r3,r3,r3
20025a30:	10c5883a 	add	r2,r2,r3
20025a34:	10800017 	ldw	r2,0(r2)
20025a38:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
20025a3c:	e0bffd17 	ldw	r2,-12(fp)
20025a40:	10000f26 	beq	r2,zero,20025a80 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
20025a44:	e0bffd17 	ldw	r2,-12(fp)
20025a48:	10800060 	cmpeqi	r2,r2,1
20025a4c:	10000c1e 	bne	r2,zero,20025a80 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
20025a50:	e0bffd17 	ldw	r2,-12(fp)
20025a54:	10c00217 	ldw	r3,8(r2)
20025a58:	e0bffd17 	ldw	r2,-12(fp)
20025a5c:	10800317 	ldw	r2,12(r2)
20025a60:	1085883a 	add	r2,r2,r2
20025a64:	1085883a 	add	r2,r2,r2
20025a68:	1887883a 	add	r3,r3,r2
20025a6c:	e0bffd17 	ldw	r2,-12(fp)
20025a70:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
20025a74:	e0ffff17 	ldw	r3,-4(fp)
20025a78:	e0bffd17 	ldw	r2,-12(fp)
20025a7c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
20025a80:	e0bffc03 	ldbu	r2,-16(fp)
20025a84:	10800044 	addi	r2,r2,1
20025a88:	e0bffc05 	stb	r2,-16(fp)
20025a8c:	e0bffc03 	ldbu	r2,-16(fp)
20025a90:	10800570 	cmpltui	r2,r2,21
20025a94:	103fd91e 	bne	r2,zero,200259fc <__flash_rwdata_start+0xffff7f14>
#endif
                }
            }
        }
    }
}
20025a98:	0001883a 	nop
20025a9c:	e037883a 	mov	sp,fp
20025aa0:	dfc00117 	ldw	ra,4(sp)
20025aa4:	df000017 	ldw	fp,0(sp)
20025aa8:	dec00204 	addi	sp,sp,8
20025aac:	f800283a 	ret

20025ab0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
20025ab0:	defff204 	addi	sp,sp,-56
20025ab4:	dfc00d15 	stw	ra,52(sp)
20025ab8:	df000c15 	stw	fp,48(sp)
20025abc:	df000c04 	addi	fp,sp,48
20025ac0:	e17ffc15 	stw	r5,-16(fp)
20025ac4:	e1bffd15 	stw	r6,-12(fp)
20025ac8:	3807883a 	mov	r3,r7
20025acc:	e0800417 	ldw	r2,16(fp)
20025ad0:	e13ffb05 	stb	r4,-20(fp)
20025ad4:	e0fffe0d 	sth	r3,-8(fp)
20025ad8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20025adc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20025ae0:	0005303a 	rdctl	r2,status
20025ae4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20025ae8:	e0fffa17 	ldw	r3,-24(fp)
20025aec:	00bfff84 	movi	r2,-2
20025af0:	1884703a 	and	r2,r3,r2
20025af4:	1001703a 	wrctl	status,r2
  
  return context;
20025af8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
20025afc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
20025b00:	d0a04117 	ldw	r2,-32508(gp)
20025b04:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
20025b08:	e0bff617 	ldw	r2,-40(fp)
20025b0c:	10009326 	beq	r2,zero,20025d5c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
20025b10:	e0bff617 	ldw	r2,-40(fp)
20025b14:	10800517 	ldw	r2,20(r2)
20025b18:	d0a04115 	stw	r2,-32508(gp)
20025b1c:	e0bff417 	ldw	r2,-48(fp)
20025b20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20025b24:	e0bff817 	ldw	r2,-32(fp)
20025b28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
20025b2c:	e0bff617 	ldw	r2,-40(fp)
20025b30:	e0fffc17 	ldw	r3,-16(fp)
20025b34:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
20025b38:	e0bff617 	ldw	r2,-40(fp)
20025b3c:	e0fffb03 	ldbu	r3,-20(fp)
20025b40:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
20025b44:	e0bff617 	ldw	r2,-40(fp)
20025b48:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
20025b4c:	e0bff617 	ldw	r2,-40(fp)
20025b50:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
20025b54:	e0bff617 	ldw	r2,-40(fp)
20025b58:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
20025b5c:	e0bff617 	ldw	r2,-40(fp)
20025b60:	e0c00317 	ldw	r3,12(fp)
20025b64:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
20025b68:	e0bff617 	ldw	r2,-40(fp)
20025b6c:	e0c00217 	ldw	r3,8(fp)
20025b70:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
20025b74:	e0bff617 	ldw	r2,-40(fp)
20025b78:	e0fffd17 	ldw	r3,-12(fp)
20025b7c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
20025b80:	e0bff617 	ldw	r2,-40(fp)
20025b84:	e0ffff0b 	ldhu	r3,-4(fp)
20025b88:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
20025b8c:	e0bff617 	ldw	r2,-40(fp)
20025b90:	e0fffe0b 	ldhu	r3,-8(fp)
20025b94:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
20025b98:	e0bff617 	ldw	r2,-40(fp)
20025b9c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
20025ba0:	e0bffb03 	ldbu	r2,-20(fp)
20025ba4:	1004d0fa 	srli	r2,r2,3
20025ba8:	1007883a 	mov	r3,r2
20025bac:	e0bff617 	ldw	r2,-40(fp)
20025bb0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
20025bb4:	e0bffb03 	ldbu	r2,-20(fp)
20025bb8:	108001cc 	andi	r2,r2,7
20025bbc:	1007883a 	mov	r3,r2
20025bc0:	e0bff617 	ldw	r2,-40(fp)
20025bc4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
20025bc8:	e0bff617 	ldw	r2,-40(fp)
20025bcc:	10800d03 	ldbu	r2,52(r2)
20025bd0:	10803fcc 	andi	r2,r2,255
20025bd4:	00c00044 	movi	r3,1
20025bd8:	1884983a 	sll	r2,r3,r2
20025bdc:	1007883a 	mov	r3,r2
20025be0:	e0bff617 	ldw	r2,-40(fp)
20025be4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
20025be8:	e0bff617 	ldw	r2,-40(fp)
20025bec:	10800cc3 	ldbu	r2,51(r2)
20025bf0:	10803fcc 	andi	r2,r2,255
20025bf4:	00c00044 	movi	r3,1
20025bf8:	1884983a 	sll	r2,r3,r2
20025bfc:	1007883a 	mov	r3,r2
20025c00:	e0bff617 	ldw	r2,-40(fp)
20025c04:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
20025c08:	e0bff617 	ldw	r2,-40(fp)
20025c0c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
20025c10:	e0bff617 	ldw	r2,-40(fp)
20025c14:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
20025c18:	e0bff617 	ldw	r2,-40(fp)
20025c1c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
20025c20:	e0bff617 	ldw	r2,-40(fp)
20025c24:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
20025c28:	e0bff617 	ldw	r2,-40(fp)
20025c2c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
20025c30:	e0bff617 	ldw	r2,-40(fp)
20025c34:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
20025c38:	e0bff617 	ldw	r2,-40(fp)
20025c3c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
20025c40:	e0bff617 	ldw	r2,-40(fp)
20025c44:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
20025c48:	e0bff617 	ldw	r2,-40(fp)
20025c4c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
20025c50:	e0bff617 	ldw	r2,-40(fp)
20025c54:	00c00fc4 	movi	r3,63
20025c58:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
20025c5c:	e0bff617 	ldw	r2,-40(fp)
20025c60:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
20025c64:	e13ff617 	ldw	r4,-40(fp)
20025c68:	002d29c0 	call	2002d29c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
20025c6c:	e13ff617 	ldw	r4,-40(fp)
20025c70:	002d1940 	call	2002d194 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20025c74:	0005303a 	rdctl	r2,status
20025c78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20025c7c:	e0fff517 	ldw	r3,-44(fp)
20025c80:	00bfff84 	movi	r2,-2
20025c84:	1884703a 	and	r2,r3,r2
20025c88:	1001703a 	wrctl	status,r2
  
  return context;
20025c8c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
20025c90:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
20025c94:	e0fffb03 	ldbu	r3,-20(fp)
20025c98:	00800074 	movhi	r2,1
20025c9c:	10a3c304 	addi	r2,r2,-28916
20025ca0:	18c7883a 	add	r3,r3,r3
20025ca4:	18c7883a 	add	r3,r3,r3
20025ca8:	10c5883a 	add	r2,r2,r3
20025cac:	e0fff617 	ldw	r3,-40(fp)
20025cb0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
20025cb4:	d0e03d17 	ldw	r3,-32524(gp)
20025cb8:	e0bff617 	ldw	r2,-40(fp)
20025cbc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
20025cc0:	e0bff617 	ldw	r2,-40(fp)
20025cc4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
20025cc8:	d0a03d17 	ldw	r2,-32524(gp)
20025ccc:	10000326 	beq	r2,zero,20025cdc <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
20025cd0:	d0a03d17 	ldw	r2,-32524(gp)
20025cd4:	e0fff617 	ldw	r3,-40(fp)
20025cd8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
20025cdc:	e0bff617 	ldw	r2,-40(fp)
20025ce0:	d0a03d15 	stw	r2,-32524(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
20025ce4:	e0bff617 	ldw	r2,-40(fp)
20025ce8:	10c00d83 	ldbu	r3,54(r2)
20025cec:	d0a04603 	ldbu	r2,-32488(gp)
20025cf0:	1884b03a 	or	r2,r3,r2
20025cf4:	d0a04605 	stb	r2,-32488(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20025cf8:	e0bff617 	ldw	r2,-40(fp)
20025cfc:	10800d03 	ldbu	r2,52(r2)
20025d00:	10c03fcc 	andi	r3,r2,255
20025d04:	e0bff617 	ldw	r2,-40(fp)
20025d08:	10800d03 	ldbu	r2,52(r2)
20025d0c:	11003fcc 	andi	r4,r2,255
20025d10:	d0a04644 	addi	r2,gp,-32487
20025d14:	2085883a 	add	r2,r4,r2
20025d18:	11000003 	ldbu	r4,0(r2)
20025d1c:	e0bff617 	ldw	r2,-40(fp)
20025d20:	10800d43 	ldbu	r2,53(r2)
20025d24:	2084b03a 	or	r2,r4,r2
20025d28:	1009883a 	mov	r4,r2
20025d2c:	d0a04644 	addi	r2,gp,-32487
20025d30:	1885883a 	add	r2,r3,r2
20025d34:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
20025d38:	d0a04243 	ldbu	r2,-32503(gp)
20025d3c:	10800044 	addi	r2,r2,1
20025d40:	d0a04245 	stb	r2,-32503(gp)
20025d44:	e0bff417 	ldw	r2,-48(fp)
20025d48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20025d4c:	e0bff717 	ldw	r2,-36(fp)
20025d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
20025d54:	0005883a 	mov	r2,zero
20025d58:	00000506 	br	20025d70 <OS_TCBInit+0x2c0>
20025d5c:	e0bff417 	ldw	r2,-48(fp)
20025d60:	e0bff915 	stw	r2,-28(fp)
20025d64:	e0bff917 	ldw	r2,-28(fp)
20025d68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
20025d6c:	00801084 	movi	r2,66
}
20025d70:	e037883a 	mov	sp,fp
20025d74:	dfc00117 	ldw	ra,4(sp)
20025d78:	df000017 	ldw	fp,0(sp)
20025d7c:	dec00204 	addi	sp,sp,8
20025d80:	f800283a 	ret

20025d84 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
20025d84:	defffe04 	addi	sp,sp,-8
20025d88:	df000115 	stw	fp,4(sp)
20025d8c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
20025d90:	d0a00d04 	addi	r2,gp,-32716
20025d94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
20025d98:	d0a00e04 	addi	r2,gp,-32712
20025d9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
20025da0:	d0a00f84 	addi	r2,gp,-32706
20025da4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
20025da8:	d0a01004 	addi	r2,gp,-32704
20025dac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
20025db0:	d0a00f04 	addi	r2,gp,-32708
20025db4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
20025db8:	d0a01084 	addi	r2,gp,-32702
20025dbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
20025dc0:	d0a01104 	addi	r2,gp,-32700
20025dc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
20025dc8:	d0a01184 	addi	r2,gp,-32698
20025dcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
20025dd0:	d0a01204 	addi	r2,gp,-32696
20025dd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
20025dd8:	d0a01284 	addi	r2,gp,-32694
20025ddc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
20025de0:	d0a01304 	addi	r2,gp,-32692
20025de4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
20025de8:	d0a01384 	addi	r2,gp,-32690
20025dec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
20025df0:	d0a01404 	addi	r2,gp,-32688
20025df4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
20025df8:	d0a01484 	addi	r2,gp,-32686
20025dfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
20025e00:	d0a01504 	addi	r2,gp,-32684
20025e04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
20025e08:	d0a01584 	addi	r2,gp,-32682
20025e0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
20025e10:	d0a01604 	addi	r2,gp,-32680
20025e14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
20025e18:	d0a01684 	addi	r2,gp,-32678
20025e1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
20025e20:	d0a01704 	addi	r2,gp,-32676
20025e24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
20025e28:	d0a01784 	addi	r2,gp,-32674
20025e2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
20025e30:	d0a01804 	addi	r2,gp,-32672
20025e34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
20025e38:	d0a01884 	addi	r2,gp,-32670
20025e3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
20025e40:	d0a01904 	addi	r2,gp,-32668
20025e44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
20025e48:	d0a01984 	addi	r2,gp,-32666
20025e4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
20025e50:	d0a01a04 	addi	r2,gp,-32664
20025e54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
20025e58:	d0a01a84 	addi	r2,gp,-32662
20025e5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
20025e60:	d0a01b04 	addi	r2,gp,-32660
20025e64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
20025e68:	d0a01b84 	addi	r2,gp,-32658
20025e6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
20025e70:	d0a01c04 	addi	r2,gp,-32656
20025e74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
20025e78:	d0a01c84 	addi	r2,gp,-32654
20025e7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
20025e80:	d0a01d04 	addi	r2,gp,-32652
20025e84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
20025e88:	d0a01d84 	addi	r2,gp,-32650
20025e8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
20025e90:	d0a01e04 	addi	r2,gp,-32648
20025e94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
20025e98:	d0a01e84 	addi	r2,gp,-32646
20025e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
20025ea0:	d0a01f04 	addi	r2,gp,-32644
20025ea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
20025ea8:	d0a01f84 	addi	r2,gp,-32642
20025eac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
20025eb0:	d0a02004 	addi	r2,gp,-32640
20025eb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
20025eb8:	d0a02084 	addi	r2,gp,-32638
20025ebc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
20025ec0:	d0a02104 	addi	r2,gp,-32636
20025ec4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
20025ec8:	d0a02184 	addi	r2,gp,-32634
20025ecc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
20025ed0:	d0a02204 	addi	r2,gp,-32632
20025ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
20025ed8:	d0a02284 	addi	r2,gp,-32630
20025edc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
20025ee0:	d0a02304 	addi	r2,gp,-32628
20025ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
20025ee8:	d0a02384 	addi	r2,gp,-32626
20025eec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
20025ef0:	d0a02404 	addi	r2,gp,-32624
20025ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
20025ef8:	d0a02904 	addi	r2,gp,-32604
20025efc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
20025f00:	0001883a 	nop
20025f04:	e037883a 	mov	sp,fp
20025f08:	df000017 	ldw	fp,0(sp)
20025f0c:	dec00104 	addi	sp,sp,4
20025f10:	f800283a 	ret

20025f14 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
20025f14:	defff204 	addi	sp,sp,-56
20025f18:	df000d15 	stw	fp,52(sp)
20025f1c:	df000d04 	addi	fp,sp,52
20025f20:	e13ffc15 	stw	r4,-16(fp)
20025f24:	2807883a 	mov	r3,r5
20025f28:	3005883a 	mov	r2,r6
20025f2c:	e1ffff15 	stw	r7,-4(fp)
20025f30:	e0fffd0d 	sth	r3,-12(fp)
20025f34:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20025f38:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20025f3c:	e0bfff17 	ldw	r2,-4(fp)
20025f40:	1000021e 	bne	r2,zero,20025f4c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
20025f44:	0005883a 	mov	r2,zero
20025f48:	0000b006 	br	2002620c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
20025f4c:	e0bffc17 	ldw	r2,-16(fp)
20025f50:	1000051e 	bne	r2,zero,20025f68 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20025f54:	e0bfff17 	ldw	r2,-4(fp)
20025f58:	00c01b84 	movi	r3,110
20025f5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20025f60:	0005883a 	mov	r2,zero
20025f64:	0000a906 	br	2002620c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
20025f68:	e0bffc17 	ldw	r2,-16(fp)
20025f6c:	10800003 	ldbu	r2,0(r2)
20025f70:	10803fcc 	andi	r2,r2,255
20025f74:	10800160 	cmpeqi	r2,r2,5
20025f78:	1000051e 	bne	r2,zero,20025f90 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
20025f7c:	e0bfff17 	ldw	r2,-4(fp)
20025f80:	00c00044 	movi	r3,1
20025f84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20025f88:	0005883a 	mov	r2,zero
20025f8c:	00009f06 	br	2002620c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
20025f90:	e0fffe03 	ldbu	r3,-8(fp)
20025f94:	00bfe004 	movi	r2,-128
20025f98:	1884703a 	and	r2,r3,r2
20025f9c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
20025fa0:	e0bff503 	ldbu	r2,-44(fp)
20025fa4:	10000626 	beq	r2,zero,20025fc0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
20025fa8:	e0bffe03 	ldbu	r2,-8(fp)
20025fac:	10801fcc 	andi	r2,r2,127
20025fb0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
20025fb4:	00800044 	movi	r2,1
20025fb8:	e0bff385 	stb	r2,-50(fp)
20025fbc:	00000106 	br	20025fc4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
20025fc0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
20025fc4:	e0bfff17 	ldw	r2,-4(fp)
20025fc8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20025fcc:	0005303a 	rdctl	r2,status
20025fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20025fd4:	e0fffb17 	ldw	r3,-20(fp)
20025fd8:	00bfff84 	movi	r2,-2
20025fdc:	1884703a 	and	r2,r3,r2
20025fe0:	1001703a 	wrctl	status,r2
  
  return context;
20025fe4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
20025fe8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
20025fec:	e0bffe03 	ldbu	r2,-8(fp)
20025ff0:	10c00060 	cmpeqi	r3,r2,1
20025ff4:	18005f1e 	bne	r3,zero,20026174 <OSFlagAccept+0x260>
20025ff8:	10c00088 	cmpgei	r3,r2,2
20025ffc:	1800021e 	bne	r3,zero,20026008 <OSFlagAccept+0xf4>
20026000:	10003f26 	beq	r2,zero,20026100 <OSFlagAccept+0x1ec>
20026004:	00007706 	br	200261e4 <OSFlagAccept+0x2d0>
20026008:	10c000a0 	cmpeqi	r3,r2,2
2002600c:	1800031e 	bne	r3,zero,2002601c <OSFlagAccept+0x108>
20026010:	108000e0 	cmpeqi	r2,r2,3
20026014:	10001e1e 	bne	r2,zero,20026090 <OSFlagAccept+0x17c>
20026018:	00007206 	br	200261e4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
2002601c:	e0bffc17 	ldw	r2,-16(fp)
20026020:	10c0020b 	ldhu	r3,8(r2)
20026024:	e0bffd0b 	ldhu	r2,-12(fp)
20026028:	1884703a 	and	r2,r3,r2
2002602c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
20026030:	e0fff30b 	ldhu	r3,-52(fp)
20026034:	e0bffd0b 	ldhu	r2,-12(fp)
20026038:	18800d1e 	bne	r3,r2,20026070 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
2002603c:	e0bff383 	ldbu	r2,-50(fp)
20026040:	10800058 	cmpnei	r2,r2,1
20026044:	10000d1e 	bne	r2,zero,2002607c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
20026048:	e0bffc17 	ldw	r2,-16(fp)
2002604c:	1080020b 	ldhu	r2,8(r2)
20026050:	1007883a 	mov	r3,r2
20026054:	e0bff30b 	ldhu	r2,-52(fp)
20026058:	0084303a 	nor	r2,zero,r2
2002605c:	1884703a 	and	r2,r3,r2
20026060:	1007883a 	mov	r3,r2
20026064:	e0bffc17 	ldw	r2,-16(fp)
20026068:	10c0020d 	sth	r3,8(r2)
2002606c:	00000306 	br	2002607c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20026070:	e0bfff17 	ldw	r2,-4(fp)
20026074:	00c01c04 	movi	r3,112
20026078:	10c00005 	stb	r3,0(r2)
2002607c:	e0bff417 	ldw	r2,-48(fp)
20026080:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026084:	e0bff617 	ldw	r2,-40(fp)
20026088:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
2002608c:	00005e06 	br	20026208 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
20026090:	e0bffc17 	ldw	r2,-16(fp)
20026094:	10c0020b 	ldhu	r3,8(r2)
20026098:	e0bffd0b 	ldhu	r2,-12(fp)
2002609c:	1884703a 	and	r2,r3,r2
200260a0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
200260a4:	e0bff30b 	ldhu	r2,-52(fp)
200260a8:	10000d26 	beq	r2,zero,200260e0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200260ac:	e0bff383 	ldbu	r2,-50(fp)
200260b0:	10800058 	cmpnei	r2,r2,1
200260b4:	10000d1e 	bne	r2,zero,200260ec <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
200260b8:	e0bffc17 	ldw	r2,-16(fp)
200260bc:	1080020b 	ldhu	r2,8(r2)
200260c0:	1007883a 	mov	r3,r2
200260c4:	e0bff30b 	ldhu	r2,-52(fp)
200260c8:	0084303a 	nor	r2,zero,r2
200260cc:	1884703a 	and	r2,r3,r2
200260d0:	1007883a 	mov	r3,r2
200260d4:	e0bffc17 	ldw	r2,-16(fp)
200260d8:	10c0020d 	sth	r3,8(r2)
200260dc:	00000306 	br	200260ec <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
200260e0:	e0bfff17 	ldw	r2,-4(fp)
200260e4:	00c01c04 	movi	r3,112
200260e8:	10c00005 	stb	r3,0(r2)
200260ec:	e0bff417 	ldw	r2,-48(fp)
200260f0:	e0bff715 	stw	r2,-36(fp)
200260f4:	e0bff717 	ldw	r2,-36(fp)
200260f8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
200260fc:	00004206 	br	20026208 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20026100:	e0bffc17 	ldw	r2,-16(fp)
20026104:	1080020b 	ldhu	r2,8(r2)
20026108:	0084303a 	nor	r2,zero,r2
2002610c:	1007883a 	mov	r3,r2
20026110:	e0bffd0b 	ldhu	r2,-12(fp)
20026114:	1884703a 	and	r2,r3,r2
20026118:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2002611c:	e0fff30b 	ldhu	r3,-52(fp)
20026120:	e0bffd0b 	ldhu	r2,-12(fp)
20026124:	18800b1e 	bne	r3,r2,20026154 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20026128:	e0bff383 	ldbu	r2,-50(fp)
2002612c:	10800058 	cmpnei	r2,r2,1
20026130:	10000b1e 	bne	r2,zero,20026160 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20026134:	e0bffc17 	ldw	r2,-16(fp)
20026138:	10c0020b 	ldhu	r3,8(r2)
2002613c:	e0bff30b 	ldhu	r2,-52(fp)
20026140:	1884b03a 	or	r2,r3,r2
20026144:	1007883a 	mov	r3,r2
20026148:	e0bffc17 	ldw	r2,-16(fp)
2002614c:	10c0020d 	sth	r3,8(r2)
20026150:	00000306 	br	20026160 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
20026154:	e0bfff17 	ldw	r2,-4(fp)
20026158:	00c01c04 	movi	r3,112
2002615c:	10c00005 	stb	r3,0(r2)
20026160:	e0bff417 	ldw	r2,-48(fp)
20026164:	e0bff815 	stw	r2,-32(fp)
20026168:	e0bff817 	ldw	r2,-32(fp)
2002616c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
20026170:	00002506 	br	20026208 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
20026174:	e0bffc17 	ldw	r2,-16(fp)
20026178:	1080020b 	ldhu	r2,8(r2)
2002617c:	0084303a 	nor	r2,zero,r2
20026180:	1007883a 	mov	r3,r2
20026184:	e0bffd0b 	ldhu	r2,-12(fp)
20026188:	1884703a 	and	r2,r3,r2
2002618c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
20026190:	e0bff30b 	ldhu	r2,-52(fp)
20026194:	10000b26 	beq	r2,zero,200261c4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20026198:	e0bff383 	ldbu	r2,-50(fp)
2002619c:	10800058 	cmpnei	r2,r2,1
200261a0:	10000b1e 	bne	r2,zero,200261d0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
200261a4:	e0bffc17 	ldw	r2,-16(fp)
200261a8:	10c0020b 	ldhu	r3,8(r2)
200261ac:	e0bff30b 	ldhu	r2,-52(fp)
200261b0:	1884b03a 	or	r2,r3,r2
200261b4:	1007883a 	mov	r3,r2
200261b8:	e0bffc17 	ldw	r2,-16(fp)
200261bc:	10c0020d 	sth	r3,8(r2)
200261c0:	00000306 	br	200261d0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
200261c4:	e0bfff17 	ldw	r2,-4(fp)
200261c8:	00c01c04 	movi	r3,112
200261cc:	10c00005 	stb	r3,0(r2)
200261d0:	e0bff417 	ldw	r2,-48(fp)
200261d4:	e0bff915 	stw	r2,-28(fp)
200261d8:	e0bff917 	ldw	r2,-28(fp)
200261dc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
200261e0:	00000906 	br	20026208 <OSFlagAccept+0x2f4>
200261e4:	e0bff417 	ldw	r2,-48(fp)
200261e8:	e0bffa15 	stw	r2,-24(fp)
200261ec:	e0bffa17 	ldw	r2,-24(fp)
200261f0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
200261f4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
200261f8:	e0bfff17 	ldw	r2,-4(fp)
200261fc:	00c01bc4 	movi	r3,111
20026200:	10c00005 	stb	r3,0(r2)
             break;
20026204:	0001883a 	nop
    }
    return (flags_rdy);
20026208:	e0bff30b 	ldhu	r2,-52(fp)
}
2002620c:	e037883a 	mov	sp,fp
20026210:	df000017 	ldw	fp,0(sp)
20026214:	dec00104 	addi	sp,sp,4
20026218:	f800283a 	ret

2002621c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
2002621c:	defff804 	addi	sp,sp,-32
20026220:	df000715 	stw	fp,28(sp)
20026224:	df000704 	addi	fp,sp,28
20026228:	2005883a 	mov	r2,r4
2002622c:	e17fff15 	stw	r5,-4(fp)
20026230:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
20026234:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
20026238:	e0bfff17 	ldw	r2,-4(fp)
2002623c:	1000021e 	bne	r2,zero,20026248 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
20026240:	0005883a 	mov	r2,zero
20026244:	00003306 	br	20026314 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
20026248:	d0a04803 	ldbu	r2,-32480(gp)
2002624c:	10803fcc 	andi	r2,r2,255
20026250:	10000526 	beq	r2,zero,20026268 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
20026254:	e0bfff17 	ldw	r2,-4(fp)
20026258:	00c00404 	movi	r3,16
2002625c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
20026260:	0005883a 	mov	r2,zero
20026264:	00002b06 	br	20026314 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20026268:	0005303a 	rdctl	r2,status
2002626c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20026270:	e0fffd17 	ldw	r3,-12(fp)
20026274:	00bfff84 	movi	r2,-2
20026278:	1884703a 	and	r2,r3,r2
2002627c:	1001703a 	wrctl	status,r2
  
  return context;
20026280:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20026284:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
20026288:	d0a04b17 	ldw	r2,-32468(gp)
2002628c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
20026290:	e0bffb17 	ldw	r2,-20(fp)
20026294:	10001726 	beq	r2,zero,200262f4 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
20026298:	d0a04b17 	ldw	r2,-32468(gp)
2002629c:	10800117 	ldw	r2,4(r2)
200262a0:	d0a04b15 	stw	r2,-32468(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
200262a4:	e0bffb17 	ldw	r2,-20(fp)
200262a8:	00c00144 	movi	r3,5
200262ac:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
200262b0:	e0bffb17 	ldw	r2,-20(fp)
200262b4:	e0fffe0b 	ldhu	r3,-8(fp)
200262b8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
200262bc:	e0bffb17 	ldw	r2,-20(fp)
200262c0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
200262c4:	e0bffb17 	ldw	r2,-20(fp)
200262c8:	00c00fc4 	movi	r3,63
200262cc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
200262d0:	e0bffb17 	ldw	r2,-20(fp)
200262d4:	100002c5 	stb	zero,11(r2)
200262d8:	e0bff917 	ldw	r2,-28(fp)
200262dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200262e0:	e0bffa17 	ldw	r2,-24(fp)
200262e4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
200262e8:	e0bfff17 	ldw	r2,-4(fp)
200262ec:	10000005 	stb	zero,0(r2)
200262f0:	00000706 	br	20026310 <OSFlagCreate+0xf4>
200262f4:	e0bff917 	ldw	r2,-28(fp)
200262f8:	e0bffc15 	stw	r2,-16(fp)
200262fc:	e0bffc17 	ldw	r2,-16(fp)
20026300:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
20026304:	e0bfff17 	ldw	r2,-4(fp)
20026308:	00c01c84 	movi	r3,114
2002630c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
20026310:	e0bffb17 	ldw	r2,-20(fp)
}
20026314:	e037883a 	mov	sp,fp
20026318:	df000017 	ldw	fp,0(sp)
2002631c:	dec00104 	addi	sp,sp,4
20026320:	f800283a 	ret

20026324 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
20026324:	defff204 	addi	sp,sp,-56
20026328:	dfc00d15 	stw	ra,52(sp)
2002632c:	df000c15 	stw	fp,48(sp)
20026330:	df000c04 	addi	fp,sp,48
20026334:	e13ffd15 	stw	r4,-12(fp)
20026338:	2805883a 	mov	r2,r5
2002633c:	e1bfff15 	stw	r6,-4(fp)
20026340:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20026344:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20026348:	e0bfff17 	ldw	r2,-4(fp)
2002634c:	1000021e 	bne	r2,zero,20026358 <OSFlagDel+0x34>
        return (pgrp);
20026350:	e0bffd17 	ldw	r2,-12(fp)
20026354:	00008006 	br	20026558 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
20026358:	e0bffd17 	ldw	r2,-12(fp)
2002635c:	1000051e 	bne	r2,zero,20026374 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20026360:	e0bfff17 	ldw	r2,-4(fp)
20026364:	00c01b84 	movi	r3,110
20026368:	10c00005 	stb	r3,0(r2)
        return (pgrp);
2002636c:	e0bffd17 	ldw	r2,-12(fp)
20026370:	00007906 	br	20026558 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20026374:	d0a04803 	ldbu	r2,-32480(gp)
20026378:	10803fcc 	andi	r2,r2,255
2002637c:	10000526 	beq	r2,zero,20026394 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
20026380:	e0bfff17 	ldw	r2,-4(fp)
20026384:	00c003c4 	movi	r3,15
20026388:	10c00005 	stb	r3,0(r2)
        return (pgrp);
2002638c:	e0bffd17 	ldw	r2,-12(fp)
20026390:	00007106 	br	20026558 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
20026394:	e0bffd17 	ldw	r2,-12(fp)
20026398:	10800003 	ldbu	r2,0(r2)
2002639c:	10803fcc 	andi	r2,r2,255
200263a0:	10800160 	cmpeqi	r2,r2,5
200263a4:	1000051e 	bne	r2,zero,200263bc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
200263a8:	e0bfff17 	ldw	r2,-4(fp)
200263ac:	00c00044 	movi	r3,1
200263b0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
200263b4:	e0bffd17 	ldw	r2,-12(fp)
200263b8:	00006706 	br	20026558 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200263bc:	0005303a 	rdctl	r2,status
200263c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200263c4:	e0fffc17 	ldw	r3,-16(fp)
200263c8:	00bfff84 	movi	r2,-2
200263cc:	1884703a 	and	r2,r3,r2
200263d0:	1001703a 	wrctl	status,r2
  
  return context;
200263d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200263d8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
200263dc:	e0bffd17 	ldw	r2,-12(fp)
200263e0:	10800117 	ldw	r2,4(r2)
200263e4:	10000326 	beq	r2,zero,200263f4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
200263e8:	00800044 	movi	r2,1
200263ec:	e0bff405 	stb	r2,-48(fp)
200263f0:	00000106 	br	200263f8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
200263f4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
200263f8:	e0bffe03 	ldbu	r2,-8(fp)
200263fc:	10000326 	beq	r2,zero,2002640c <OSFlagDel+0xe8>
20026400:	10800060 	cmpeqi	r2,r2,1
20026404:	1000231e 	bne	r2,zero,20026494 <OSFlagDel+0x170>
20026408:	00004806 	br	2002652c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
2002640c:	e0bff403 	ldbu	r2,-48(fp)
20026410:	1000161e 	bne	r2,zero,2002646c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
20026414:	e0bffd17 	ldw	r2,-12(fp)
20026418:	00c00fc4 	movi	r3,63
2002641c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
20026420:	e0bffd17 	ldw	r2,-12(fp)
20026424:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20026428:	e0bffd17 	ldw	r2,-12(fp)
2002642c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
20026430:	d0e04b17 	ldw	r3,-32468(gp)
20026434:	e0bffd17 	ldw	r2,-12(fp)
20026438:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
2002643c:	e0bffd17 	ldw	r2,-12(fp)
20026440:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
20026444:	e0bffd17 	ldw	r2,-12(fp)
20026448:	d0a04b15 	stw	r2,-32468(gp)
2002644c:	e0bff717 	ldw	r2,-36(fp)
20026450:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026454:	e0bff817 	ldw	r2,-32(fp)
20026458:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
2002645c:	e0bfff17 	ldw	r2,-4(fp)
20026460:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
20026464:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
20026468:	00003a06 	br	20026554 <OSFlagDel+0x230>
2002646c:	e0bff717 	ldw	r2,-36(fp)
20026470:	e0bff915 	stw	r2,-28(fp)
20026474:	e0bff917 	ldw	r2,-28(fp)
20026478:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
2002647c:	e0bfff17 	ldw	r2,-4(fp)
20026480:	00c01244 	movi	r3,73
20026484:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
20026488:	e0bffd17 	ldw	r2,-12(fp)
2002648c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
20026490:	00003006 	br	20026554 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20026494:	e0bffd17 	ldw	r2,-12(fp)
20026498:	10800117 	ldw	r2,4(r2)
2002649c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
200264a0:	00000606 	br	200264bc <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
200264a4:	000b883a 	mov	r5,zero
200264a8:	e13ff517 	ldw	r4,-44(fp)
200264ac:	00274900 	call	20027490 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
200264b0:	e0bff517 	ldw	r2,-44(fp)
200264b4:	10800017 	ldw	r2,0(r2)
200264b8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
200264bc:	e0bff517 	ldw	r2,-44(fp)
200264c0:	103ff81e 	bne	r2,zero,200264a4 <__flash_rwdata_start+0xffff89bc>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
200264c4:	e0bffd17 	ldw	r2,-12(fp)
200264c8:	00c00fc4 	movi	r3,63
200264cc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
200264d0:	e0bffd17 	ldw	r2,-12(fp)
200264d4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200264d8:	e0bffd17 	ldw	r2,-12(fp)
200264dc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
200264e0:	d0e04b17 	ldw	r3,-32468(gp)
200264e4:	e0bffd17 	ldw	r2,-12(fp)
200264e8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
200264ec:	e0bffd17 	ldw	r2,-12(fp)
200264f0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
200264f4:	e0bffd17 	ldw	r2,-12(fp)
200264f8:	d0a04b15 	stw	r2,-32468(gp)
200264fc:	e0bff717 	ldw	r2,-36(fp)
20026500:	e0bffa15 	stw	r2,-24(fp)
20026504:	e0bffa17 	ldw	r2,-24(fp)
20026508:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
2002650c:	e0bff403 	ldbu	r2,-48(fp)
20026510:	10800058 	cmpnei	r2,r2,1
20026514:	1000011e 	bne	r2,zero,2002651c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20026518:	00256b00 	call	200256b0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
2002651c:	e0bfff17 	ldw	r2,-4(fp)
20026520:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
20026524:	e03ff615 	stw	zero,-40(fp)
             break;
20026528:	00000a06 	br	20026554 <OSFlagDel+0x230>
2002652c:	e0bff717 	ldw	r2,-36(fp)
20026530:	e0bffb15 	stw	r2,-20(fp)
20026534:	e0bffb17 	ldw	r2,-20(fp)
20026538:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
2002653c:	e0bfff17 	ldw	r2,-4(fp)
20026540:	00c001c4 	movi	r3,7
20026544:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
20026548:	e0bffd17 	ldw	r2,-12(fp)
2002654c:	e0bff615 	stw	r2,-40(fp)
             break;
20026550:	0001883a 	nop
    }
    return (pgrp_return);
20026554:	e0bff617 	ldw	r2,-40(fp)
}
20026558:	e037883a 	mov	sp,fp
2002655c:	dfc00117 	ldw	ra,4(sp)
20026560:	df000017 	ldw	fp,0(sp)
20026564:	dec00204 	addi	sp,sp,8
20026568:	f800283a 	ret

2002656c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
2002656c:	defff604 	addi	sp,sp,-40
20026570:	dfc00915 	stw	ra,36(sp)
20026574:	df000815 	stw	fp,32(sp)
20026578:	df000804 	addi	fp,sp,32
2002657c:	e13ffd15 	stw	r4,-12(fp)
20026580:	e17ffe15 	stw	r5,-8(fp)
20026584:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20026588:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002658c:	e0bfff17 	ldw	r2,-4(fp)
20026590:	1000021e 	bne	r2,zero,2002659c <OSFlagNameGet+0x30>
        return (0);
20026594:	0005883a 	mov	r2,zero
20026598:	00003906 	br	20026680 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
2002659c:	e0bffd17 	ldw	r2,-12(fp)
200265a0:	1000051e 	bne	r2,zero,200265b8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200265a4:	e0bfff17 	ldw	r2,-4(fp)
200265a8:	00c01b84 	movi	r3,110
200265ac:	10c00005 	stb	r3,0(r2)
        return (0);
200265b0:	0005883a 	mov	r2,zero
200265b4:	00003206 	br	20026680 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
200265b8:	e0bffe17 	ldw	r2,-8(fp)
200265bc:	1000051e 	bne	r2,zero,200265d4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
200265c0:	e0bfff17 	ldw	r2,-4(fp)
200265c4:	00c00304 	movi	r3,12
200265c8:	10c00005 	stb	r3,0(r2)
        return (0);
200265cc:	0005883a 	mov	r2,zero
200265d0:	00002b06 	br	20026680 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200265d4:	d0a04803 	ldbu	r2,-32480(gp)
200265d8:	10803fcc 	andi	r2,r2,255
200265dc:	10000526 	beq	r2,zero,200265f4 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
200265e0:	e0bfff17 	ldw	r2,-4(fp)
200265e4:	00c00444 	movi	r3,17
200265e8:	10c00005 	stb	r3,0(r2)
        return (0);
200265ec:	0005883a 	mov	r2,zero
200265f0:	00002306 	br	20026680 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200265f4:	0005303a 	rdctl	r2,status
200265f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200265fc:	e0fffc17 	ldw	r3,-16(fp)
20026600:	00bfff84 	movi	r2,-2
20026604:	1884703a 	and	r2,r3,r2
20026608:	1001703a 	wrctl	status,r2
  
  return context;
2002660c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20026610:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20026614:	e0bffd17 	ldw	r2,-12(fp)
20026618:	10800003 	ldbu	r2,0(r2)
2002661c:	10803fcc 	andi	r2,r2,255
20026620:	10800160 	cmpeqi	r2,r2,5
20026624:	1000091e 	bne	r2,zero,2002664c <OSFlagNameGet+0xe0>
20026628:	e0bff817 	ldw	r2,-32(fp)
2002662c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026630:	e0bff917 	ldw	r2,-28(fp)
20026634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
20026638:	e0bfff17 	ldw	r2,-4(fp)
2002663c:	00c00044 	movi	r3,1
20026640:	10c00005 	stb	r3,0(r2)
        return (0);
20026644:	0005883a 	mov	r2,zero
20026648:	00000d06 	br	20026680 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
2002664c:	e0bffd17 	ldw	r2,-12(fp)
20026650:	10800284 	addi	r2,r2,10
20026654:	100b883a 	mov	r5,r2
20026658:	e13ffe17 	ldw	r4,-8(fp)
2002665c:	00257f40 	call	200257f4 <OS_StrCopy>
20026660:	e0bffb05 	stb	r2,-20(fp)
20026664:	e0bff817 	ldw	r2,-32(fp)
20026668:	e0bffa15 	stw	r2,-24(fp)
2002666c:	e0bffa17 	ldw	r2,-24(fp)
20026670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20026674:	e0bfff17 	ldw	r2,-4(fp)
20026678:	10000005 	stb	zero,0(r2)
    return (len);
2002667c:	e0bffb03 	ldbu	r2,-20(fp)
}
20026680:	e037883a 	mov	sp,fp
20026684:	dfc00117 	ldw	ra,4(sp)
20026688:	df000017 	ldw	fp,0(sp)
2002668c:	dec00204 	addi	sp,sp,8
20026690:	f800283a 	ret

20026694 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
20026694:	defff504 	addi	sp,sp,-44
20026698:	dfc00a15 	stw	ra,40(sp)
2002669c:	df000915 	stw	fp,36(sp)
200266a0:	df000904 	addi	fp,sp,36
200266a4:	e13ffd15 	stw	r4,-12(fp)
200266a8:	e17ffe15 	stw	r5,-8(fp)
200266ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200266b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
200266b4:	e0bfff17 	ldw	r2,-4(fp)
200266b8:	10004326 	beq	r2,zero,200267c8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
200266bc:	e0bffd17 	ldw	r2,-12(fp)
200266c0:	1000041e 	bne	r2,zero,200266d4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200266c4:	e0bfff17 	ldw	r2,-4(fp)
200266c8:	00c01b84 	movi	r3,110
200266cc:	10c00005 	stb	r3,0(r2)
        return;
200266d0:	00003e06 	br	200267cc <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
200266d4:	e0bffe17 	ldw	r2,-8(fp)
200266d8:	1000041e 	bne	r2,zero,200266ec <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
200266dc:	e0bfff17 	ldw	r2,-4(fp)
200266e0:	00c00304 	movi	r3,12
200266e4:	10c00005 	stb	r3,0(r2)
        return;
200266e8:	00003806 	br	200267cc <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
200266ec:	d0a04803 	ldbu	r2,-32480(gp)
200266f0:	10803fcc 	andi	r2,r2,255
200266f4:	10000426 	beq	r2,zero,20026708 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
200266f8:	e0bfff17 	ldw	r2,-4(fp)
200266fc:	00c00484 	movi	r3,18
20026700:	10c00005 	stb	r3,0(r2)
        return;
20026704:	00003106 	br	200267cc <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20026708:	0005303a 	rdctl	r2,status
2002670c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20026710:	e0fffc17 	ldw	r3,-16(fp)
20026714:	00bfff84 	movi	r2,-2
20026718:	1884703a 	and	r2,r3,r2
2002671c:	1001703a 	wrctl	status,r2
  
  return context;
20026720:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20026724:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
20026728:	e0bffd17 	ldw	r2,-12(fp)
2002672c:	10800003 	ldbu	r2,0(r2)
20026730:	10803fcc 	andi	r2,r2,255
20026734:	10800160 	cmpeqi	r2,r2,5
20026738:	1000081e 	bne	r2,zero,2002675c <OSFlagNameSet+0xc8>
2002673c:	e0bff717 	ldw	r2,-36(fp)
20026740:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026744:	e0bff817 	ldw	r2,-32(fp)
20026748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
2002674c:	e0bfff17 	ldw	r2,-4(fp)
20026750:	00c00044 	movi	r3,1
20026754:	10c00005 	stb	r3,0(r2)
        return;
20026758:	00001c06 	br	200267cc <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
2002675c:	e13ffe17 	ldw	r4,-8(fp)
20026760:	00258680 	call	20025868 <OS_StrLen>
20026764:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
20026768:	e0bffa03 	ldbu	r2,-24(fp)
2002676c:	10800830 	cmpltui	r2,r2,32
20026770:	1000081e 	bne	r2,zero,20026794 <OSFlagNameSet+0x100>
20026774:	e0bff717 	ldw	r2,-36(fp)
20026778:	e0bff915 	stw	r2,-28(fp)
2002677c:	e0bff917 	ldw	r2,-28(fp)
20026780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
20026784:	e0bfff17 	ldw	r2,-4(fp)
20026788:	00c01cc4 	movi	r3,115
2002678c:	10c00005 	stb	r3,0(r2)
        return;
20026790:	00000e06 	br	200267cc <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
20026794:	e0bffd17 	ldw	r2,-12(fp)
20026798:	10800284 	addi	r2,r2,10
2002679c:	e17ffe17 	ldw	r5,-8(fp)
200267a0:	1009883a 	mov	r4,r2
200267a4:	00257f40 	call	200257f4 <OS_StrCopy>
200267a8:	e0bff717 	ldw	r2,-36(fp)
200267ac:	e0bffb15 	stw	r2,-20(fp)
200267b0:	e0bffb17 	ldw	r2,-20(fp)
200267b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200267b8:	e0bfff17 	ldw	r2,-4(fp)
200267bc:	10000005 	stb	zero,0(r2)
    return;
200267c0:	0001883a 	nop
200267c4:	00000106 	br	200267cc <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
200267c8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
200267cc:	e037883a 	mov	sp,fp
200267d0:	dfc00117 	ldw	ra,4(sp)
200267d4:	df000017 	ldw	fp,0(sp)
200267d8:	dec00204 	addi	sp,sp,8
200267dc:	f800283a 	ret

200267e0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
200267e0:	deffe104 	addi	sp,sp,-124
200267e4:	dfc01e15 	stw	ra,120(sp)
200267e8:	df001d15 	stw	fp,116(sp)
200267ec:	df001d04 	addi	fp,sp,116
200267f0:	e13ffc15 	stw	r4,-16(fp)
200267f4:	2809883a 	mov	r4,r5
200267f8:	3007883a 	mov	r3,r6
200267fc:	3805883a 	mov	r2,r7
20026800:	e13ffd0d 	sth	r4,-12(fp)
20026804:	e0fffe05 	stb	r3,-8(fp)
20026808:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
2002680c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20026810:	e0800217 	ldw	r2,8(fp)
20026814:	1000021e 	bne	r2,zero,20026820 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
20026818:	0005883a 	mov	r2,zero
2002681c:	00015906 	br	20026d84 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
20026820:	e0bffc17 	ldw	r2,-16(fp)
20026824:	1000051e 	bne	r2,zero,2002683c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20026828:	e0800217 	ldw	r2,8(fp)
2002682c:	00c01b84 	movi	r3,110
20026830:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20026834:	0005883a 	mov	r2,zero
20026838:	00015206 	br	20026d84 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
2002683c:	d0a04803 	ldbu	r2,-32480(gp)
20026840:	10803fcc 	andi	r2,r2,255
20026844:	10000526 	beq	r2,zero,2002685c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
20026848:	e0800217 	ldw	r2,8(fp)
2002684c:	00c00084 	movi	r3,2
20026850:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20026854:	0005883a 	mov	r2,zero
20026858:	00014a06 	br	20026d84 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
2002685c:	d0a03a03 	ldbu	r2,-32536(gp)
20026860:	10803fcc 	andi	r2,r2,255
20026864:	10000526 	beq	r2,zero,2002687c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
20026868:	e0800217 	ldw	r2,8(fp)
2002686c:	00c00344 	movi	r3,13
20026870:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20026874:	0005883a 	mov	r2,zero
20026878:	00014206 	br	20026d84 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
2002687c:	e0bffc17 	ldw	r2,-16(fp)
20026880:	10800003 	ldbu	r2,0(r2)
20026884:	10803fcc 	andi	r2,r2,255
20026888:	10800160 	cmpeqi	r2,r2,5
2002688c:	1000051e 	bne	r2,zero,200268a4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
20026890:	e0800217 	ldw	r2,8(fp)
20026894:	00c00044 	movi	r3,1
20026898:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
2002689c:	0005883a 	mov	r2,zero
200268a0:	00013806 	br	20026d84 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
200268a4:	e0fffe03 	ldbu	r3,-8(fp)
200268a8:	00bfe004 	movi	r2,-128
200268ac:	1884703a 	and	r2,r3,r2
200268b0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
200268b4:	e0bfe603 	ldbu	r2,-104(fp)
200268b8:	10000626 	beq	r2,zero,200268d4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
200268bc:	e0bffe03 	ldbu	r2,-8(fp)
200268c0:	10801fcc 	andi	r2,r2,127
200268c4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
200268c8:	00800044 	movi	r2,1
200268cc:	e0bfe405 	stb	r2,-112(fp)
200268d0:	00000106 	br	200268d8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
200268d4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200268d8:	0005303a 	rdctl	r2,status
200268dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200268e0:	e0fff617 	ldw	r3,-40(fp)
200268e4:	00bfff84 	movi	r2,-2
200268e8:	1884703a 	and	r2,r3,r2
200268ec:	1001703a 	wrctl	status,r2
  
  return context;
200268f0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
200268f4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
200268f8:	e0bffe03 	ldbu	r2,-8(fp)
200268fc:	10c00060 	cmpeqi	r3,r2,1
20026900:	1800921e 	bne	r3,zero,20026b4c <OSFlagPend+0x36c>
20026904:	10c00088 	cmpgei	r3,r2,2
20026908:	1800021e 	bne	r3,zero,20026914 <OSFlagPend+0x134>
2002690c:	10006126 	beq	r2,zero,20026a94 <OSFlagPend+0x2b4>
20026910:	0000bb06 	br	20026c00 <OSFlagPend+0x420>
20026914:	10c000a0 	cmpeqi	r3,r2,2
20026918:	1800031e 	bne	r3,zero,20026928 <OSFlagPend+0x148>
2002691c:	108000e0 	cmpeqi	r2,r2,3
20026920:	10002f1e 	bne	r2,zero,200269e0 <OSFlagPend+0x200>
20026924:	0000b606 	br	20026c00 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
20026928:	e0bffc17 	ldw	r2,-16(fp)
2002692c:	10c0020b 	ldhu	r3,8(r2)
20026930:	e0bffd0b 	ldhu	r2,-12(fp)
20026934:	1884703a 	and	r2,r3,r2
20026938:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
2002693c:	e0ffe80b 	ldhu	r3,-96(fp)
20026940:	e0bffd0b 	ldhu	r2,-12(fp)
20026944:	1880171e 	bne	r3,r2,200269a4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20026948:	e0bfe403 	ldbu	r2,-112(fp)
2002694c:	10800058 	cmpnei	r2,r2,1
20026950:	1000091e 	bne	r2,zero,20026978 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
20026954:	e0bffc17 	ldw	r2,-16(fp)
20026958:	1080020b 	ldhu	r2,8(r2)
2002695c:	1007883a 	mov	r3,r2
20026960:	e0bfe80b 	ldhu	r2,-96(fp)
20026964:	0084303a 	nor	r2,zero,r2
20026968:	1884703a 	and	r2,r3,r2
2002696c:	1007883a 	mov	r3,r2
20026970:	e0bffc17 	ldw	r2,-16(fp)
20026974:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20026978:	d0a04917 	ldw	r2,-32476(gp)
2002697c:	e0ffe80b 	ldhu	r3,-96(fp)
20026980:	10c00b0d 	sth	r3,44(r2)
20026984:	e0bfe517 	ldw	r2,-108(fp)
20026988:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002698c:	e0bfe717 	ldw	r2,-100(fp)
20026990:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20026994:	e0800217 	ldw	r2,8(fp)
20026998:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
2002699c:	e0bfe80b 	ldhu	r2,-96(fp)
200269a0:	0000f806 	br	20026d84 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
200269a4:	e13ffd0b 	ldhu	r4,-12(fp)
200269a8:	e17ffe03 	ldbu	r5,-8(fp)
200269ac:	e0bfff0b 	ldhu	r2,-4(fp)
200269b0:	e0fff704 	addi	r3,fp,-36
200269b4:	d8800015 	stw	r2,0(sp)
200269b8:	280f883a 	mov	r7,r5
200269bc:	200d883a 	mov	r6,r4
200269c0:	180b883a 	mov	r5,r3
200269c4:	e13ffc17 	ldw	r4,-16(fp)
200269c8:	00272500 	call	20027250 <OS_FlagBlock>
200269cc:	e0bfe517 	ldw	r2,-108(fp)
200269d0:	e0bfe915 	stw	r2,-92(fp)
200269d4:	e0bfe917 	ldw	r2,-92(fp)
200269d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
200269dc:	00009206 	br	20026c28 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
200269e0:	e0bffc17 	ldw	r2,-16(fp)
200269e4:	10c0020b 	ldhu	r3,8(r2)
200269e8:	e0bffd0b 	ldhu	r2,-12(fp)
200269ec:	1884703a 	and	r2,r3,r2
200269f0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
200269f4:	e0bfe80b 	ldhu	r2,-96(fp)
200269f8:	10001726 	beq	r2,zero,20026a58 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
200269fc:	e0bfe403 	ldbu	r2,-112(fp)
20026a00:	10800058 	cmpnei	r2,r2,1
20026a04:	1000091e 	bne	r2,zero,20026a2c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
20026a08:	e0bffc17 	ldw	r2,-16(fp)
20026a0c:	1080020b 	ldhu	r2,8(r2)
20026a10:	1007883a 	mov	r3,r2
20026a14:	e0bfe80b 	ldhu	r2,-96(fp)
20026a18:	0084303a 	nor	r2,zero,r2
20026a1c:	1884703a 	and	r2,r3,r2
20026a20:	1007883a 	mov	r3,r2
20026a24:	e0bffc17 	ldw	r2,-16(fp)
20026a28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20026a2c:	d0a04917 	ldw	r2,-32476(gp)
20026a30:	e0ffe80b 	ldhu	r3,-96(fp)
20026a34:	10c00b0d 	sth	r3,44(r2)
20026a38:	e0bfe517 	ldw	r2,-108(fp)
20026a3c:	e0bfea15 	stw	r2,-88(fp)
20026a40:	e0bfea17 	ldw	r2,-88(fp)
20026a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20026a48:	e0800217 	ldw	r2,8(fp)
20026a4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20026a50:	e0bfe80b 	ldhu	r2,-96(fp)
20026a54:	0000cb06 	br	20026d84 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20026a58:	e13ffd0b 	ldhu	r4,-12(fp)
20026a5c:	e17ffe03 	ldbu	r5,-8(fp)
20026a60:	e0bfff0b 	ldhu	r2,-4(fp)
20026a64:	e0fff704 	addi	r3,fp,-36
20026a68:	d8800015 	stw	r2,0(sp)
20026a6c:	280f883a 	mov	r7,r5
20026a70:	200d883a 	mov	r6,r4
20026a74:	180b883a 	mov	r5,r3
20026a78:	e13ffc17 	ldw	r4,-16(fp)
20026a7c:	00272500 	call	20027250 <OS_FlagBlock>
20026a80:	e0bfe517 	ldw	r2,-108(fp)
20026a84:	e0bfeb15 	stw	r2,-84(fp)
20026a88:	e0bfeb17 	ldw	r2,-84(fp)
20026a8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20026a90:	00006506 	br	20026c28 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
20026a94:	e0bffc17 	ldw	r2,-16(fp)
20026a98:	1080020b 	ldhu	r2,8(r2)
20026a9c:	0084303a 	nor	r2,zero,r2
20026aa0:	1007883a 	mov	r3,r2
20026aa4:	e0bffd0b 	ldhu	r2,-12(fp)
20026aa8:	1884703a 	and	r2,r3,r2
20026aac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
20026ab0:	e0ffe80b 	ldhu	r3,-96(fp)
20026ab4:	e0bffd0b 	ldhu	r2,-12(fp)
20026ab8:	1880151e 	bne	r3,r2,20026b10 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20026abc:	e0bfe403 	ldbu	r2,-112(fp)
20026ac0:	10800058 	cmpnei	r2,r2,1
20026ac4:	1000071e 	bne	r2,zero,20026ae4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
20026ac8:	e0bffc17 	ldw	r2,-16(fp)
20026acc:	10c0020b 	ldhu	r3,8(r2)
20026ad0:	e0bfe80b 	ldhu	r2,-96(fp)
20026ad4:	1884b03a 	or	r2,r3,r2
20026ad8:	1007883a 	mov	r3,r2
20026adc:	e0bffc17 	ldw	r2,-16(fp)
20026ae0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20026ae4:	d0a04917 	ldw	r2,-32476(gp)
20026ae8:	e0ffe80b 	ldhu	r3,-96(fp)
20026aec:	10c00b0d 	sth	r3,44(r2)
20026af0:	e0bfe517 	ldw	r2,-108(fp)
20026af4:	e0bfec15 	stw	r2,-80(fp)
20026af8:	e0bfec17 	ldw	r2,-80(fp)
20026afc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20026b00:	e0800217 	ldw	r2,8(fp)
20026b04:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20026b08:	e0bfe80b 	ldhu	r2,-96(fp)
20026b0c:	00009d06 	br	20026d84 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20026b10:	e13ffd0b 	ldhu	r4,-12(fp)
20026b14:	e17ffe03 	ldbu	r5,-8(fp)
20026b18:	e0bfff0b 	ldhu	r2,-4(fp)
20026b1c:	e0fff704 	addi	r3,fp,-36
20026b20:	d8800015 	stw	r2,0(sp)
20026b24:	280f883a 	mov	r7,r5
20026b28:	200d883a 	mov	r6,r4
20026b2c:	180b883a 	mov	r5,r3
20026b30:	e13ffc17 	ldw	r4,-16(fp)
20026b34:	00272500 	call	20027250 <OS_FlagBlock>
20026b38:	e0bfe517 	ldw	r2,-108(fp)
20026b3c:	e0bfed15 	stw	r2,-76(fp)
20026b40:	e0bfed17 	ldw	r2,-76(fp)
20026b44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20026b48:	00003706 	br	20026c28 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
20026b4c:	e0bffc17 	ldw	r2,-16(fp)
20026b50:	1080020b 	ldhu	r2,8(r2)
20026b54:	0084303a 	nor	r2,zero,r2
20026b58:	1007883a 	mov	r3,r2
20026b5c:	e0bffd0b 	ldhu	r2,-12(fp)
20026b60:	1884703a 	and	r2,r3,r2
20026b64:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
20026b68:	e0bfe80b 	ldhu	r2,-96(fp)
20026b6c:	10001526 	beq	r2,zero,20026bc4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
20026b70:	e0bfe403 	ldbu	r2,-112(fp)
20026b74:	10800058 	cmpnei	r2,r2,1
20026b78:	1000071e 	bne	r2,zero,20026b98 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
20026b7c:	e0bffc17 	ldw	r2,-16(fp)
20026b80:	10c0020b 	ldhu	r3,8(r2)
20026b84:	e0bfe80b 	ldhu	r2,-96(fp)
20026b88:	1884b03a 	or	r2,r3,r2
20026b8c:	1007883a 	mov	r3,r2
20026b90:	e0bffc17 	ldw	r2,-16(fp)
20026b94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
20026b98:	d0a04917 	ldw	r2,-32476(gp)
20026b9c:	e0ffe80b 	ldhu	r3,-96(fp)
20026ba0:	10c00b0d 	sth	r3,44(r2)
20026ba4:	e0bfe517 	ldw	r2,-108(fp)
20026ba8:	e0bfee15 	stw	r2,-72(fp)
20026bac:	e0bfee17 	ldw	r2,-72(fp)
20026bb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
20026bb4:	e0800217 	ldw	r2,8(fp)
20026bb8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
20026bbc:	e0bfe80b 	ldhu	r2,-96(fp)
20026bc0:	00007006 	br	20026d84 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
20026bc4:	e13ffd0b 	ldhu	r4,-12(fp)
20026bc8:	e17ffe03 	ldbu	r5,-8(fp)
20026bcc:	e0bfff0b 	ldhu	r2,-4(fp)
20026bd0:	e0fff704 	addi	r3,fp,-36
20026bd4:	d8800015 	stw	r2,0(sp)
20026bd8:	280f883a 	mov	r7,r5
20026bdc:	200d883a 	mov	r6,r4
20026be0:	180b883a 	mov	r5,r3
20026be4:	e13ffc17 	ldw	r4,-16(fp)
20026be8:	00272500 	call	20027250 <OS_FlagBlock>
20026bec:	e0bfe517 	ldw	r2,-108(fp)
20026bf0:	e0bfef15 	stw	r2,-68(fp)
20026bf4:	e0bfef17 	ldw	r2,-68(fp)
20026bf8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
20026bfc:	00000a06 	br	20026c28 <OSFlagPend+0x448>
20026c00:	e0bfe517 	ldw	r2,-108(fp)
20026c04:	e0bff015 	stw	r2,-64(fp)
20026c08:	e0bff017 	ldw	r2,-64(fp)
20026c0c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
20026c10:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
20026c14:	e0800217 	ldw	r2,8(fp)
20026c18:	00c01bc4 	movi	r3,111
20026c1c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
20026c20:	e0bfe80b 	ldhu	r2,-96(fp)
20026c24:	00005706 	br	20026d84 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
20026c28:	00256b00 	call	200256b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20026c2c:	0005303a 	rdctl	r2,status
20026c30:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20026c34:	e0fff117 	ldw	r3,-60(fp)
20026c38:	00bfff84 	movi	r2,-2
20026c3c:	1884703a 	and	r2,r3,r2
20026c40:	1001703a 	wrctl	status,r2
  
  return context;
20026c44:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
20026c48:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
20026c4c:	d0a04917 	ldw	r2,-32476(gp)
20026c50:	10800c43 	ldbu	r2,49(r2)
20026c54:	10803fcc 	andi	r2,r2,255
20026c58:	10001c26 	beq	r2,zero,20026ccc <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
20026c5c:	d0a04917 	ldw	r2,-32476(gp)
20026c60:	10800c43 	ldbu	r2,49(r2)
20026c64:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20026c68:	d0a04917 	ldw	r2,-32476(gp)
20026c6c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
20026c70:	e0bff704 	addi	r2,fp,-36
20026c74:	1009883a 	mov	r4,r2
20026c78:	00275840 	call	20027584 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
20026c7c:	d0a04917 	ldw	r2,-32476(gp)
20026c80:	10000c05 	stb	zero,48(r2)
20026c84:	e0bfe517 	ldw	r2,-108(fp)
20026c88:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026c8c:	e0bff217 	ldw	r2,-56(fp)
20026c90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
20026c94:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
20026c98:	e0bff303 	ldbu	r2,-52(fp)
20026c9c:	108000a0 	cmpeqi	r2,r2,2
20026ca0:	10000426 	beq	r2,zero,20026cb4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
20026ca4:	e0800217 	ldw	r2,8(fp)
20026ca8:	00c00384 	movi	r3,14
20026cac:	10c00005 	stb	r3,0(r2)
                 break;
20026cb0:	00000406 	br	20026cc4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
20026cb4:	e0800217 	ldw	r2,8(fp)
20026cb8:	00c00284 	movi	r3,10
20026cbc:	10c00005 	stb	r3,0(r2)
                 break;
20026cc0:	0001883a 	nop
        }
        return (flags_rdy);
20026cc4:	e0bfe80b 	ldhu	r2,-96(fp)
20026cc8:	00002e06 	br	20026d84 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
20026ccc:	d0a04917 	ldw	r2,-32476(gp)
20026cd0:	10800b0b 	ldhu	r2,44(r2)
20026cd4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
20026cd8:	e0bfe403 	ldbu	r2,-112(fp)
20026cdc:	10800058 	cmpnei	r2,r2,1
20026ce0:	1000211e 	bne	r2,zero,20026d68 <OSFlagPend+0x588>
        switch (wait_type) {
20026ce4:	e0bffe03 	ldbu	r2,-8(fp)
20026ce8:	10001616 	blt	r2,zero,20026d44 <OSFlagPend+0x564>
20026cec:	10c00090 	cmplti	r3,r2,2
20026cf0:	18000c1e 	bne	r3,zero,20026d24 <OSFlagPend+0x544>
20026cf4:	10800108 	cmpgei	r2,r2,4
20026cf8:	1000121e 	bne	r2,zero,20026d44 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
20026cfc:	e0bffc17 	ldw	r2,-16(fp)
20026d00:	1080020b 	ldhu	r2,8(r2)
20026d04:	1007883a 	mov	r3,r2
20026d08:	e0bfe80b 	ldhu	r2,-96(fp)
20026d0c:	0084303a 	nor	r2,zero,r2
20026d10:	1884703a 	and	r2,r3,r2
20026d14:	1007883a 	mov	r3,r2
20026d18:	e0bffc17 	ldw	r2,-16(fp)
20026d1c:	10c0020d 	sth	r3,8(r2)
                 break;
20026d20:	00001106 	br	20026d68 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
20026d24:	e0bffc17 	ldw	r2,-16(fp)
20026d28:	10c0020b 	ldhu	r3,8(r2)
20026d2c:	e0bfe80b 	ldhu	r2,-96(fp)
20026d30:	1884b03a 	or	r2,r3,r2
20026d34:	1007883a 	mov	r3,r2
20026d38:	e0bffc17 	ldw	r2,-16(fp)
20026d3c:	10c0020d 	sth	r3,8(r2)
                 break;
20026d40:	00000906 	br	20026d68 <OSFlagPend+0x588>
20026d44:	e0bfe517 	ldw	r2,-108(fp)
20026d48:	e0bff415 	stw	r2,-48(fp)
20026d4c:	e0bff417 	ldw	r2,-48(fp)
20026d50:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
20026d54:	e0800217 	ldw	r2,8(fp)
20026d58:	00c01bc4 	movi	r3,111
20026d5c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
20026d60:	0005883a 	mov	r2,zero
20026d64:	00000706 	br	20026d84 <OSFlagPend+0x5a4>
20026d68:	e0bfe517 	ldw	r2,-108(fp)
20026d6c:	e0bff515 	stw	r2,-44(fp)
20026d70:	e0bff517 	ldw	r2,-44(fp)
20026d74:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
20026d78:	e0800217 	ldw	r2,8(fp)
20026d7c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
20026d80:	e0bfe80b 	ldhu	r2,-96(fp)
}
20026d84:	e037883a 	mov	sp,fp
20026d88:	dfc00117 	ldw	ra,4(sp)
20026d8c:	df000017 	ldw	fp,0(sp)
20026d90:	dec00204 	addi	sp,sp,8
20026d94:	f800283a 	ret

20026d98 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
20026d98:	defffb04 	addi	sp,sp,-20
20026d9c:	df000415 	stw	fp,16(sp)
20026da0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
20026da4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20026da8:	0005303a 	rdctl	r2,status
20026dac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20026db0:	e0fffe17 	ldw	r3,-8(fp)
20026db4:	00bfff84 	movi	r2,-2
20026db8:	1884703a 	and	r2,r3,r2
20026dbc:	1001703a 	wrctl	status,r2
  
  return context;
20026dc0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
20026dc4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
20026dc8:	d0a04917 	ldw	r2,-32476(gp)
20026dcc:	10800b0b 	ldhu	r2,44(r2)
20026dd0:	e0bffd0d 	sth	r2,-12(fp)
20026dd4:	e0bffc17 	ldw	r2,-16(fp)
20026dd8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026ddc:	e0bfff17 	ldw	r2,-4(fp)
20026de0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
20026de4:	e0bffd0b 	ldhu	r2,-12(fp)
}
20026de8:	e037883a 	mov	sp,fp
20026dec:	df000017 	ldw	fp,0(sp)
20026df0:	dec00104 	addi	sp,sp,4
20026df4:	f800283a 	ret

20026df8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
20026df8:	deffef04 	addi	sp,sp,-68
20026dfc:	dfc01015 	stw	ra,64(sp)
20026e00:	df000f15 	stw	fp,60(sp)
20026e04:	df000f04 	addi	fp,sp,60
20026e08:	e13ffc15 	stw	r4,-16(fp)
20026e0c:	2807883a 	mov	r3,r5
20026e10:	3005883a 	mov	r2,r6
20026e14:	e1ffff15 	stw	r7,-4(fp)
20026e18:	e0fffd0d 	sth	r3,-12(fp)
20026e1c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
20026e20:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
20026e24:	e0bfff17 	ldw	r2,-4(fp)
20026e28:	1000021e 	bne	r2,zero,20026e34 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
20026e2c:	0005883a 	mov	r2,zero
20026e30:	0000d106 	br	20027178 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
20026e34:	e0bffc17 	ldw	r2,-16(fp)
20026e38:	1000051e 	bne	r2,zero,20026e50 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
20026e3c:	e0bfff17 	ldw	r2,-4(fp)
20026e40:	00c01b84 	movi	r3,110
20026e44:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20026e48:	0005883a 	mov	r2,zero
20026e4c:	0000ca06 	br	20027178 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
20026e50:	e0bffc17 	ldw	r2,-16(fp)
20026e54:	10800003 	ldbu	r2,0(r2)
20026e58:	10803fcc 	andi	r2,r2,255
20026e5c:	10800160 	cmpeqi	r2,r2,5
20026e60:	1000051e 	bne	r2,zero,20026e78 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
20026e64:	e0bfff17 	ldw	r2,-4(fp)
20026e68:	00c00044 	movi	r3,1
20026e6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
20026e70:	0005883a 	mov	r2,zero
20026e74:	0000c006 	br	20027178 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20026e78:	0005303a 	rdctl	r2,status
20026e7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20026e80:	e0fffb17 	ldw	r3,-20(fp)
20026e84:	00bfff84 	movi	r2,-2
20026e88:	1884703a 	and	r2,r3,r2
20026e8c:	1001703a 	wrctl	status,r2
  
  return context;
20026e90:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
20026e94:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
20026e98:	e0bffe03 	ldbu	r2,-8(fp)
20026e9c:	10000326 	beq	r2,zero,20026eac <OSFlagPost+0xb4>
20026ea0:	10800060 	cmpeqi	r2,r2,1
20026ea4:	10000b1e 	bne	r2,zero,20026ed4 <OSFlagPost+0xdc>
20026ea8:	00001206 	br	20026ef4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
20026eac:	e0bffc17 	ldw	r2,-16(fp)
20026eb0:	1080020b 	ldhu	r2,8(r2)
20026eb4:	1007883a 	mov	r3,r2
20026eb8:	e0bffd0b 	ldhu	r2,-12(fp)
20026ebc:	0084303a 	nor	r2,zero,r2
20026ec0:	1884703a 	and	r2,r3,r2
20026ec4:	1007883a 	mov	r3,r2
20026ec8:	e0bffc17 	ldw	r2,-16(fp)
20026ecc:	10c0020d 	sth	r3,8(r2)
             break;
20026ed0:	00001106 	br	20026f18 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
20026ed4:	e0bffc17 	ldw	r2,-16(fp)
20026ed8:	10c0020b 	ldhu	r3,8(r2)
20026edc:	e0bffd0b 	ldhu	r2,-12(fp)
20026ee0:	1884b03a 	or	r2,r3,r2
20026ee4:	1007883a 	mov	r3,r2
20026ee8:	e0bffc17 	ldw	r2,-16(fp)
20026eec:	10c0020d 	sth	r3,8(r2)
             break;
20026ef0:	00000906 	br	20026f18 <OSFlagPost+0x120>
20026ef4:	e0bff317 	ldw	r2,-52(fp)
20026ef8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20026efc:	e0bff417 	ldw	r2,-48(fp)
20026f00:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
20026f04:	e0bfff17 	ldw	r2,-4(fp)
20026f08:	00c01c44 	movi	r3,113
20026f0c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
20026f10:	0005883a 	mov	r2,zero
20026f14:	00009806 	br	20027178 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
20026f18:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
20026f1c:	e0bffc17 	ldw	r2,-16(fp)
20026f20:	10800117 	ldw	r2,4(r2)
20026f24:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20026f28:	00007706 	br	20027108 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
20026f2c:	e0bff117 	ldw	r2,-60(fp)
20026f30:	10800483 	ldbu	r2,18(r2)
20026f34:	10803fcc 	andi	r2,r2,255
20026f38:	10c00060 	cmpeqi	r3,r2,1
20026f3c:	18004a1e 	bne	r3,zero,20027068 <OSFlagPost+0x270>
20026f40:	10c00088 	cmpgei	r3,r2,2
20026f44:	1800021e 	bne	r3,zero,20026f50 <OSFlagPost+0x158>
20026f48:	10002f26 	beq	r2,zero,20027008 <OSFlagPost+0x210>
20026f4c:	00005b06 	br	200270bc <OSFlagPost+0x2c4>
20026f50:	10c000a0 	cmpeqi	r3,r2,2
20026f54:	1800031e 	bne	r3,zero,20026f64 <OSFlagPost+0x16c>
20026f58:	108000e0 	cmpeqi	r2,r2,3
20026f5c:	1000171e 	bne	r2,zero,20026fbc <OSFlagPost+0x1c4>
20026f60:	00005606 	br	200270bc <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20026f64:	e0bffc17 	ldw	r2,-16(fp)
20026f68:	10c0020b 	ldhu	r3,8(r2)
20026f6c:	e0bff117 	ldw	r2,-60(fp)
20026f70:	1080040b 	ldhu	r2,16(r2)
20026f74:	1884703a 	and	r2,r3,r2
20026f78:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20026f7c:	e0bff117 	ldw	r2,-60(fp)
20026f80:	1080040b 	ldhu	r2,16(r2)
20026f84:	10ffffcc 	andi	r3,r2,65535
20026f88:	e0bff60b 	ldhu	r2,-40(fp)
20026f8c:	1880541e 	bne	r3,r2,200270e0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20026f90:	e0bff60b 	ldhu	r2,-40(fp)
20026f94:	100b883a 	mov	r5,r2
20026f98:	e13ff117 	ldw	r4,-60(fp)
20026f9c:	00274900 	call	20027490 <OS_FlagTaskRdy>
20026fa0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20026fa4:	e0bff683 	ldbu	r2,-38(fp)
20026fa8:	10800058 	cmpnei	r2,r2,1
20026fac:	10004c1e 	bne	r2,zero,200270e0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20026fb0:	00800044 	movi	r2,1
20026fb4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20026fb8:	00004906 	br	200270e0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20026fbc:	e0bffc17 	ldw	r2,-16(fp)
20026fc0:	10c0020b 	ldhu	r3,8(r2)
20026fc4:	e0bff117 	ldw	r2,-60(fp)
20026fc8:	1080040b 	ldhu	r2,16(r2)
20026fcc:	1884703a 	and	r2,r3,r2
20026fd0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20026fd4:	e0bff60b 	ldhu	r2,-40(fp)
20026fd8:	10004326 	beq	r2,zero,200270e8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20026fdc:	e0bff60b 	ldhu	r2,-40(fp)
20026fe0:	100b883a 	mov	r5,r2
20026fe4:	e13ff117 	ldw	r4,-60(fp)
20026fe8:	00274900 	call	20027490 <OS_FlagTaskRdy>
20026fec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20026ff0:	e0bff683 	ldbu	r2,-38(fp)
20026ff4:	10800058 	cmpnei	r2,r2,1
20026ff8:	10003b1e 	bne	r2,zero,200270e8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
20026ffc:	00800044 	movi	r2,1
20027000:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20027004:	00003806 	br	200270e8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20027008:	e0bffc17 	ldw	r2,-16(fp)
2002700c:	1080020b 	ldhu	r2,8(r2)
20027010:	0084303a 	nor	r2,zero,r2
20027014:	1007883a 	mov	r3,r2
20027018:	e0bff117 	ldw	r2,-60(fp)
2002701c:	1080040b 	ldhu	r2,16(r2)
20027020:	1884703a 	and	r2,r3,r2
20027024:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
20027028:	e0bff117 	ldw	r2,-60(fp)
2002702c:	1080040b 	ldhu	r2,16(r2)
20027030:	10ffffcc 	andi	r3,r2,65535
20027034:	e0bff60b 	ldhu	r2,-40(fp)
20027038:	18802d1e 	bne	r3,r2,200270f0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
2002703c:	e0bff60b 	ldhu	r2,-40(fp)
20027040:	100b883a 	mov	r5,r2
20027044:	e13ff117 	ldw	r4,-60(fp)
20027048:	00274900 	call	20027490 <OS_FlagTaskRdy>
2002704c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
20027050:	e0bff683 	ldbu	r2,-38(fp)
20027054:	10800058 	cmpnei	r2,r2,1
20027058:	1000251e 	bne	r2,zero,200270f0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
2002705c:	00800044 	movi	r2,1
20027060:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
20027064:	00002206 	br	200270f0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
20027068:	e0bffc17 	ldw	r2,-16(fp)
2002706c:	1080020b 	ldhu	r2,8(r2)
20027070:	0084303a 	nor	r2,zero,r2
20027074:	1007883a 	mov	r3,r2
20027078:	e0bff117 	ldw	r2,-60(fp)
2002707c:	1080040b 	ldhu	r2,16(r2)
20027080:	1884703a 	and	r2,r3,r2
20027084:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
20027088:	e0bff60b 	ldhu	r2,-40(fp)
2002708c:	10001a26 	beq	r2,zero,200270f8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
20027090:	e0bff60b 	ldhu	r2,-40(fp)
20027094:	100b883a 	mov	r5,r2
20027098:	e13ff117 	ldw	r4,-60(fp)
2002709c:	00274900 	call	20027490 <OS_FlagTaskRdy>
200270a0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
200270a4:	e0bff683 	ldbu	r2,-38(fp)
200270a8:	10800058 	cmpnei	r2,r2,1
200270ac:	1000121e 	bne	r2,zero,200270f8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
200270b0:	00800044 	movi	r2,1
200270b4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
200270b8:	00000f06 	br	200270f8 <OSFlagPost+0x300>
200270bc:	e0bff317 	ldw	r2,-52(fp)
200270c0:	e0bff515 	stw	r2,-44(fp)
200270c4:	e0bff517 	ldw	r2,-44(fp)
200270c8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
200270cc:	e0bfff17 	ldw	r2,-4(fp)
200270d0:	00c01bc4 	movi	r3,111
200270d4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
200270d8:	0005883a 	mov	r2,zero
200270dc:	00002606 	br	20027178 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
200270e0:	0001883a 	nop
200270e4:	00000506 	br	200270fc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
200270e8:	0001883a 	nop
200270ec:	00000306 	br	200270fc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
200270f0:	0001883a 	nop
200270f4:	00000106 	br	200270fc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
200270f8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
200270fc:	e0bff117 	ldw	r2,-60(fp)
20027100:	10800017 	ldw	r2,0(r2)
20027104:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
20027108:	e0bff117 	ldw	r2,-60(fp)
2002710c:	103f871e 	bne	r2,zero,20026f2c <__flash_rwdata_start+0xffff9444>
20027110:	e0bff317 	ldw	r2,-52(fp)
20027114:	e0bff715 	stw	r2,-36(fp)
20027118:	e0bff717 	ldw	r2,-36(fp)
2002711c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
20027120:	e0bff203 	ldbu	r2,-56(fp)
20027124:	10800058 	cmpnei	r2,r2,1
20027128:	1000011e 	bne	r2,zero,20027130 <OSFlagPost+0x338>
        OS_Sched();
2002712c:	00256b00 	call	200256b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027130:	0005303a 	rdctl	r2,status
20027134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027138:	e0fffa17 	ldw	r3,-24(fp)
2002713c:	00bfff84 	movi	r2,-2
20027140:	1884703a 	and	r2,r3,r2
20027144:	1001703a 	wrctl	status,r2
  
  return context;
20027148:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
2002714c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
20027150:	e0bffc17 	ldw	r2,-16(fp)
20027154:	1080020b 	ldhu	r2,8(r2)
20027158:	e0bff90d 	sth	r2,-28(fp)
2002715c:	e0bff317 	ldw	r2,-52(fp)
20027160:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027164:	e0bff817 	ldw	r2,-32(fp)
20027168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
2002716c:	e0bfff17 	ldw	r2,-4(fp)
20027170:	10000005 	stb	zero,0(r2)
    return (flags_cur);
20027174:	e0bff90b 	ldhu	r2,-28(fp)
}
20027178:	e037883a 	mov	sp,fp
2002717c:	dfc00117 	ldw	ra,4(sp)
20027180:	df000017 	ldw	fp,0(sp)
20027184:	dec00204 	addi	sp,sp,8
20027188:	f800283a 	ret

2002718c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
2002718c:	defff904 	addi	sp,sp,-28
20027190:	df000615 	stw	fp,24(sp)
20027194:	df000604 	addi	fp,sp,24
20027198:	e13ffe15 	stw	r4,-8(fp)
2002719c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
200271a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
200271a4:	e0bfff17 	ldw	r2,-4(fp)
200271a8:	1000021e 	bne	r2,zero,200271b4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
200271ac:	0005883a 	mov	r2,zero
200271b0:	00002306 	br	20027240 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
200271b4:	e0bffe17 	ldw	r2,-8(fp)
200271b8:	1000051e 	bne	r2,zero,200271d0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
200271bc:	e0bfff17 	ldw	r2,-4(fp)
200271c0:	00c01b84 	movi	r3,110
200271c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200271c8:	0005883a 	mov	r2,zero
200271cc:	00001c06 	br	20027240 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
200271d0:	e0bffe17 	ldw	r2,-8(fp)
200271d4:	10800003 	ldbu	r2,0(r2)
200271d8:	10803fcc 	andi	r2,r2,255
200271dc:	10800160 	cmpeqi	r2,r2,5
200271e0:	1000051e 	bne	r2,zero,200271f8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
200271e4:	e0bfff17 	ldw	r2,-4(fp)
200271e8:	00c00044 	movi	r3,1
200271ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
200271f0:	0005883a 	mov	r2,zero
200271f4:	00001206 	br	20027240 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200271f8:	0005303a 	rdctl	r2,status
200271fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027200:	e0fffc17 	ldw	r3,-16(fp)
20027204:	00bfff84 	movi	r2,-2
20027208:	1884703a 	and	r2,r3,r2
2002720c:	1001703a 	wrctl	status,r2
  
  return context;
20027210:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20027214:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
20027218:	e0bffe17 	ldw	r2,-8(fp)
2002721c:	1080020b 	ldhu	r2,8(r2)
20027220:	e0bffb0d 	sth	r2,-20(fp)
20027224:	e0bffa17 	ldw	r2,-24(fp)
20027228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002722c:	e0bffd17 	ldw	r2,-12(fp)
20027230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20027234:	e0bfff17 	ldw	r2,-4(fp)
20027238:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
2002723c:	e0bffb0b 	ldhu	r2,-20(fp)
}
20027240:	e037883a 	mov	sp,fp
20027244:	df000017 	ldw	fp,0(sp)
20027248:	dec00104 	addi	sp,sp,4
2002724c:	f800283a 	ret

20027250 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
20027250:	defff804 	addi	sp,sp,-32
20027254:	df000715 	stw	fp,28(sp)
20027258:	df000704 	addi	fp,sp,28
2002725c:	e13ffb15 	stw	r4,-20(fp)
20027260:	e17ffc15 	stw	r5,-16(fp)
20027264:	3009883a 	mov	r4,r6
20027268:	3807883a 	mov	r3,r7
2002726c:	e0800117 	ldw	r2,4(fp)
20027270:	e13ffd0d 	sth	r4,-12(fp)
20027274:	e0fffe05 	stb	r3,-8(fp)
20027278:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
2002727c:	d0a04917 	ldw	r2,-32476(gp)
20027280:	d0e04917 	ldw	r3,-32476(gp)
20027284:	18c00c03 	ldbu	r3,48(r3)
20027288:	18c00814 	ori	r3,r3,32
2002728c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
20027290:	d0a04917 	ldw	r2,-32476(gp)
20027294:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
20027298:	d0a04917 	ldw	r2,-32476(gp)
2002729c:	e0ffff0b 	ldhu	r3,-4(fp)
200272a0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
200272a4:	d0a04917 	ldw	r2,-32476(gp)
200272a8:	e0fffc17 	ldw	r3,-16(fp)
200272ac:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
200272b0:	e0bffc17 	ldw	r2,-16(fp)
200272b4:	e0fffd0b 	ldhu	r3,-12(fp)
200272b8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
200272bc:	e0bffc17 	ldw	r2,-16(fp)
200272c0:	e0fffe03 	ldbu	r3,-8(fp)
200272c4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
200272c8:	d0e04917 	ldw	r3,-32476(gp)
200272cc:	e0bffc17 	ldw	r2,-16(fp)
200272d0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
200272d4:	e0bffb17 	ldw	r2,-20(fp)
200272d8:	10c00117 	ldw	r3,4(r2)
200272dc:	e0bffc17 	ldw	r2,-16(fp)
200272e0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
200272e4:	e0bffc17 	ldw	r2,-16(fp)
200272e8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
200272ec:	e0bffc17 	ldw	r2,-16(fp)
200272f0:	e0fffb17 	ldw	r3,-20(fp)
200272f4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
200272f8:	e0bffb17 	ldw	r2,-20(fp)
200272fc:	10800117 	ldw	r2,4(r2)
20027300:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
20027304:	e0bff917 	ldw	r2,-28(fp)
20027308:	10000326 	beq	r2,zero,20027318 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
2002730c:	e0bff917 	ldw	r2,-28(fp)
20027310:	e0fffc17 	ldw	r3,-16(fp)
20027314:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
20027318:	e0bffb17 	ldw	r2,-20(fp)
2002731c:	e0fffc17 	ldw	r3,-16(fp)
20027320:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
20027324:	d0a04917 	ldw	r2,-32476(gp)
20027328:	10800d03 	ldbu	r2,52(r2)
2002732c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
20027330:	e0fffa03 	ldbu	r3,-24(fp)
20027334:	e13ffa03 	ldbu	r4,-24(fp)
20027338:	d0a04644 	addi	r2,gp,-32487
2002733c:	2085883a 	add	r2,r4,r2
20027340:	10800003 	ldbu	r2,0(r2)
20027344:	1009883a 	mov	r4,r2
20027348:	d0a04917 	ldw	r2,-32476(gp)
2002734c:	10800d43 	ldbu	r2,53(r2)
20027350:	0084303a 	nor	r2,zero,r2
20027354:	2084703a 	and	r2,r4,r2
20027358:	1009883a 	mov	r4,r2
2002735c:	d0a04644 	addi	r2,gp,-32487
20027360:	1885883a 	add	r2,r3,r2
20027364:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
20027368:	e0fffa03 	ldbu	r3,-24(fp)
2002736c:	d0a04644 	addi	r2,gp,-32487
20027370:	1885883a 	add	r2,r3,r2
20027374:	10800003 	ldbu	r2,0(r2)
20027378:	10803fcc 	andi	r2,r2,255
2002737c:	1000071e 	bne	r2,zero,2002739c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
20027380:	d0a04917 	ldw	r2,-32476(gp)
20027384:	10800d83 	ldbu	r2,54(r2)
20027388:	0084303a 	nor	r2,zero,r2
2002738c:	1007883a 	mov	r3,r2
20027390:	d0a04603 	ldbu	r2,-32488(gp)
20027394:	1884703a 	and	r2,r3,r2
20027398:	d0a04605 	stb	r2,-32488(gp)
    }
}
2002739c:	0001883a 	nop
200273a0:	e037883a 	mov	sp,fp
200273a4:	df000017 	ldw	fp,0(sp)
200273a8:	dec00104 	addi	sp,sp,4
200273ac:	f800283a 	ret

200273b0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
200273b0:	defffb04 	addi	sp,sp,-20
200273b4:	dfc00415 	stw	ra,16(sp)
200273b8:	df000315 	stw	fp,12(sp)
200273bc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
200273c0:	0140dc04 	movi	r5,880
200273c4:	01000034 	movhi	r4,0
200273c8:	21174f04 	addi	r4,r4,23868
200273cc:	00255f40 	call	200255f4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
200273d0:	00800034 	movhi	r2,0
200273d4:	10974f04 	addi	r2,r2,23868
200273d8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
200273dc:	00800034 	movhi	r2,0
200273e0:	10975a04 	addi	r2,r2,23912
200273e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
200273e8:	e03ffd0d 	sth	zero,-12(fp)
200273ec:	00001306 	br	2002743c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
200273f0:	e0bffe17 	ldw	r2,-8(fp)
200273f4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
200273f8:	e0bffe17 	ldw	r2,-8(fp)
200273fc:	e0ffff17 	ldw	r3,-4(fp)
20027400:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
20027404:	e0bffe17 	ldw	r2,-8(fp)
20027408:	00c00fc4 	movi	r3,63
2002740c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
20027410:	e0bffe17 	ldw	r2,-8(fp)
20027414:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
20027418:	e0bffe17 	ldw	r2,-8(fp)
2002741c:	10800b04 	addi	r2,r2,44
20027420:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
20027424:	e0bfff17 	ldw	r2,-4(fp)
20027428:	10800b04 	addi	r2,r2,44
2002742c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
20027430:	e0bffd0b 	ldhu	r2,-12(fp)
20027434:	10800044 	addi	r2,r2,1
20027438:	e0bffd0d 	sth	r2,-12(fp)
2002743c:	e0bffd0b 	ldhu	r2,-12(fp)
20027440:	108004f0 	cmpltui	r2,r2,19
20027444:	103fea1e 	bne	r2,zero,200273f0 <__flash_rwdata_start+0xffff9908>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
20027448:	e0bffe17 	ldw	r2,-8(fp)
2002744c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
20027450:	e0bffe17 	ldw	r2,-8(fp)
20027454:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
20027458:	e0bffe17 	ldw	r2,-8(fp)
2002745c:	00c00fc4 	movi	r3,63
20027460:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
20027464:	e0bffe17 	ldw	r2,-8(fp)
20027468:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
2002746c:	00800034 	movhi	r2,0
20027470:	10974f04 	addi	r2,r2,23868
20027474:	d0a04b15 	stw	r2,-32468(gp)
#endif
}
20027478:	0001883a 	nop
2002747c:	e037883a 	mov	sp,fp
20027480:	dfc00117 	ldw	ra,4(sp)
20027484:	df000017 	ldw	fp,0(sp)
20027488:	dec00204 	addi	sp,sp,8
2002748c:	f800283a 	ret

20027490 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
20027490:	defffa04 	addi	sp,sp,-24
20027494:	dfc00515 	stw	ra,20(sp)
20027498:	df000415 	stw	fp,16(sp)
2002749c:	df000404 	addi	fp,sp,16
200274a0:	e13ffe15 	stw	r4,-8(fp)
200274a4:	2805883a 	mov	r2,r5
200274a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
200274ac:	e0bffe17 	ldw	r2,-8(fp)
200274b0:	10800217 	ldw	r2,8(r2)
200274b4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
200274b8:	e0bffd17 	ldw	r2,-12(fp)
200274bc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
200274c0:	e0bffd17 	ldw	r2,-12(fp)
200274c4:	e0ffff0b 	ldhu	r3,-4(fp)
200274c8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
200274cc:	e0bffd17 	ldw	r2,-12(fp)
200274d0:	10c00c03 	ldbu	r3,48(r2)
200274d4:	00bff7c4 	movi	r2,-33
200274d8:	1884703a 	and	r2,r3,r2
200274dc:	1007883a 	mov	r3,r2
200274e0:	e0bffd17 	ldw	r2,-12(fp)
200274e4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
200274e8:	e0bffd17 	ldw	r2,-12(fp)
200274ec:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
200274f0:	e0bffd17 	ldw	r2,-12(fp)
200274f4:	10800c03 	ldbu	r2,48(r2)
200274f8:	10803fcc 	andi	r2,r2,255
200274fc:	1000181e 	bne	r2,zero,20027560 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
20027500:	e0bffd17 	ldw	r2,-12(fp)
20027504:	10c00d83 	ldbu	r3,54(r2)
20027508:	d0a04603 	ldbu	r2,-32488(gp)
2002750c:	1884b03a 	or	r2,r3,r2
20027510:	d0a04605 	stb	r2,-32488(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
20027514:	e0bffd17 	ldw	r2,-12(fp)
20027518:	10800d03 	ldbu	r2,52(r2)
2002751c:	10c03fcc 	andi	r3,r2,255
20027520:	e0bffd17 	ldw	r2,-12(fp)
20027524:	10800d03 	ldbu	r2,52(r2)
20027528:	11003fcc 	andi	r4,r2,255
2002752c:	d0a04644 	addi	r2,gp,-32487
20027530:	2085883a 	add	r2,r4,r2
20027534:	11000003 	ldbu	r4,0(r2)
20027538:	e0bffd17 	ldw	r2,-12(fp)
2002753c:	10800d43 	ldbu	r2,53(r2)
20027540:	2084b03a 	or	r2,r4,r2
20027544:	1009883a 	mov	r4,r2
20027548:	d0a04644 	addi	r2,gp,-32487
2002754c:	1885883a 	add	r2,r3,r2
20027550:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
20027554:	00800044 	movi	r2,1
20027558:	e0bffc05 	stb	r2,-16(fp)
2002755c:	00000106 	br	20027564 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
20027560:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
20027564:	e13ffe17 	ldw	r4,-8(fp)
20027568:	00275840 	call	20027584 <OS_FlagUnlink>
    return (sched);
2002756c:	e0bffc03 	ldbu	r2,-16(fp)
}
20027570:	e037883a 	mov	sp,fp
20027574:	dfc00117 	ldw	ra,4(sp)
20027578:	df000017 	ldw	fp,0(sp)
2002757c:	dec00204 	addi	sp,sp,8
20027580:	f800283a 	ret

20027584 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
20027584:	defffa04 	addi	sp,sp,-24
20027588:	df000515 	stw	fp,20(sp)
2002758c:	df000504 	addi	fp,sp,20
20027590:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
20027594:	e0bfff17 	ldw	r2,-4(fp)
20027598:	10800117 	ldw	r2,4(r2)
2002759c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
200275a0:	e0bfff17 	ldw	r2,-4(fp)
200275a4:	10800017 	ldw	r2,0(r2)
200275a8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
200275ac:	e0bffb17 	ldw	r2,-20(fp)
200275b0:	10000b1e 	bne	r2,zero,200275e0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
200275b4:	e0bfff17 	ldw	r2,-4(fp)
200275b8:	10800317 	ldw	r2,12(r2)
200275bc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
200275c0:	e0bffd17 	ldw	r2,-12(fp)
200275c4:	e0fffc17 	ldw	r3,-16(fp)
200275c8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
200275cc:	e0bffc17 	ldw	r2,-16(fp)
200275d0:	10000b26 	beq	r2,zero,20027600 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
200275d4:	e0bffc17 	ldw	r2,-16(fp)
200275d8:	10000115 	stw	zero,4(r2)
200275dc:	00000806 	br	20027600 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
200275e0:	e0bffb17 	ldw	r2,-20(fp)
200275e4:	e0fffc17 	ldw	r3,-16(fp)
200275e8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
200275ec:	e0bffc17 	ldw	r2,-16(fp)
200275f0:	10000326 	beq	r2,zero,20027600 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
200275f4:	e0bffc17 	ldw	r2,-16(fp)
200275f8:	e0fffb17 	ldw	r3,-20(fp)
200275fc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
20027600:	e0bfff17 	ldw	r2,-4(fp)
20027604:	10800217 	ldw	r2,8(r2)
20027608:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
2002760c:	e0bffe17 	ldw	r2,-8(fp)
20027610:	10000a15 	stw	zero,40(r2)
#endif
}
20027614:	0001883a 	nop
20027618:	e037883a 	mov	sp,fp
2002761c:	df000017 	ldw	fp,0(sp)
20027620:	dec00104 	addi	sp,sp,4
20027624:	f800283a 	ret

20027628 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
20027628:	defff404 	addi	sp,sp,-48
2002762c:	df000b15 	stw	fp,44(sp)
20027630:	df000b04 	addi	fp,sp,44
20027634:	e13ffc15 	stw	r4,-16(fp)
20027638:	e17ffd15 	stw	r5,-12(fp)
2002763c:	e1bffe15 	stw	r6,-8(fp)
20027640:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20027644:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20027648:	e0bfff17 	ldw	r2,-4(fp)
2002764c:	1000021e 	bne	r2,zero,20027658 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
20027650:	0005883a 	mov	r2,zero
20027654:	00006506 	br	200277ec <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
20027658:	e0bffc17 	ldw	r2,-16(fp)
2002765c:	1000051e 	bne	r2,zero,20027674 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
20027660:	e0bfff17 	ldw	r2,-4(fp)
20027664:	00c01884 	movi	r3,98
20027668:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2002766c:	0005883a 	mov	r2,zero
20027670:	00005e06 	br	200277ec <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
20027674:	e0bffc17 	ldw	r2,-16(fp)
20027678:	108000cc 	andi	r2,r2,3
2002767c:	10000526 	beq	r2,zero,20027694 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
20027680:	e0bfff17 	ldw	r2,-4(fp)
20027684:	00c01884 	movi	r3,98
20027688:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
2002768c:	0005883a 	mov	r2,zero
20027690:	00005606 	br	200277ec <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
20027694:	e0bffd17 	ldw	r2,-12(fp)
20027698:	108000a8 	cmpgeui	r2,r2,2
2002769c:	1000051e 	bne	r2,zero,200276b4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
200276a0:	e0bfff17 	ldw	r2,-4(fp)
200276a4:	00c016c4 	movi	r3,91
200276a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200276ac:	0005883a 	mov	r2,zero
200276b0:	00004e06 	br	200277ec <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
200276b4:	e0bffe17 	ldw	r2,-8(fp)
200276b8:	10800128 	cmpgeui	r2,r2,4
200276bc:	1000051e 	bne	r2,zero,200276d4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
200276c0:	e0bfff17 	ldw	r2,-4(fp)
200276c4:	00c01704 	movi	r3,92
200276c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
200276cc:	0005883a 	mov	r2,zero
200276d0:	00004606 	br	200277ec <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200276d4:	0005303a 	rdctl	r2,status
200276d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200276dc:	e0fffb17 	ldw	r3,-20(fp)
200276e0:	00bfff84 	movi	r2,-2
200276e4:	1884703a 	and	r2,r3,r2
200276e8:	1001703a 	wrctl	status,r2
  
  return context;
200276ec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
200276f0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
200276f4:	d0a04317 	ldw	r2,-32500(gp)
200276f8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
200276fc:	d0a04317 	ldw	r2,-32500(gp)
20027700:	10000326 	beq	r2,zero,20027710 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
20027704:	d0a04317 	ldw	r2,-32500(gp)
20027708:	10800117 	ldw	r2,4(r2)
2002770c:	d0a04315 	stw	r2,-32500(gp)
20027710:	e0bff817 	ldw	r2,-32(fp)
20027714:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027718:	e0bff917 	ldw	r2,-28(fp)
2002771c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
20027720:	e0bffa17 	ldw	r2,-24(fp)
20027724:	1000051e 	bne	r2,zero,2002773c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
20027728:	e0bfff17 	ldw	r2,-4(fp)
2002772c:	00c01684 	movi	r3,90
20027730:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
20027734:	0005883a 	mov	r2,zero
20027738:	00002c06 	br	200277ec <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
2002773c:	e0bffc17 	ldw	r2,-16(fp)
20027740:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
20027744:	e0fffc17 	ldw	r3,-16(fp)
20027748:	e0bffe17 	ldw	r2,-8(fp)
2002774c:	1885883a 	add	r2,r3,r2
20027750:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
20027754:	e03ff715 	stw	zero,-36(fp)
20027758:	00000c06 	br	2002778c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
2002775c:	e0bff617 	ldw	r2,-40(fp)
20027760:	e0fff517 	ldw	r3,-44(fp)
20027764:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
20027768:	e0bff517 	ldw	r2,-44(fp)
2002776c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
20027770:	e0fff517 	ldw	r3,-44(fp)
20027774:	e0bffe17 	ldw	r2,-8(fp)
20027778:	1885883a 	add	r2,r3,r2
2002777c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
20027780:	e0bff717 	ldw	r2,-36(fp)
20027784:	10800044 	addi	r2,r2,1
20027788:	e0bff715 	stw	r2,-36(fp)
2002778c:	e0bffd17 	ldw	r2,-12(fp)
20027790:	10bfffc4 	addi	r2,r2,-1
20027794:	e0fff717 	ldw	r3,-36(fp)
20027798:	18bff036 	bltu	r3,r2,2002775c <__flash_rwdata_start+0xffff9c74>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
2002779c:	e0bff617 	ldw	r2,-40(fp)
200277a0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
200277a4:	e0bffa17 	ldw	r2,-24(fp)
200277a8:	e0fffc17 	ldw	r3,-16(fp)
200277ac:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
200277b0:	e0bffa17 	ldw	r2,-24(fp)
200277b4:	e0fffc17 	ldw	r3,-16(fp)
200277b8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
200277bc:	e0bffa17 	ldw	r2,-24(fp)
200277c0:	e0fffd17 	ldw	r3,-12(fp)
200277c4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
200277c8:	e0bffa17 	ldw	r2,-24(fp)
200277cc:	e0fffd17 	ldw	r3,-12(fp)
200277d0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
200277d4:	e0bffa17 	ldw	r2,-24(fp)
200277d8:	e0fffe17 	ldw	r3,-8(fp)
200277dc:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
200277e0:	e0bfff17 	ldw	r2,-4(fp)
200277e4:	10000005 	stb	zero,0(r2)
    return (pmem);
200277e8:	e0bffa17 	ldw	r2,-24(fp)
}
200277ec:	e037883a 	mov	sp,fp
200277f0:	df000017 	ldw	fp,0(sp)
200277f4:	dec00104 	addi	sp,sp,4
200277f8:	f800283a 	ret

200277fc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
200277fc:	defff804 	addi	sp,sp,-32
20027800:	df000715 	stw	fp,28(sp)
20027804:	df000704 	addi	fp,sp,28
20027808:	e13ffe15 	stw	r4,-8(fp)
2002780c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20027810:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20027814:	e0bfff17 	ldw	r2,-4(fp)
20027818:	1000021e 	bne	r2,zero,20027824 <OSMemGet+0x28>
        return ((void *)0);
2002781c:	0005883a 	mov	r2,zero
20027820:	00002e06 	br	200278dc <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
20027824:	e0bffe17 	ldw	r2,-8(fp)
20027828:	1000051e 	bne	r2,zero,20027840 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
2002782c:	e0bfff17 	ldw	r2,-4(fp)
20027830:	00c01804 	movi	r3,96
20027834:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20027838:	0005883a 	mov	r2,zero
2002783c:	00002706 	br	200278dc <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027840:	0005303a 	rdctl	r2,status
20027844:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027848:	e0fffd17 	ldw	r3,-12(fp)
2002784c:	00bfff84 	movi	r2,-2
20027850:	1884703a 	and	r2,r3,r2
20027854:	1001703a 	wrctl	status,r2
  
  return context;
20027858:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
2002785c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
20027860:	e0bffe17 	ldw	r2,-8(fp)
20027864:	10800417 	ldw	r2,16(r2)
20027868:	10001426 	beq	r2,zero,200278bc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
2002786c:	e0bffe17 	ldw	r2,-8(fp)
20027870:	10800117 	ldw	r2,4(r2)
20027874:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
20027878:	e0bffb17 	ldw	r2,-20(fp)
2002787c:	10c00017 	ldw	r3,0(r2)
20027880:	e0bffe17 	ldw	r2,-8(fp)
20027884:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
20027888:	e0bffe17 	ldw	r2,-8(fp)
2002788c:	10800417 	ldw	r2,16(r2)
20027890:	10ffffc4 	addi	r3,r2,-1
20027894:	e0bffe17 	ldw	r2,-8(fp)
20027898:	10c00415 	stw	r3,16(r2)
2002789c:	e0bff917 	ldw	r2,-28(fp)
200278a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200278a4:	e0bffa17 	ldw	r2,-24(fp)
200278a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
200278ac:	e0bfff17 	ldw	r2,-4(fp)
200278b0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
200278b4:	e0bffb17 	ldw	r2,-20(fp)
200278b8:	00000806 	br	200278dc <OSMemGet+0xe0>
200278bc:	e0bff917 	ldw	r2,-28(fp)
200278c0:	e0bffc15 	stw	r2,-16(fp)
200278c4:	e0bffc17 	ldw	r2,-16(fp)
200278c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
200278cc:	e0bfff17 	ldw	r2,-4(fp)
200278d0:	00c01744 	movi	r3,93
200278d4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
200278d8:	0005883a 	mov	r2,zero
}
200278dc:	e037883a 	mov	sp,fp
200278e0:	df000017 	ldw	fp,0(sp)
200278e4:	dec00104 	addi	sp,sp,4
200278e8:	f800283a 	ret

200278ec <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
200278ec:	defff704 	addi	sp,sp,-36
200278f0:	dfc00815 	stw	ra,32(sp)
200278f4:	df000715 	stw	fp,28(sp)
200278f8:	df000704 	addi	fp,sp,28
200278fc:	e13ffd15 	stw	r4,-12(fp)
20027900:	e17ffe15 	stw	r5,-8(fp)
20027904:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20027908:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
2002790c:	e0bfff17 	ldw	r2,-4(fp)
20027910:	1000021e 	bne	r2,zero,2002791c <OSMemNameGet+0x30>
        return (0);
20027914:	0005883a 	mov	r2,zero
20027918:	00002b06 	br	200279c8 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
2002791c:	e0bffd17 	ldw	r2,-12(fp)
20027920:	1000051e 	bne	r2,zero,20027938 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
20027924:	e0bfff17 	ldw	r2,-4(fp)
20027928:	00c01804 	movi	r3,96
2002792c:	10c00005 	stb	r3,0(r2)
        return (0);
20027930:	0005883a 	mov	r2,zero
20027934:	00002406 	br	200279c8 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20027938:	e0bffe17 	ldw	r2,-8(fp)
2002793c:	1000051e 	bne	r2,zero,20027954 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
20027940:	e0bfff17 	ldw	r2,-4(fp)
20027944:	00c00304 	movi	r3,12
20027948:	10c00005 	stb	r3,0(r2)
        return (0);
2002794c:	0005883a 	mov	r2,zero
20027950:	00001d06 	br	200279c8 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20027954:	d0a04803 	ldbu	r2,-32480(gp)
20027958:	10803fcc 	andi	r2,r2,255
2002795c:	10000526 	beq	r2,zero,20027974 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
20027960:	e0bfff17 	ldw	r2,-4(fp)
20027964:	00c00444 	movi	r3,17
20027968:	10c00005 	stb	r3,0(r2)
        return (0);
2002796c:	0005883a 	mov	r2,zero
20027970:	00001506 	br	200279c8 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027974:	0005303a 	rdctl	r2,status
20027978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002797c:	e0fffb17 	ldw	r3,-20(fp)
20027980:	00bfff84 	movi	r2,-2
20027984:	1884703a 	and	r2,r3,r2
20027988:	1001703a 	wrctl	status,r2
  
  return context;
2002798c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
20027990:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
20027994:	e0bffd17 	ldw	r2,-12(fp)
20027998:	10800504 	addi	r2,r2,20
2002799c:	100b883a 	mov	r5,r2
200279a0:	e13ffe17 	ldw	r4,-8(fp)
200279a4:	00257f40 	call	200257f4 <OS_StrCopy>
200279a8:	e0bffa05 	stb	r2,-24(fp)
200279ac:	e0bff917 	ldw	r2,-28(fp)
200279b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200279b4:	e0bffc17 	ldw	r2,-16(fp)
200279b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200279bc:	e0bfff17 	ldw	r2,-4(fp)
200279c0:	10000005 	stb	zero,0(r2)
    return (len);
200279c4:	e0bffa03 	ldbu	r2,-24(fp)
}
200279c8:	e037883a 	mov	sp,fp
200279cc:	dfc00117 	ldw	ra,4(sp)
200279d0:	df000017 	ldw	fp,0(sp)
200279d4:	dec00204 	addi	sp,sp,8
200279d8:	f800283a 	ret

200279dc <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
200279dc:	defff604 	addi	sp,sp,-40
200279e0:	dfc00915 	stw	ra,36(sp)
200279e4:	df000815 	stw	fp,32(sp)
200279e8:	df000804 	addi	fp,sp,32
200279ec:	e13ffd15 	stw	r4,-12(fp)
200279f0:	e17ffe15 	stw	r5,-8(fp)
200279f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200279f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
200279fc:	e0bfff17 	ldw	r2,-4(fp)
20027a00:	10003526 	beq	r2,zero,20027ad8 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
20027a04:	e0bffd17 	ldw	r2,-12(fp)
20027a08:	1000041e 	bne	r2,zero,20027a1c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
20027a0c:	e0bfff17 	ldw	r2,-4(fp)
20027a10:	00c01804 	movi	r3,96
20027a14:	10c00005 	stb	r3,0(r2)
        return;
20027a18:	00003006 	br	20027adc <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
20027a1c:	e0bffe17 	ldw	r2,-8(fp)
20027a20:	1000041e 	bne	r2,zero,20027a34 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
20027a24:	e0bfff17 	ldw	r2,-4(fp)
20027a28:	00c00304 	movi	r3,12
20027a2c:	10c00005 	stb	r3,0(r2)
        return;
20027a30:	00002a06 	br	20027adc <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
20027a34:	d0a04803 	ldbu	r2,-32480(gp)
20027a38:	10803fcc 	andi	r2,r2,255
20027a3c:	10000426 	beq	r2,zero,20027a50 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
20027a40:	e0bfff17 	ldw	r2,-4(fp)
20027a44:	00c00484 	movi	r3,18
20027a48:	10c00005 	stb	r3,0(r2)
        return;
20027a4c:	00002306 	br	20027adc <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027a50:	0005303a 	rdctl	r2,status
20027a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027a58:	e0fffc17 	ldw	r3,-16(fp)
20027a5c:	00bfff84 	movi	r2,-2
20027a60:	1884703a 	and	r2,r3,r2
20027a64:	1001703a 	wrctl	status,r2
  
  return context;
20027a68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20027a6c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
20027a70:	e13ffe17 	ldw	r4,-8(fp)
20027a74:	00258680 	call	20025868 <OS_StrLen>
20027a78:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
20027a7c:	e0bffa03 	ldbu	r2,-24(fp)
20027a80:	10800830 	cmpltui	r2,r2,32
20027a84:	1000081e 	bne	r2,zero,20027aa8 <OSMemNameSet+0xcc>
20027a88:	e0bff817 	ldw	r2,-32(fp)
20027a8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027a90:	e0bff917 	ldw	r2,-28(fp)
20027a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
20027a98:	e0bfff17 	ldw	r2,-4(fp)
20027a9c:	00c018c4 	movi	r3,99
20027aa0:	10c00005 	stb	r3,0(r2)
        return;
20027aa4:	00000d06 	br	20027adc <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
20027aa8:	e0bffd17 	ldw	r2,-12(fp)
20027aac:	10800504 	addi	r2,r2,20
20027ab0:	e17ffe17 	ldw	r5,-8(fp)
20027ab4:	1009883a 	mov	r4,r2
20027ab8:	00257f40 	call	200257f4 <OS_StrCopy>
20027abc:	e0bff817 	ldw	r2,-32(fp)
20027ac0:	e0bffb15 	stw	r2,-20(fp)
20027ac4:	e0bffb17 	ldw	r2,-20(fp)
20027ac8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20027acc:	e0bfff17 	ldw	r2,-4(fp)
20027ad0:	10000005 	stb	zero,0(r2)
20027ad4:	00000106 	br	20027adc <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
20027ad8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
20027adc:	e037883a 	mov	sp,fp
20027ae0:	dfc00117 	ldw	ra,4(sp)
20027ae4:	df000017 	ldw	fp,0(sp)
20027ae8:	dec00204 	addi	sp,sp,8
20027aec:	f800283a 	ret

20027af0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
20027af0:	defff904 	addi	sp,sp,-28
20027af4:	df000615 	stw	fp,24(sp)
20027af8:	df000604 	addi	fp,sp,24
20027afc:	e13ffe15 	stw	r4,-8(fp)
20027b00:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20027b04:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20027b08:	e0bffe17 	ldw	r2,-8(fp)
20027b0c:	1000021e 	bne	r2,zero,20027b18 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20027b10:	00801804 	movi	r2,96
20027b14:	00002806 	br	20027bb8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
20027b18:	e0bfff17 	ldw	r2,-4(fp)
20027b1c:	1000021e 	bne	r2,zero,20027b28 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
20027b20:	008017c4 	movi	r2,95
20027b24:	00002406 	br	20027bb8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027b28:	0005303a 	rdctl	r2,status
20027b2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027b30:	e0fffd17 	ldw	r3,-12(fp)
20027b34:	00bfff84 	movi	r2,-2
20027b38:	1884703a 	and	r2,r3,r2
20027b3c:	1001703a 	wrctl	status,r2
  
  return context;
20027b40:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20027b44:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
20027b48:	e0bffe17 	ldw	r2,-8(fp)
20027b4c:	10c00417 	ldw	r3,16(r2)
20027b50:	e0bffe17 	ldw	r2,-8(fp)
20027b54:	10800317 	ldw	r2,12(r2)
20027b58:	18800636 	bltu	r3,r2,20027b74 <OSMemPut+0x84>
20027b5c:	e0bffa17 	ldw	r2,-24(fp)
20027b60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027b64:	e0bffb17 	ldw	r2,-20(fp)
20027b68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
20027b6c:	00801784 	movi	r2,94
20027b70:	00001106 	br	20027bb8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
20027b74:	e0bffe17 	ldw	r2,-8(fp)
20027b78:	10c00117 	ldw	r3,4(r2)
20027b7c:	e0bfff17 	ldw	r2,-4(fp)
20027b80:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
20027b84:	e0bffe17 	ldw	r2,-8(fp)
20027b88:	e0ffff17 	ldw	r3,-4(fp)
20027b8c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
20027b90:	e0bffe17 	ldw	r2,-8(fp)
20027b94:	10800417 	ldw	r2,16(r2)
20027b98:	10c00044 	addi	r3,r2,1
20027b9c:	e0bffe17 	ldw	r2,-8(fp)
20027ba0:	10c00415 	stw	r3,16(r2)
20027ba4:	e0bffa17 	ldw	r2,-24(fp)
20027ba8:	e0bffc15 	stw	r2,-16(fp)
20027bac:	e0bffc17 	ldw	r2,-16(fp)
20027bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
20027bb4:	0005883a 	mov	r2,zero
}
20027bb8:	e037883a 	mov	sp,fp
20027bbc:	df000017 	ldw	fp,0(sp)
20027bc0:	dec00104 	addi	sp,sp,4
20027bc4:	f800283a 	ret

20027bc8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
20027bc8:	defffa04 	addi	sp,sp,-24
20027bcc:	df000515 	stw	fp,20(sp)
20027bd0:	df000504 	addi	fp,sp,20
20027bd4:	e13ffe15 	stw	r4,-8(fp)
20027bd8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20027bdc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
20027be0:	e0bffe17 	ldw	r2,-8(fp)
20027be4:	1000021e 	bne	r2,zero,20027bf0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
20027be8:	00801804 	movi	r2,96
20027bec:	00002c06 	br	20027ca0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
20027bf0:	e0bfff17 	ldw	r2,-4(fp)
20027bf4:	1000021e 	bne	r2,zero,20027c00 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
20027bf8:	00801844 	movi	r2,97
20027bfc:	00002806 	br	20027ca0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027c00:	0005303a 	rdctl	r2,status
20027c04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027c08:	e0fffc17 	ldw	r3,-16(fp)
20027c0c:	00bfff84 	movi	r2,-2
20027c10:	1884703a 	and	r2,r3,r2
20027c14:	1001703a 	wrctl	status,r2
  
  return context;
20027c18:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20027c1c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
20027c20:	e0bffe17 	ldw	r2,-8(fp)
20027c24:	10c00017 	ldw	r3,0(r2)
20027c28:	e0bfff17 	ldw	r2,-4(fp)
20027c2c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
20027c30:	e0bffe17 	ldw	r2,-8(fp)
20027c34:	10c00117 	ldw	r3,4(r2)
20027c38:	e0bfff17 	ldw	r2,-4(fp)
20027c3c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
20027c40:	e0bffe17 	ldw	r2,-8(fp)
20027c44:	10c00217 	ldw	r3,8(r2)
20027c48:	e0bfff17 	ldw	r2,-4(fp)
20027c4c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
20027c50:	e0bffe17 	ldw	r2,-8(fp)
20027c54:	10c00317 	ldw	r3,12(r2)
20027c58:	e0bfff17 	ldw	r2,-4(fp)
20027c5c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
20027c60:	e0bffe17 	ldw	r2,-8(fp)
20027c64:	10c00417 	ldw	r3,16(r2)
20027c68:	e0bfff17 	ldw	r2,-4(fp)
20027c6c:	10c00415 	stw	r3,16(r2)
20027c70:	e0bffb17 	ldw	r2,-20(fp)
20027c74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027c78:	e0bffd17 	ldw	r2,-12(fp)
20027c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
20027c80:	e0bfff17 	ldw	r2,-4(fp)
20027c84:	10c00317 	ldw	r3,12(r2)
20027c88:	e0bfff17 	ldw	r2,-4(fp)
20027c8c:	10800417 	ldw	r2,16(r2)
20027c90:	1887c83a 	sub	r3,r3,r2
20027c94:	e0bfff17 	ldw	r2,-4(fp)
20027c98:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
20027c9c:	0005883a 	mov	r2,zero
}
20027ca0:	e037883a 	mov	sp,fp
20027ca4:	df000017 	ldw	fp,0(sp)
20027ca8:	dec00104 	addi	sp,sp,4
20027cac:	f800283a 	ret

20027cb0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
20027cb0:	defffc04 	addi	sp,sp,-16
20027cb4:	dfc00315 	stw	ra,12(sp)
20027cb8:	df000215 	stw	fp,8(sp)
20027cbc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
20027cc0:	01430c04 	movi	r5,3120
20027cc4:	01000034 	movhi	r4,0
20027cc8:	21182b04 	addi	r4,r4,24748
20027ccc:	00255f40 	call	200255f4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
20027cd0:	00800034 	movhi	r2,0
20027cd4:	10982b04 	addi	r2,r2,24748
20027cd8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20027cdc:	e03fff0d 	sth	zero,-4(fp)
20027ce0:	00001306 	br	20027d30 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
20027ce4:	e0bfff0b 	ldhu	r2,-4(fp)
20027ce8:	10800044 	addi	r2,r2,1
20027cec:	10c00d24 	muli	r3,r2,52
20027cf0:	00800034 	movhi	r2,0
20027cf4:	10982b04 	addi	r2,r2,24748
20027cf8:	1887883a 	add	r3,r3,r2
20027cfc:	e0bffe17 	ldw	r2,-8(fp)
20027d00:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
20027d04:	e0bffe17 	ldw	r2,-8(fp)
20027d08:	00c00fc4 	movi	r3,63
20027d0c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
20027d10:	e0bffe17 	ldw	r2,-8(fp)
20027d14:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
20027d18:	e0bffe17 	ldw	r2,-8(fp)
20027d1c:	10800d04 	addi	r2,r2,52
20027d20:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
20027d24:	e0bfff0b 	ldhu	r2,-4(fp)
20027d28:	10800044 	addi	r2,r2,1
20027d2c:	e0bfff0d 	sth	r2,-4(fp)
20027d30:	e0bfff0b 	ldhu	r2,-4(fp)
20027d34:	10800ef0 	cmpltui	r2,r2,59
20027d38:	103fea1e 	bne	r2,zero,20027ce4 <__flash_rwdata_start+0xffffa1fc>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
20027d3c:	e0bffe17 	ldw	r2,-8(fp)
20027d40:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
20027d44:	e0bffe17 	ldw	r2,-8(fp)
20027d48:	00c00fc4 	movi	r3,63
20027d4c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
20027d50:	e0bffe17 	ldw	r2,-8(fp)
20027d54:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
20027d58:	00800034 	movhi	r2,0
20027d5c:	10982b04 	addi	r2,r2,24748
20027d60:	d0a04315 	stw	r2,-32500(gp)
#endif
}
20027d64:	0001883a 	nop
20027d68:	e037883a 	mov	sp,fp
20027d6c:	dfc00117 	ldw	ra,4(sp)
20027d70:	df000017 	ldw	fp,0(sp)
20027d74:	dec00204 	addi	sp,sp,8
20027d78:	f800283a 	ret

20027d7c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
20027d7c:	defff804 	addi	sp,sp,-32
20027d80:	df000715 	stw	fp,28(sp)
20027d84:	df000704 	addi	fp,sp,28
20027d88:	e13ffe15 	stw	r4,-8(fp)
20027d8c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20027d90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
20027d94:	e0bfff17 	ldw	r2,-4(fp)
20027d98:	1000021e 	bne	r2,zero,20027da4 <OSQAccept+0x28>
        return ((void *)0);
20027d9c:	0005883a 	mov	r2,zero
20027da0:	00004206 	br	20027eac <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
20027da4:	e0bffe17 	ldw	r2,-8(fp)
20027da8:	1000051e 	bne	r2,zero,20027dc0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
20027dac:	e0bfff17 	ldw	r2,-4(fp)
20027db0:	00c00104 	movi	r3,4
20027db4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20027db8:	0005883a 	mov	r2,zero
20027dbc:	00003b06 	br	20027eac <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
20027dc0:	e0bffe17 	ldw	r2,-8(fp)
20027dc4:	10800003 	ldbu	r2,0(r2)
20027dc8:	10803fcc 	andi	r2,r2,255
20027dcc:	108000a0 	cmpeqi	r2,r2,2
20027dd0:	1000051e 	bne	r2,zero,20027de8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
20027dd4:	e0bfff17 	ldw	r2,-4(fp)
20027dd8:	00c00044 	movi	r3,1
20027ddc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20027de0:	0005883a 	mov	r2,zero
20027de4:	00003106 	br	20027eac <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027de8:	0005303a 	rdctl	r2,status
20027dec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027df0:	e0fffd17 	ldw	r3,-12(fp)
20027df4:	00bfff84 	movi	r2,-2
20027df8:	1884703a 	and	r2,r3,r2
20027dfc:	1001703a 	wrctl	status,r2
  
  return context;
20027e00:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20027e04:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
20027e08:	e0bffe17 	ldw	r2,-8(fp)
20027e0c:	10800117 	ldw	r2,4(r2)
20027e10:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20027e14:	e0bffc17 	ldw	r2,-16(fp)
20027e18:	1080058b 	ldhu	r2,22(r2)
20027e1c:	10bfffcc 	andi	r2,r2,65535
20027e20:	10001926 	beq	r2,zero,20027e88 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20027e24:	e0bffc17 	ldw	r2,-16(fp)
20027e28:	10800417 	ldw	r2,16(r2)
20027e2c:	11000104 	addi	r4,r2,4
20027e30:	e0fffc17 	ldw	r3,-16(fp)
20027e34:	19000415 	stw	r4,16(r3)
20027e38:	10800017 	ldw	r2,0(r2)
20027e3c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
20027e40:	e0bffc17 	ldw	r2,-16(fp)
20027e44:	1080058b 	ldhu	r2,22(r2)
20027e48:	10bfffc4 	addi	r2,r2,-1
20027e4c:	1007883a 	mov	r3,r2
20027e50:	e0bffc17 	ldw	r2,-16(fp)
20027e54:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
20027e58:	e0bffc17 	ldw	r2,-16(fp)
20027e5c:	10c00417 	ldw	r3,16(r2)
20027e60:	e0bffc17 	ldw	r2,-16(fp)
20027e64:	10800217 	ldw	r2,8(r2)
20027e68:	1880041e 	bne	r3,r2,20027e7c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
20027e6c:	e0bffc17 	ldw	r2,-16(fp)
20027e70:	10c00117 	ldw	r3,4(r2)
20027e74:	e0bffc17 	ldw	r2,-16(fp)
20027e78:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
20027e7c:	e0bfff17 	ldw	r2,-4(fp)
20027e80:	10000005 	stb	zero,0(r2)
20027e84:	00000406 	br	20027e98 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
20027e88:	e0bfff17 	ldw	r2,-4(fp)
20027e8c:	00c007c4 	movi	r3,31
20027e90:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
20027e94:	e03ff915 	stw	zero,-28(fp)
20027e98:	e0bffa17 	ldw	r2,-24(fp)
20027e9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027ea0:	e0bffb17 	ldw	r2,-20(fp)
20027ea4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
20027ea8:	e0bff917 	ldw	r2,-28(fp)
}
20027eac:	e037883a 	mov	sp,fp
20027eb0:	df000017 	ldw	fp,0(sp)
20027eb4:	dec00104 	addi	sp,sp,4
20027eb8:	f800283a 	ret

20027ebc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
20027ebc:	defff404 	addi	sp,sp,-48
20027ec0:	dfc00b15 	stw	ra,44(sp)
20027ec4:	df000a15 	stw	fp,40(sp)
20027ec8:	df000a04 	addi	fp,sp,40
20027ecc:	e13ffe15 	stw	r4,-8(fp)
20027ed0:	2805883a 	mov	r2,r5
20027ed4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
20027ed8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20027edc:	d0a04803 	ldbu	r2,-32480(gp)
20027ee0:	10803fcc 	andi	r2,r2,255
20027ee4:	10000226 	beq	r2,zero,20027ef0 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
20027ee8:	0005883a 	mov	r2,zero
20027eec:	00005906 	br	20028054 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027ef0:	0005303a 	rdctl	r2,status
20027ef4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027ef8:	e0fffd17 	ldw	r3,-12(fp)
20027efc:	00bfff84 	movi	r2,-2
20027f00:	1884703a 	and	r2,r3,r2
20027f04:	1001703a 	wrctl	status,r2
  
  return context;
20027f08:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20027f0c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
20027f10:	d0a04717 	ldw	r2,-32484(gp)
20027f14:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
20027f18:	d0a04717 	ldw	r2,-32484(gp)
20027f1c:	10000326 	beq	r2,zero,20027f2c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20027f20:	d0a04717 	ldw	r2,-32484(gp)
20027f24:	10800117 	ldw	r2,4(r2)
20027f28:	d0a04715 	stw	r2,-32484(gp)
20027f2c:	e0bff717 	ldw	r2,-36(fp)
20027f30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027f34:	e0bff817 	ldw	r2,-32(fp)
20027f38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
20027f3c:	e0bff617 	ldw	r2,-40(fp)
20027f40:	10004326 	beq	r2,zero,20028050 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20027f44:	0005303a 	rdctl	r2,status
20027f48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20027f4c:	e0fff917 	ldw	r3,-28(fp)
20027f50:	00bfff84 	movi	r2,-2
20027f54:	1884703a 	and	r2,r3,r2
20027f58:	1001703a 	wrctl	status,r2
  
  return context;
20027f5c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
20027f60:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
20027f64:	d0a04517 	ldw	r2,-32492(gp)
20027f68:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
20027f6c:	e0bffb17 	ldw	r2,-20(fp)
20027f70:	10002d26 	beq	r2,zero,20028028 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
20027f74:	d0a04517 	ldw	r2,-32492(gp)
20027f78:	10800017 	ldw	r2,0(r2)
20027f7c:	d0a04515 	stw	r2,-32492(gp)
20027f80:	e0bff717 	ldw	r2,-36(fp)
20027f84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20027f88:	e0bffa17 	ldw	r2,-24(fp)
20027f8c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
20027f90:	e0bffb17 	ldw	r2,-20(fp)
20027f94:	e0fffe17 	ldw	r3,-8(fp)
20027f98:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
20027f9c:	e0bfff0b 	ldhu	r2,-4(fp)
20027fa0:	1085883a 	add	r2,r2,r2
20027fa4:	1085883a 	add	r2,r2,r2
20027fa8:	1007883a 	mov	r3,r2
20027fac:	e0bffe17 	ldw	r2,-8(fp)
20027fb0:	10c7883a 	add	r3,r2,r3
20027fb4:	e0bffb17 	ldw	r2,-20(fp)
20027fb8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
20027fbc:	e0bffb17 	ldw	r2,-20(fp)
20027fc0:	e0fffe17 	ldw	r3,-8(fp)
20027fc4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
20027fc8:	e0bffb17 	ldw	r2,-20(fp)
20027fcc:	e0fffe17 	ldw	r3,-8(fp)
20027fd0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
20027fd4:	e0bffb17 	ldw	r2,-20(fp)
20027fd8:	e0ffff0b 	ldhu	r3,-4(fp)
20027fdc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
20027fe0:	e0bffb17 	ldw	r2,-20(fp)
20027fe4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
20027fe8:	e0bff617 	ldw	r2,-40(fp)
20027fec:	00c00084 	movi	r3,2
20027ff0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
20027ff4:	e0bff617 	ldw	r2,-40(fp)
20027ff8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
20027ffc:	e0bff617 	ldw	r2,-40(fp)
20028000:	e0fffb17 	ldw	r3,-20(fp)
20028004:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
20028008:	e0bff617 	ldw	r2,-40(fp)
2002800c:	00c00fc4 	movi	r3,63
20028010:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
20028014:	e0bff617 	ldw	r2,-40(fp)
20028018:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
2002801c:	e13ff617 	ldw	r4,-40(fp)
20028020:	00252140 	call	20025214 <OS_EventWaitListInit>
20028024:	00000a06 	br	20028050 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
20028028:	d0e04717 	ldw	r3,-32484(gp)
2002802c:	e0bff617 	ldw	r2,-40(fp)
20028030:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
20028034:	e0bff617 	ldw	r2,-40(fp)
20028038:	d0a04715 	stw	r2,-32484(gp)
2002803c:	e0bff717 	ldw	r2,-36(fp)
20028040:	e0bffc15 	stw	r2,-16(fp)
20028044:	e0bffc17 	ldw	r2,-16(fp)
20028048:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
2002804c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
20028050:	e0bff617 	ldw	r2,-40(fp)
}
20028054:	e037883a 	mov	sp,fp
20028058:	dfc00117 	ldw	ra,4(sp)
2002805c:	df000017 	ldw	fp,0(sp)
20028060:	dec00204 	addi	sp,sp,8
20028064:	f800283a 	ret

20028068 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20028068:	defff204 	addi	sp,sp,-56
2002806c:	dfc00d15 	stw	ra,52(sp)
20028070:	df000c15 	stw	fp,48(sp)
20028074:	df000c04 	addi	fp,sp,48
20028078:	e13ffd15 	stw	r4,-12(fp)
2002807c:	2805883a 	mov	r2,r5
20028080:	e1bfff15 	stw	r6,-4(fp)
20028084:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20028088:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2002808c:	e0bfff17 	ldw	r2,-4(fp)
20028090:	1000021e 	bne	r2,zero,2002809c <OSQDel+0x34>
        return (pevent);
20028094:	e0bffd17 	ldw	r2,-12(fp)
20028098:	00008e06 	br	200282d4 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
2002809c:	e0bffd17 	ldw	r2,-12(fp)
200280a0:	1000051e 	bne	r2,zero,200280b8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200280a4:	e0bfff17 	ldw	r2,-4(fp)
200280a8:	00c00104 	movi	r3,4
200280ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
200280b0:	e0bffd17 	ldw	r2,-12(fp)
200280b4:	00008706 	br	200282d4 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
200280b8:	e0bffd17 	ldw	r2,-12(fp)
200280bc:	10800003 	ldbu	r2,0(r2)
200280c0:	10803fcc 	andi	r2,r2,255
200280c4:	108000a0 	cmpeqi	r2,r2,2
200280c8:	1000051e 	bne	r2,zero,200280e0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
200280cc:	e0bfff17 	ldw	r2,-4(fp)
200280d0:	00c00044 	movi	r3,1
200280d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
200280d8:	e0bffd17 	ldw	r2,-12(fp)
200280dc:	00007d06 	br	200282d4 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
200280e0:	d0a04803 	ldbu	r2,-32480(gp)
200280e4:	10803fcc 	andi	r2,r2,255
200280e8:	10000526 	beq	r2,zero,20028100 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
200280ec:	e0bfff17 	ldw	r2,-4(fp)
200280f0:	00c003c4 	movi	r3,15
200280f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
200280f8:	e0bffd17 	ldw	r2,-12(fp)
200280fc:	00007506 	br	200282d4 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028100:	0005303a 	rdctl	r2,status
20028104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028108:	e0fffc17 	ldw	r3,-16(fp)
2002810c:	00bfff84 	movi	r2,-2
20028110:	1884703a 	and	r2,r3,r2
20028114:	1001703a 	wrctl	status,r2
  
  return context;
20028118:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2002811c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
20028120:	e0bffd17 	ldw	r2,-12(fp)
20028124:	10800283 	ldbu	r2,10(r2)
20028128:	10803fcc 	andi	r2,r2,255
2002812c:	10000326 	beq	r2,zero,2002813c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
20028130:	00800044 	movi	r2,1
20028134:	e0bff405 	stb	r2,-48(fp)
20028138:	00000106 	br	20028140 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
2002813c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
20028140:	e0bffe03 	ldbu	r2,-8(fp)
20028144:	10000326 	beq	r2,zero,20028154 <OSQDel+0xec>
20028148:	10800060 	cmpeqi	r2,r2,1
2002814c:	1000301e 	bne	r2,zero,20028210 <OSQDel+0x1a8>
20028150:	00005506 	br	200282a8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
20028154:	e0bff403 	ldbu	r2,-48(fp)
20028158:	10001e1e 	bne	r2,zero,200281d4 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
2002815c:	e0bffd17 	ldw	r2,-12(fp)
20028160:	00c00fc4 	movi	r3,63
20028164:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20028168:	e0bffd17 	ldw	r2,-12(fp)
2002816c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
20028170:	e0bffd17 	ldw	r2,-12(fp)
20028174:	10800117 	ldw	r2,4(r2)
20028178:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
2002817c:	d0e04517 	ldw	r3,-32492(gp)
20028180:	e0bff817 	ldw	r2,-32(fp)
20028184:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
20028188:	e0bff817 	ldw	r2,-32(fp)
2002818c:	d0a04515 	stw	r2,-32492(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20028190:	e0bffd17 	ldw	r2,-12(fp)
20028194:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20028198:	d0e04717 	ldw	r3,-32484(gp)
2002819c:	e0bffd17 	ldw	r2,-12(fp)
200281a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
200281a4:	e0bffd17 	ldw	r2,-12(fp)
200281a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
200281ac:	e0bffd17 	ldw	r2,-12(fp)
200281b0:	d0a04715 	stw	r2,-32484(gp)
200281b4:	e0bff617 	ldw	r2,-40(fp)
200281b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200281bc:	e0bff717 	ldw	r2,-36(fp)
200281c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
200281c4:	e0bfff17 	ldw	r2,-4(fp)
200281c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
200281cc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
200281d0:	00003f06 	br	200282d0 <OSQDel+0x268>
200281d4:	e0bff617 	ldw	r2,-40(fp)
200281d8:	e0bff915 	stw	r2,-28(fp)
200281dc:	e0bff917 	ldw	r2,-28(fp)
200281e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
200281e4:	e0bfff17 	ldw	r2,-4(fp)
200281e8:	00c01244 	movi	r3,73
200281ec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
200281f0:	e0bffd17 	ldw	r2,-12(fp)
200281f4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
200281f8:	00003506 	br	200282d0 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
200281fc:	000f883a 	mov	r7,zero
20028200:	01800104 	movi	r6,4
20028204:	000b883a 	mov	r5,zero
20028208:	e13ffd17 	ldw	r4,-12(fp)
2002820c:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
20028210:	e0bffd17 	ldw	r2,-12(fp)
20028214:	10800283 	ldbu	r2,10(r2)
20028218:	10803fcc 	andi	r2,r2,255
2002821c:	103ff71e 	bne	r2,zero,200281fc <__flash_rwdata_start+0xffffa714>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
20028220:	e0bffd17 	ldw	r2,-12(fp)
20028224:	00c00fc4 	movi	r3,63
20028228:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
2002822c:	e0bffd17 	ldw	r2,-12(fp)
20028230:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
20028234:	e0bffd17 	ldw	r2,-12(fp)
20028238:	10800117 	ldw	r2,4(r2)
2002823c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
20028240:	d0e04517 	ldw	r3,-32492(gp)
20028244:	e0bff817 	ldw	r2,-32(fp)
20028248:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
2002824c:	e0bff817 	ldw	r2,-32(fp)
20028250:	d0a04515 	stw	r2,-32492(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20028254:	e0bffd17 	ldw	r2,-12(fp)
20028258:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
2002825c:	d0e04717 	ldw	r3,-32484(gp)
20028260:	e0bffd17 	ldw	r2,-12(fp)
20028264:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
20028268:	e0bffd17 	ldw	r2,-12(fp)
2002826c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
20028270:	e0bffd17 	ldw	r2,-12(fp)
20028274:	d0a04715 	stw	r2,-32484(gp)
20028278:	e0bff617 	ldw	r2,-40(fp)
2002827c:	e0bffa15 	stw	r2,-24(fp)
20028280:	e0bffa17 	ldw	r2,-24(fp)
20028284:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
20028288:	e0bff403 	ldbu	r2,-48(fp)
2002828c:	10800058 	cmpnei	r2,r2,1
20028290:	1000011e 	bne	r2,zero,20028298 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
20028294:	00256b00 	call	200256b0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
20028298:	e0bfff17 	ldw	r2,-4(fp)
2002829c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
200282a0:	e03ff515 	stw	zero,-44(fp)
             break;
200282a4:	00000a06 	br	200282d0 <OSQDel+0x268>
200282a8:	e0bff617 	ldw	r2,-40(fp)
200282ac:	e0bffb15 	stw	r2,-20(fp)
200282b0:	e0bffb17 	ldw	r2,-20(fp)
200282b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
200282b8:	e0bfff17 	ldw	r2,-4(fp)
200282bc:	00c001c4 	movi	r3,7
200282c0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
200282c4:	e0bffd17 	ldw	r2,-12(fp)
200282c8:	e0bff515 	stw	r2,-44(fp)
             break;
200282cc:	0001883a 	nop
    }
    return (pevent_return);
200282d0:	e0bff517 	ldw	r2,-44(fp)
}
200282d4:	e037883a 	mov	sp,fp
200282d8:	dfc00117 	ldw	ra,4(sp)
200282dc:	df000017 	ldw	fp,0(sp)
200282e0:	dec00204 	addi	sp,sp,8
200282e4:	f800283a 	ret

200282e8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
200282e8:	defffa04 	addi	sp,sp,-24
200282ec:	df000515 	stw	fp,20(sp)
200282f0:	df000504 	addi	fp,sp,20
200282f4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200282f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200282fc:	e0bfff17 	ldw	r2,-4(fp)
20028300:	1000021e 	bne	r2,zero,2002830c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
20028304:	00800104 	movi	r2,4
20028308:	00002106 	br	20028390 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
2002830c:	e0bfff17 	ldw	r2,-4(fp)
20028310:	10800003 	ldbu	r2,0(r2)
20028314:	10803fcc 	andi	r2,r2,255
20028318:	108000a0 	cmpeqi	r2,r2,2
2002831c:	1000021e 	bne	r2,zero,20028328 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
20028320:	00800044 	movi	r2,1
20028324:	00001a06 	br	20028390 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028328:	0005303a 	rdctl	r2,status
2002832c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028330:	e0fffd17 	ldw	r3,-12(fp)
20028334:	00bfff84 	movi	r2,-2
20028338:	1884703a 	and	r2,r3,r2
2002833c:	1001703a 	wrctl	status,r2
  
  return context;
20028340:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20028344:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
20028348:	e0bfff17 	ldw	r2,-4(fp)
2002834c:	10800117 	ldw	r2,4(r2)
20028350:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
20028354:	e0bffc17 	ldw	r2,-16(fp)
20028358:	10c00117 	ldw	r3,4(r2)
2002835c:	e0bffc17 	ldw	r2,-16(fp)
20028360:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
20028364:	e0bffc17 	ldw	r2,-16(fp)
20028368:	10c00117 	ldw	r3,4(r2)
2002836c:	e0bffc17 	ldw	r2,-16(fp)
20028370:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
20028374:	e0bffc17 	ldw	r2,-16(fp)
20028378:	1000058d 	sth	zero,22(r2)
2002837c:	e0bffb17 	ldw	r2,-20(fp)
20028380:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028384:	e0bffe17 	ldw	r2,-8(fp)
20028388:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2002838c:	0005883a 	mov	r2,zero
}
20028390:	e037883a 	mov	sp,fp
20028394:	df000017 	ldw	fp,0(sp)
20028398:	dec00104 	addi	sp,sp,4
2002839c:	f800283a 	ret

200283a0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
200283a0:	defff304 	addi	sp,sp,-52
200283a4:	dfc00c15 	stw	ra,48(sp)
200283a8:	df000b15 	stw	fp,44(sp)
200283ac:	df000b04 	addi	fp,sp,44
200283b0:	e13ffd15 	stw	r4,-12(fp)
200283b4:	2805883a 	mov	r2,r5
200283b8:	e1bfff15 	stw	r6,-4(fp)
200283bc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
200283c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
200283c4:	e0bfff17 	ldw	r2,-4(fp)
200283c8:	1000021e 	bne	r2,zero,200283d4 <OSQPend+0x34>
        return ((void *)0);
200283cc:	0005883a 	mov	r2,zero
200283d0:	00009106 	br	20028618 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
200283d4:	e0bffd17 	ldw	r2,-12(fp)
200283d8:	1000051e 	bne	r2,zero,200283f0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
200283dc:	e0bfff17 	ldw	r2,-4(fp)
200283e0:	00c00104 	movi	r3,4
200283e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
200283e8:	0005883a 	mov	r2,zero
200283ec:	00008a06 	br	20028618 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
200283f0:	e0bffd17 	ldw	r2,-12(fp)
200283f4:	10800003 	ldbu	r2,0(r2)
200283f8:	10803fcc 	andi	r2,r2,255
200283fc:	108000a0 	cmpeqi	r2,r2,2
20028400:	1000051e 	bne	r2,zero,20028418 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20028404:	e0bfff17 	ldw	r2,-4(fp)
20028408:	00c00044 	movi	r3,1
2002840c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20028410:	0005883a 	mov	r2,zero
20028414:	00008006 	br	20028618 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
20028418:	d0a04803 	ldbu	r2,-32480(gp)
2002841c:	10803fcc 	andi	r2,r2,255
20028420:	10000526 	beq	r2,zero,20028438 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
20028424:	e0bfff17 	ldw	r2,-4(fp)
20028428:	00c00084 	movi	r3,2
2002842c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20028430:	0005883a 	mov	r2,zero
20028434:	00007806 	br	20028618 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
20028438:	d0a03a03 	ldbu	r2,-32536(gp)
2002843c:	10803fcc 	andi	r2,r2,255
20028440:	10000526 	beq	r2,zero,20028458 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
20028444:	e0bfff17 	ldw	r2,-4(fp)
20028448:	00c00344 	movi	r3,13
2002844c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
20028450:	0005883a 	mov	r2,zero
20028454:	00007006 	br	20028618 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028458:	0005303a 	rdctl	r2,status
2002845c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028460:	e0fffc17 	ldw	r3,-16(fp)
20028464:	00bfff84 	movi	r2,-2
20028468:	1884703a 	and	r2,r3,r2
2002846c:	1001703a 	wrctl	status,r2
  
  return context;
20028470:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20028474:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
20028478:	e0bffd17 	ldw	r2,-12(fp)
2002847c:	10800117 	ldw	r2,4(r2)
20028480:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
20028484:	e0bff817 	ldw	r2,-32(fp)
20028488:	1080058b 	ldhu	r2,22(r2)
2002848c:	10bfffcc 	andi	r2,r2,65535
20028490:	10001e26 	beq	r2,zero,2002850c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
20028494:	e0bff817 	ldw	r2,-32(fp)
20028498:	10800417 	ldw	r2,16(r2)
2002849c:	11000104 	addi	r4,r2,4
200284a0:	e0fff817 	ldw	r3,-32(fp)
200284a4:	19000415 	stw	r4,16(r3)
200284a8:	10800017 	ldw	r2,0(r2)
200284ac:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
200284b0:	e0bff817 	ldw	r2,-32(fp)
200284b4:	1080058b 	ldhu	r2,22(r2)
200284b8:	10bfffc4 	addi	r2,r2,-1
200284bc:	1007883a 	mov	r3,r2
200284c0:	e0bff817 	ldw	r2,-32(fp)
200284c4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
200284c8:	e0bff817 	ldw	r2,-32(fp)
200284cc:	10c00417 	ldw	r3,16(r2)
200284d0:	e0bff817 	ldw	r2,-32(fp)
200284d4:	10800217 	ldw	r2,8(r2)
200284d8:	1880041e 	bne	r3,r2,200284ec <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
200284dc:	e0bff817 	ldw	r2,-32(fp)
200284e0:	10c00117 	ldw	r3,4(r2)
200284e4:	e0bff817 	ldw	r2,-32(fp)
200284e8:	10c00415 	stw	r3,16(r2)
200284ec:	e0bff617 	ldw	r2,-40(fp)
200284f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200284f4:	e0bff717 	ldw	r2,-36(fp)
200284f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
200284fc:	e0bfff17 	ldw	r2,-4(fp)
20028500:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
20028504:	e0bff517 	ldw	r2,-44(fp)
20028508:	00004306 	br	20028618 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
2002850c:	d0a04917 	ldw	r2,-32476(gp)
20028510:	d0e04917 	ldw	r3,-32476(gp)
20028514:	18c00c03 	ldbu	r3,48(r3)
20028518:	18c00114 	ori	r3,r3,4
2002851c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20028520:	d0a04917 	ldw	r2,-32476(gp)
20028524:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
20028528:	d0a04917 	ldw	r2,-32476(gp)
2002852c:	e0fffe0b 	ldhu	r3,-8(fp)
20028530:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
20028534:	e13ffd17 	ldw	r4,-12(fp)
20028538:	0024dfc0 	call	20024dfc <OS_EventTaskWait>
2002853c:	e0bff617 	ldw	r2,-40(fp)
20028540:	e0bffb15 	stw	r2,-20(fp)
20028544:	e0bffb17 	ldw	r2,-20(fp)
20028548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
2002854c:	00256b00 	call	200256b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028550:	0005303a 	rdctl	r2,status
20028554:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028558:	e0fff917 	ldw	r3,-28(fp)
2002855c:	00bfff84 	movi	r2,-2
20028560:	1884703a 	and	r2,r3,r2
20028564:	1001703a 	wrctl	status,r2
  
  return context;
20028568:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
2002856c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
20028570:	d0a04917 	ldw	r2,-32476(gp)
20028574:	10800c43 	ldbu	r2,49(r2)
20028578:	10803fcc 	andi	r2,r2,255
2002857c:	10000326 	beq	r2,zero,2002858c <OSQPend+0x1ec>
20028580:	108000a0 	cmpeqi	r2,r2,2
20028584:	1000071e 	bne	r2,zero,200285a4 <OSQPend+0x204>
20028588:	00000b06 	br	200285b8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
2002858c:	d0a04917 	ldw	r2,-32476(gp)
20028590:	10800917 	ldw	r2,36(r2)
20028594:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
20028598:	e0bfff17 	ldw	r2,-4(fp)
2002859c:	10000005 	stb	zero,0(r2)
             break;
200285a0:	00000e06 	br	200285dc <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
200285a4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
200285a8:	e0bfff17 	ldw	r2,-4(fp)
200285ac:	00c00384 	movi	r3,14
200285b0:	10c00005 	stb	r3,0(r2)
             break;
200285b4:	00000906 	br	200285dc <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
200285b8:	d0a04917 	ldw	r2,-32476(gp)
200285bc:	e17ffd17 	ldw	r5,-12(fp)
200285c0:	1009883a 	mov	r4,r2
200285c4:	002505c0 	call	2002505c <OS_EventTaskRemove>
             pmsg = (void *)0;
200285c8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
200285cc:	e0bfff17 	ldw	r2,-4(fp)
200285d0:	00c00284 	movi	r3,10
200285d4:	10c00005 	stb	r3,0(r2)
             break;
200285d8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
200285dc:	d0a04917 	ldw	r2,-32476(gp)
200285e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
200285e4:	d0a04917 	ldw	r2,-32476(gp)
200285e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
200285ec:	d0a04917 	ldw	r2,-32476(gp)
200285f0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
200285f4:	d0a04917 	ldw	r2,-32476(gp)
200285f8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
200285fc:	d0a04917 	ldw	r2,-32476(gp)
20028600:	10000915 	stw	zero,36(r2)
20028604:	e0bff617 	ldw	r2,-40(fp)
20028608:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002860c:	e0bffa17 	ldw	r2,-24(fp)
20028610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
20028614:	e0bff517 	ldw	r2,-44(fp)
}
20028618:	e037883a 	mov	sp,fp
2002861c:	dfc00117 	ldw	ra,4(sp)
20028620:	df000017 	ldw	fp,0(sp)
20028624:	dec00204 	addi	sp,sp,8
20028628:	f800283a 	ret

2002862c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
2002862c:	defff604 	addi	sp,sp,-40
20028630:	dfc00915 	stw	ra,36(sp)
20028634:	df000815 	stw	fp,32(sp)
20028638:	df000804 	addi	fp,sp,32
2002863c:	e13ffd15 	stw	r4,-12(fp)
20028640:	2805883a 	mov	r2,r5
20028644:	e1bfff15 	stw	r6,-4(fp)
20028648:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
2002864c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
20028650:	e0bfff17 	ldw	r2,-4(fp)
20028654:	1000021e 	bne	r2,zero,20028660 <OSQPendAbort+0x34>
        return (0);
20028658:	0005883a 	mov	r2,zero
2002865c:	00004906 	br	20028784 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
20028660:	e0bffd17 	ldw	r2,-12(fp)
20028664:	1000051e 	bne	r2,zero,2002867c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20028668:	e0bfff17 	ldw	r2,-4(fp)
2002866c:	00c00104 	movi	r3,4
20028670:	10c00005 	stb	r3,0(r2)
        return (0);
20028674:	0005883a 	mov	r2,zero
20028678:	00004206 	br	20028784 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
2002867c:	e0bffd17 	ldw	r2,-12(fp)
20028680:	10800003 	ldbu	r2,0(r2)
20028684:	10803fcc 	andi	r2,r2,255
20028688:	108000a0 	cmpeqi	r2,r2,2
2002868c:	1000051e 	bne	r2,zero,200286a4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
20028690:	e0bfff17 	ldw	r2,-4(fp)
20028694:	00c00044 	movi	r3,1
20028698:	10c00005 	stb	r3,0(r2)
        return (0);
2002869c:	0005883a 	mov	r2,zero
200286a0:	00003806 	br	20028784 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200286a4:	0005303a 	rdctl	r2,status
200286a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200286ac:	e0fffc17 	ldw	r3,-16(fp)
200286b0:	00bfff84 	movi	r2,-2
200286b4:	1884703a 	and	r2,r3,r2
200286b8:	1001703a 	wrctl	status,r2
  
  return context;
200286bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200286c0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
200286c4:	e0bffd17 	ldw	r2,-12(fp)
200286c8:	10800283 	ldbu	r2,10(r2)
200286cc:	10803fcc 	andi	r2,r2,255
200286d0:	10002526 	beq	r2,zero,20028768 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
200286d4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
200286d8:	e0bffe03 	ldbu	r2,-8(fp)
200286dc:	10800060 	cmpeqi	r2,r2,1
200286e0:	10000e26 	beq	r2,zero,2002871c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
200286e4:	00000806 	br	20028708 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
200286e8:	01c00084 	movi	r7,2
200286ec:	01800104 	movi	r6,4
200286f0:	000b883a 	mov	r5,zero
200286f4:	e13ffd17 	ldw	r4,-12(fp)
200286f8:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                     nbr_tasks++;
200286fc:	e0bff803 	ldbu	r2,-32(fp)
20028700:	10800044 	addi	r2,r2,1
20028704:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
20028708:	e0bffd17 	ldw	r2,-12(fp)
2002870c:	10800283 	ldbu	r2,10(r2)
20028710:	10803fcc 	andi	r2,r2,255
20028714:	103ff41e 	bne	r2,zero,200286e8 <__flash_rwdata_start+0xffffac00>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
20028718:	00000906 	br	20028740 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
2002871c:	01c00084 	movi	r7,2
20028720:	01800104 	movi	r6,4
20028724:	000b883a 	mov	r5,zero
20028728:	e13ffd17 	ldw	r4,-12(fp)
2002872c:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                 nbr_tasks++;
20028730:	e0bff803 	ldbu	r2,-32(fp)
20028734:	10800044 	addi	r2,r2,1
20028738:	e0bff805 	stb	r2,-32(fp)
                 break;
2002873c:	0001883a 	nop
20028740:	e0bff917 	ldw	r2,-28(fp)
20028744:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028748:	e0bffa17 	ldw	r2,-24(fp)
2002874c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
20028750:	00256b00 	call	200256b0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
20028754:	e0bfff17 	ldw	r2,-4(fp)
20028758:	00c00384 	movi	r3,14
2002875c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
20028760:	e0bff803 	ldbu	r2,-32(fp)
20028764:	00000706 	br	20028784 <OSQPendAbort+0x158>
20028768:	e0bff917 	ldw	r2,-28(fp)
2002876c:	e0bffb15 	stw	r2,-20(fp)
20028770:	e0bffb17 	ldw	r2,-20(fp)
20028774:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
20028778:	e0bfff17 	ldw	r2,-4(fp)
2002877c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
20028780:	0005883a 	mov	r2,zero
}
20028784:	e037883a 	mov	sp,fp
20028788:	dfc00117 	ldw	ra,4(sp)
2002878c:	df000017 	ldw	fp,0(sp)
20028790:	dec00204 	addi	sp,sp,8
20028794:	f800283a 	ret

20028798 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
20028798:	defff604 	addi	sp,sp,-40
2002879c:	dfc00915 	stw	ra,36(sp)
200287a0:	df000815 	stw	fp,32(sp)
200287a4:	df000804 	addi	fp,sp,32
200287a8:	e13ffe15 	stw	r4,-8(fp)
200287ac:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
200287b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
200287b4:	e0bffe17 	ldw	r2,-8(fp)
200287b8:	1000021e 	bne	r2,zero,200287c4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
200287bc:	00800104 	movi	r2,4
200287c0:	00004a06 	br	200288ec <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
200287c4:	e0bffe17 	ldw	r2,-8(fp)
200287c8:	10800003 	ldbu	r2,0(r2)
200287cc:	10803fcc 	andi	r2,r2,255
200287d0:	108000a0 	cmpeqi	r2,r2,2
200287d4:	1000021e 	bne	r2,zero,200287e0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
200287d8:	00800044 	movi	r2,1
200287dc:	00004306 	br	200288ec <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200287e0:	0005303a 	rdctl	r2,status
200287e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200287e8:	e0fffd17 	ldw	r3,-12(fp)
200287ec:	00bfff84 	movi	r2,-2
200287f0:	1884703a 	and	r2,r3,r2
200287f4:	1001703a 	wrctl	status,r2
  
  return context;
200287f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
200287fc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
20028800:	e0bffe17 	ldw	r2,-8(fp)
20028804:	10800283 	ldbu	r2,10(r2)
20028808:	10803fcc 	andi	r2,r2,255
2002880c:	10000c26 	beq	r2,zero,20028840 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20028810:	000f883a 	mov	r7,zero
20028814:	01800104 	movi	r6,4
20028818:	e17fff17 	ldw	r5,-4(fp)
2002881c:	e13ffe17 	ldw	r4,-8(fp)
20028820:	0024c640 	call	20024c64 <OS_EventTaskRdy>
20028824:	e0bff817 	ldw	r2,-32(fp)
20028828:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002882c:	e0bff917 	ldw	r2,-28(fp)
20028830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
20028834:	00256b00 	call	200256b0 <OS_Sched>
        return (OS_ERR_NONE);
20028838:	0005883a 	mov	r2,zero
2002883c:	00002b06 	br	200288ec <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
20028840:	e0bffe17 	ldw	r2,-8(fp)
20028844:	10800117 	ldw	r2,4(r2)
20028848:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
2002884c:	e0bffb17 	ldw	r2,-20(fp)
20028850:	10c0058b 	ldhu	r3,22(r2)
20028854:	e0bffb17 	ldw	r2,-20(fp)
20028858:	1080050b 	ldhu	r2,20(r2)
2002885c:	18ffffcc 	andi	r3,r3,65535
20028860:	10bfffcc 	andi	r2,r2,65535
20028864:	18800636 	bltu	r3,r2,20028880 <OSQPost+0xe8>
20028868:	e0bff817 	ldw	r2,-32(fp)
2002886c:	e0bffa15 	stw	r2,-24(fp)
20028870:	e0bffa17 	ldw	r2,-24(fp)
20028874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20028878:	00800784 	movi	r2,30
2002887c:	00001b06 	br	200288ec <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
20028880:	e0bffb17 	ldw	r2,-20(fp)
20028884:	10800317 	ldw	r2,12(r2)
20028888:	11000104 	addi	r4,r2,4
2002888c:	e0fffb17 	ldw	r3,-20(fp)
20028890:	19000315 	stw	r4,12(r3)
20028894:	e0ffff17 	ldw	r3,-4(fp)
20028898:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
2002889c:	e0bffb17 	ldw	r2,-20(fp)
200288a0:	1080058b 	ldhu	r2,22(r2)
200288a4:	10800044 	addi	r2,r2,1
200288a8:	1007883a 	mov	r3,r2
200288ac:	e0bffb17 	ldw	r2,-20(fp)
200288b0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
200288b4:	e0bffb17 	ldw	r2,-20(fp)
200288b8:	10c00317 	ldw	r3,12(r2)
200288bc:	e0bffb17 	ldw	r2,-20(fp)
200288c0:	10800217 	ldw	r2,8(r2)
200288c4:	1880041e 	bne	r3,r2,200288d8 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
200288c8:	e0bffb17 	ldw	r2,-20(fp)
200288cc:	10c00117 	ldw	r3,4(r2)
200288d0:	e0bffb17 	ldw	r2,-20(fp)
200288d4:	10c00315 	stw	r3,12(r2)
200288d8:	e0bff817 	ldw	r2,-32(fp)
200288dc:	e0bffc15 	stw	r2,-16(fp)
200288e0:	e0bffc17 	ldw	r2,-16(fp)
200288e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
200288e8:	0005883a 	mov	r2,zero
}
200288ec:	e037883a 	mov	sp,fp
200288f0:	dfc00117 	ldw	ra,4(sp)
200288f4:	df000017 	ldw	fp,0(sp)
200288f8:	dec00204 	addi	sp,sp,8
200288fc:	f800283a 	ret

20028900 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
20028900:	defff604 	addi	sp,sp,-40
20028904:	dfc00915 	stw	ra,36(sp)
20028908:	df000815 	stw	fp,32(sp)
2002890c:	df000804 	addi	fp,sp,32
20028910:	e13ffe15 	stw	r4,-8(fp)
20028914:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20028918:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
2002891c:	e0bffe17 	ldw	r2,-8(fp)
20028920:	1000021e 	bne	r2,zero,2002892c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
20028924:	00800104 	movi	r2,4
20028928:	00004c06 	br	20028a5c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
2002892c:	e0bffe17 	ldw	r2,-8(fp)
20028930:	10800003 	ldbu	r2,0(r2)
20028934:	10803fcc 	andi	r2,r2,255
20028938:	108000a0 	cmpeqi	r2,r2,2
2002893c:	1000021e 	bne	r2,zero,20028948 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
20028940:	00800044 	movi	r2,1
20028944:	00004506 	br	20028a5c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028948:	0005303a 	rdctl	r2,status
2002894c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028950:	e0fffd17 	ldw	r3,-12(fp)
20028954:	00bfff84 	movi	r2,-2
20028958:	1884703a 	and	r2,r3,r2
2002895c:	1001703a 	wrctl	status,r2
  
  return context;
20028960:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20028964:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
20028968:	e0bffe17 	ldw	r2,-8(fp)
2002896c:	10800283 	ldbu	r2,10(r2)
20028970:	10803fcc 	andi	r2,r2,255
20028974:	10000c26 	beq	r2,zero,200289a8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20028978:	000f883a 	mov	r7,zero
2002897c:	01800104 	movi	r6,4
20028980:	e17fff17 	ldw	r5,-4(fp)
20028984:	e13ffe17 	ldw	r4,-8(fp)
20028988:	0024c640 	call	20024c64 <OS_EventTaskRdy>
2002898c:	e0bff817 	ldw	r2,-32(fp)
20028990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028994:	e0bff917 	ldw	r2,-28(fp)
20028998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
2002899c:	00256b00 	call	200256b0 <OS_Sched>
        return (OS_ERR_NONE);
200289a0:	0005883a 	mov	r2,zero
200289a4:	00002d06 	br	20028a5c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
200289a8:	e0bffe17 	ldw	r2,-8(fp)
200289ac:	10800117 	ldw	r2,4(r2)
200289b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
200289b4:	e0bffb17 	ldw	r2,-20(fp)
200289b8:	10c0058b 	ldhu	r3,22(r2)
200289bc:	e0bffb17 	ldw	r2,-20(fp)
200289c0:	1080050b 	ldhu	r2,20(r2)
200289c4:	18ffffcc 	andi	r3,r3,65535
200289c8:	10bfffcc 	andi	r2,r2,65535
200289cc:	18800636 	bltu	r3,r2,200289e8 <OSQPostFront+0xe8>
200289d0:	e0bff817 	ldw	r2,-32(fp)
200289d4:	e0bffa15 	stw	r2,-24(fp)
200289d8:	e0bffa17 	ldw	r2,-24(fp)
200289dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
200289e0:	00800784 	movi	r2,30
200289e4:	00001d06 	br	20028a5c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
200289e8:	e0bffb17 	ldw	r2,-20(fp)
200289ec:	10c00417 	ldw	r3,16(r2)
200289f0:	e0bffb17 	ldw	r2,-20(fp)
200289f4:	10800117 	ldw	r2,4(r2)
200289f8:	1880041e 	bne	r3,r2,20028a0c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
200289fc:	e0bffb17 	ldw	r2,-20(fp)
20028a00:	10c00217 	ldw	r3,8(r2)
20028a04:	e0bffb17 	ldw	r2,-20(fp)
20028a08:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
20028a0c:	e0bffb17 	ldw	r2,-20(fp)
20028a10:	10800417 	ldw	r2,16(r2)
20028a14:	10ffff04 	addi	r3,r2,-4
20028a18:	e0bffb17 	ldw	r2,-20(fp)
20028a1c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
20028a20:	e0bffb17 	ldw	r2,-20(fp)
20028a24:	10800417 	ldw	r2,16(r2)
20028a28:	e0ffff17 	ldw	r3,-4(fp)
20028a2c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20028a30:	e0bffb17 	ldw	r2,-20(fp)
20028a34:	1080058b 	ldhu	r2,22(r2)
20028a38:	10800044 	addi	r2,r2,1
20028a3c:	1007883a 	mov	r3,r2
20028a40:	e0bffb17 	ldw	r2,-20(fp)
20028a44:	10c0058d 	sth	r3,22(r2)
20028a48:	e0bff817 	ldw	r2,-32(fp)
20028a4c:	e0bffc15 	stw	r2,-16(fp)
20028a50:	e0bffc17 	ldw	r2,-16(fp)
20028a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20028a58:	0005883a 	mov	r2,zero
}
20028a5c:	e037883a 	mov	sp,fp
20028a60:	dfc00117 	ldw	ra,4(sp)
20028a64:	df000017 	ldw	fp,0(sp)
20028a68:	dec00204 	addi	sp,sp,8
20028a6c:	f800283a 	ret

20028a70 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
20028a70:	defff504 	addi	sp,sp,-44
20028a74:	dfc00a15 	stw	ra,40(sp)
20028a78:	df000915 	stw	fp,36(sp)
20028a7c:	df000904 	addi	fp,sp,36
20028a80:	e13ffd15 	stw	r4,-12(fp)
20028a84:	e17ffe15 	stw	r5,-8(fp)
20028a88:	3005883a 	mov	r2,r6
20028a8c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20028a90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20028a94:	e0bffd17 	ldw	r2,-12(fp)
20028a98:	1000021e 	bne	r2,zero,20028aa4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
20028a9c:	00800104 	movi	r2,4
20028aa0:	00007106 	br	20028c68 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
20028aa4:	e0bffd17 	ldw	r2,-12(fp)
20028aa8:	10800003 	ldbu	r2,0(r2)
20028aac:	10803fcc 	andi	r2,r2,255
20028ab0:	108000a0 	cmpeqi	r2,r2,2
20028ab4:	1000021e 	bne	r2,zero,20028ac0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
20028ab8:	00800044 	movi	r2,1
20028abc:	00006a06 	br	20028c68 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028ac0:	0005303a 	rdctl	r2,status
20028ac4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028ac8:	e0fffc17 	ldw	r3,-16(fp)
20028acc:	00bfff84 	movi	r2,-2
20028ad0:	1884703a 	and	r2,r3,r2
20028ad4:	1001703a 	wrctl	status,r2
  
  return context;
20028ad8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20028adc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
20028ae0:	e0bffd17 	ldw	r2,-12(fp)
20028ae4:	10800283 	ldbu	r2,10(r2)
20028ae8:	10803fcc 	andi	r2,r2,255
20028aec:	10001d26 	beq	r2,zero,20028b64 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
20028af0:	e0bfff03 	ldbu	r2,-4(fp)
20028af4:	1080004c 	andi	r2,r2,1
20028af8:	10000b26 	beq	r2,zero,20028b28 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20028afc:	00000506 	br	20028b14 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20028b00:	000f883a 	mov	r7,zero
20028b04:	01800104 	movi	r6,4
20028b08:	e17ffe17 	ldw	r5,-8(fp)
20028b0c:	e13ffd17 	ldw	r4,-12(fp)
20028b10:	0024c640 	call	20024c64 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
20028b14:	e0bffd17 	ldw	r2,-12(fp)
20028b18:	10800283 	ldbu	r2,10(r2)
20028b1c:	10803fcc 	andi	r2,r2,255
20028b20:	103ff71e 	bne	r2,zero,20028b00 <__flash_rwdata_start+0xffffb018>
20028b24:	00000506 	br	20028b3c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
20028b28:	000f883a 	mov	r7,zero
20028b2c:	01800104 	movi	r6,4
20028b30:	e17ffe17 	ldw	r5,-8(fp)
20028b34:	e13ffd17 	ldw	r4,-12(fp)
20028b38:	0024c640 	call	20024c64 <OS_EventTaskRdy>
20028b3c:	e0bff717 	ldw	r2,-36(fp)
20028b40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028b44:	e0bff817 	ldw	r2,-32(fp)
20028b48:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
20028b4c:	e0bfff03 	ldbu	r2,-4(fp)
20028b50:	1080010c 	andi	r2,r2,4
20028b54:	1000011e 	bne	r2,zero,20028b5c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
20028b58:	00256b00 	call	200256b0 <OS_Sched>
        }
        return (OS_ERR_NONE);
20028b5c:	0005883a 	mov	r2,zero
20028b60:	00004106 	br	20028c68 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
20028b64:	e0bffd17 	ldw	r2,-12(fp)
20028b68:	10800117 	ldw	r2,4(r2)
20028b6c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
20028b70:	e0bffa17 	ldw	r2,-24(fp)
20028b74:	10c0058b 	ldhu	r3,22(r2)
20028b78:	e0bffa17 	ldw	r2,-24(fp)
20028b7c:	1080050b 	ldhu	r2,20(r2)
20028b80:	18ffffcc 	andi	r3,r3,65535
20028b84:	10bfffcc 	andi	r2,r2,65535
20028b88:	18800636 	bltu	r3,r2,20028ba4 <OSQPostOpt+0x134>
20028b8c:	e0bff717 	ldw	r2,-36(fp)
20028b90:	e0bff915 	stw	r2,-28(fp)
20028b94:	e0bff917 	ldw	r2,-28(fp)
20028b98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
20028b9c:	00800784 	movi	r2,30
20028ba0:	00003106 	br	20028c68 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
20028ba4:	e0bfff03 	ldbu	r2,-4(fp)
20028ba8:	1080008c 	andi	r2,r2,2
20028bac:	10001326 	beq	r2,zero,20028bfc <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
20028bb0:	e0bffa17 	ldw	r2,-24(fp)
20028bb4:	10c00417 	ldw	r3,16(r2)
20028bb8:	e0bffa17 	ldw	r2,-24(fp)
20028bbc:	10800117 	ldw	r2,4(r2)
20028bc0:	1880041e 	bne	r3,r2,20028bd4 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
20028bc4:	e0bffa17 	ldw	r2,-24(fp)
20028bc8:	10c00217 	ldw	r3,8(r2)
20028bcc:	e0bffa17 	ldw	r2,-24(fp)
20028bd0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
20028bd4:	e0bffa17 	ldw	r2,-24(fp)
20028bd8:	10800417 	ldw	r2,16(r2)
20028bdc:	10ffff04 	addi	r3,r2,-4
20028be0:	e0bffa17 	ldw	r2,-24(fp)
20028be4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
20028be8:	e0bffa17 	ldw	r2,-24(fp)
20028bec:	10800417 	ldw	r2,16(r2)
20028bf0:	e0fffe17 	ldw	r3,-8(fp)
20028bf4:	10c00015 	stw	r3,0(r2)
20028bf8:	00001006 	br	20028c3c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
20028bfc:	e0bffa17 	ldw	r2,-24(fp)
20028c00:	10800317 	ldw	r2,12(r2)
20028c04:	11000104 	addi	r4,r2,4
20028c08:	e0fffa17 	ldw	r3,-24(fp)
20028c0c:	19000315 	stw	r4,12(r3)
20028c10:	e0fffe17 	ldw	r3,-8(fp)
20028c14:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
20028c18:	e0bffa17 	ldw	r2,-24(fp)
20028c1c:	10c00317 	ldw	r3,12(r2)
20028c20:	e0bffa17 	ldw	r2,-24(fp)
20028c24:	10800217 	ldw	r2,8(r2)
20028c28:	1880041e 	bne	r3,r2,20028c3c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
20028c2c:	e0bffa17 	ldw	r2,-24(fp)
20028c30:	10c00117 	ldw	r3,4(r2)
20028c34:	e0bffa17 	ldw	r2,-24(fp)
20028c38:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
20028c3c:	e0bffa17 	ldw	r2,-24(fp)
20028c40:	1080058b 	ldhu	r2,22(r2)
20028c44:	10800044 	addi	r2,r2,1
20028c48:	1007883a 	mov	r3,r2
20028c4c:	e0bffa17 	ldw	r2,-24(fp)
20028c50:	10c0058d 	sth	r3,22(r2)
20028c54:	e0bff717 	ldw	r2,-36(fp)
20028c58:	e0bffb15 	stw	r2,-20(fp)
20028c5c:	e0bffb17 	ldw	r2,-20(fp)
20028c60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20028c64:	0005883a 	mov	r2,zero
}
20028c68:	e037883a 	mov	sp,fp
20028c6c:	dfc00117 	ldw	ra,4(sp)
20028c70:	df000017 	ldw	fp,0(sp)
20028c74:	dec00204 	addi	sp,sp,8
20028c78:	f800283a 	ret

20028c7c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
20028c7c:	defff604 	addi	sp,sp,-40
20028c80:	df000915 	stw	fp,36(sp)
20028c84:	df000904 	addi	fp,sp,36
20028c88:	e13ffe15 	stw	r4,-8(fp)
20028c8c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
20028c90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
20028c94:	e0bffe17 	ldw	r2,-8(fp)
20028c98:	1000021e 	bne	r2,zero,20028ca4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
20028c9c:	00800104 	movi	r2,4
20028ca0:	00004906 	br	20028dc8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
20028ca4:	e0bfff17 	ldw	r2,-4(fp)
20028ca8:	1000021e 	bne	r2,zero,20028cb4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20028cac:	00800244 	movi	r2,9
20028cb0:	00004506 	br	20028dc8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
20028cb4:	e0bffe17 	ldw	r2,-8(fp)
20028cb8:	10800003 	ldbu	r2,0(r2)
20028cbc:	10803fcc 	andi	r2,r2,255
20028cc0:	108000a0 	cmpeqi	r2,r2,2
20028cc4:	1000021e 	bne	r2,zero,20028cd0 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
20028cc8:	00800044 	movi	r2,1
20028ccc:	00003e06 	br	20028dc8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028cd0:	0005303a 	rdctl	r2,status
20028cd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028cd8:	e0fffd17 	ldw	r3,-12(fp)
20028cdc:	00bfff84 	movi	r2,-2
20028ce0:	1884703a 	and	r2,r3,r2
20028ce4:	1001703a 	wrctl	status,r2
  
  return context;
20028ce8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20028cec:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
20028cf0:	e0bffe17 	ldw	r2,-8(fp)
20028cf4:	10c00283 	ldbu	r3,10(r2)
20028cf8:	e0bfff17 	ldw	r2,-4(fp)
20028cfc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
20028d00:	e0bffe17 	ldw	r2,-8(fp)
20028d04:	108002c4 	addi	r2,r2,11
20028d08:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
20028d0c:	e0bfff17 	ldw	r2,-4(fp)
20028d10:	10800204 	addi	r2,r2,8
20028d14:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20028d18:	e03ff705 	stb	zero,-36(fp)
20028d1c:	00000b06 	br	20028d4c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
20028d20:	e0bff917 	ldw	r2,-28(fp)
20028d24:	10c00044 	addi	r3,r2,1
20028d28:	e0fff915 	stw	r3,-28(fp)
20028d2c:	e0fff817 	ldw	r3,-32(fp)
20028d30:	19000044 	addi	r4,r3,1
20028d34:	e13ff815 	stw	r4,-32(fp)
20028d38:	18c00003 	ldbu	r3,0(r3)
20028d3c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20028d40:	e0bff703 	ldbu	r2,-36(fp)
20028d44:	10800044 	addi	r2,r2,1
20028d48:	e0bff705 	stb	r2,-36(fp)
20028d4c:	e0bff703 	ldbu	r2,-36(fp)
20028d50:	108000f0 	cmpltui	r2,r2,3
20028d54:	103ff21e 	bne	r2,zero,20028d20 <__flash_rwdata_start+0xffffb238>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
20028d58:	e0bffe17 	ldw	r2,-8(fp)
20028d5c:	10800117 	ldw	r2,4(r2)
20028d60:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
20028d64:	e0bffc17 	ldw	r2,-16(fp)
20028d68:	1080058b 	ldhu	r2,22(r2)
20028d6c:	10bfffcc 	andi	r2,r2,65535
20028d70:	10000626 	beq	r2,zero,20028d8c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
20028d74:	e0bffc17 	ldw	r2,-16(fp)
20028d78:	10800417 	ldw	r2,16(r2)
20028d7c:	10c00017 	ldw	r3,0(r2)
20028d80:	e0bfff17 	ldw	r2,-4(fp)
20028d84:	10c00015 	stw	r3,0(r2)
20028d88:	00000206 	br	20028d94 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
20028d8c:	e0bfff17 	ldw	r2,-4(fp)
20028d90:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
20028d94:	e0bffc17 	ldw	r2,-16(fp)
20028d98:	10c0058b 	ldhu	r3,22(r2)
20028d9c:	e0bfff17 	ldw	r2,-4(fp)
20028da0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
20028da4:	e0bffc17 	ldw	r2,-16(fp)
20028da8:	10c0050b 	ldhu	r3,20(r2)
20028dac:	e0bfff17 	ldw	r2,-4(fp)
20028db0:	10c0018d 	sth	r3,6(r2)
20028db4:	e0bffa17 	ldw	r2,-24(fp)
20028db8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028dbc:	e0bffb17 	ldw	r2,-20(fp)
20028dc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
20028dc4:	0005883a 	mov	r2,zero
}
20028dc8:	e037883a 	mov	sp,fp
20028dcc:	df000017 	ldw	fp,0(sp)
20028dd0:	dec00104 	addi	sp,sp,4
20028dd4:	f800283a 	ret

20028dd8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
20028dd8:	defffb04 	addi	sp,sp,-20
20028ddc:	dfc00415 	stw	ra,16(sp)
20028de0:	df000315 	stw	fp,12(sp)
20028de4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
20028de8:	01407804 	movi	r5,480
20028dec:	01000034 	movhi	r4,0
20028df0:	211d3704 	addi	r4,r4,29916
20028df4:	00255f40 	call	200255f4 <OS_MemClr>
    pq1 = &OSQTbl[0];
20028df8:	00800034 	movhi	r2,0
20028dfc:	109d3704 	addi	r2,r2,29916
20028e00:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
20028e04:	00800034 	movhi	r2,0
20028e08:	109d3d04 	addi	r2,r2,29940
20028e0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20028e10:	e03ffd0d 	sth	zero,-12(fp)
20028e14:	00000c06 	br	20028e48 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
20028e18:	e0bffe17 	ldw	r2,-8(fp)
20028e1c:	e0ffff17 	ldw	r3,-4(fp)
20028e20:	10c00015 	stw	r3,0(r2)
        pq1++;
20028e24:	e0bffe17 	ldw	r2,-8(fp)
20028e28:	10800604 	addi	r2,r2,24
20028e2c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
20028e30:	e0bfff17 	ldw	r2,-4(fp)
20028e34:	10800604 	addi	r2,r2,24
20028e38:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
20028e3c:	e0bffd0b 	ldhu	r2,-12(fp)
20028e40:	10800044 	addi	r2,r2,1
20028e44:	e0bffd0d 	sth	r2,-12(fp)
20028e48:	e0bffd0b 	ldhu	r2,-12(fp)
20028e4c:	108004f0 	cmpltui	r2,r2,19
20028e50:	103ff11e 	bne	r2,zero,20028e18 <__flash_rwdata_start+0xffffb330>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
20028e54:	e0bffe17 	ldw	r2,-8(fp)
20028e58:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
20028e5c:	00800034 	movhi	r2,0
20028e60:	109d3704 	addi	r2,r2,29916
20028e64:	d0a04515 	stw	r2,-32492(gp)
#endif
}
20028e68:	0001883a 	nop
20028e6c:	e037883a 	mov	sp,fp
20028e70:	dfc00117 	ldw	ra,4(sp)
20028e74:	df000017 	ldw	fp,0(sp)
20028e78:	dec00204 	addi	sp,sp,8
20028e7c:	f800283a 	ret

20028e80 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
20028e80:	defffa04 	addi	sp,sp,-24
20028e84:	df000515 	stw	fp,20(sp)
20028e88:	df000504 	addi	fp,sp,20
20028e8c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20028e90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20028e94:	e0bfff17 	ldw	r2,-4(fp)
20028e98:	1000021e 	bne	r2,zero,20028ea4 <OSSemAccept+0x24>
        return (0);
20028e9c:	0005883a 	mov	r2,zero
20028ea0:	00001f06 	br	20028f20 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20028ea4:	e0bfff17 	ldw	r2,-4(fp)
20028ea8:	10800003 	ldbu	r2,0(r2)
20028eac:	10803fcc 	andi	r2,r2,255
20028eb0:	108000e0 	cmpeqi	r2,r2,3
20028eb4:	1000021e 	bne	r2,zero,20028ec0 <OSSemAccept+0x40>
        return (0);
20028eb8:	0005883a 	mov	r2,zero
20028ebc:	00001806 	br	20028f20 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028ec0:	0005303a 	rdctl	r2,status
20028ec4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028ec8:	e0fffe17 	ldw	r3,-8(fp)
20028ecc:	00bfff84 	movi	r2,-2
20028ed0:	1884703a 	and	r2,r3,r2
20028ed4:	1001703a 	wrctl	status,r2
  
  return context;
20028ed8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20028edc:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
20028ee0:	e0bfff17 	ldw	r2,-4(fp)
20028ee4:	1080020b 	ldhu	r2,8(r2)
20028ee8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
20028eec:	e0bffd0b 	ldhu	r2,-12(fp)
20028ef0:	10000626 	beq	r2,zero,20028f0c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
20028ef4:	e0bfff17 	ldw	r2,-4(fp)
20028ef8:	1080020b 	ldhu	r2,8(r2)
20028efc:	10bfffc4 	addi	r2,r2,-1
20028f00:	1007883a 	mov	r3,r2
20028f04:	e0bfff17 	ldw	r2,-4(fp)
20028f08:	10c0020d 	sth	r3,8(r2)
20028f0c:	e0bffb17 	ldw	r2,-20(fp)
20028f10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028f14:	e0bffc17 	ldw	r2,-16(fp)
20028f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
20028f1c:	e0bffd0b 	ldhu	r2,-12(fp)
}
20028f20:	e037883a 	mov	sp,fp
20028f24:	df000017 	ldw	fp,0(sp)
20028f28:	dec00104 	addi	sp,sp,4
20028f2c:	f800283a 	ret

20028f30 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
20028f30:	defff904 	addi	sp,sp,-28
20028f34:	dfc00615 	stw	ra,24(sp)
20028f38:	df000515 	stw	fp,20(sp)
20028f3c:	df000504 	addi	fp,sp,20
20028f40:	2005883a 	mov	r2,r4
20028f44:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20028f48:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20028f4c:	d0a04803 	ldbu	r2,-32480(gp)
20028f50:	10803fcc 	andi	r2,r2,255
20028f54:	10000226 	beq	r2,zero,20028f60 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
20028f58:	0005883a 	mov	r2,zero
20028f5c:	00002506 	br	20028ff4 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20028f60:	0005303a 	rdctl	r2,status
20028f64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20028f68:	e0fffe17 	ldw	r3,-8(fp)
20028f6c:	00bfff84 	movi	r2,-2
20028f70:	1884703a 	and	r2,r3,r2
20028f74:	1001703a 	wrctl	status,r2
  
  return context;
20028f78:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20028f7c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
20028f80:	d0a04717 	ldw	r2,-32484(gp)
20028f84:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
20028f88:	d0a04717 	ldw	r2,-32484(gp)
20028f8c:	10000326 	beq	r2,zero,20028f9c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
20028f90:	d0a04717 	ldw	r2,-32484(gp)
20028f94:	10800117 	ldw	r2,4(r2)
20028f98:	d0a04715 	stw	r2,-32484(gp)
20028f9c:	e0bffb17 	ldw	r2,-20(fp)
20028fa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20028fa4:	e0bffc17 	ldw	r2,-16(fp)
20028fa8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
20028fac:	e0bffd17 	ldw	r2,-12(fp)
20028fb0:	10000f26 	beq	r2,zero,20028ff0 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
20028fb4:	e0bffd17 	ldw	r2,-12(fp)
20028fb8:	00c000c4 	movi	r3,3
20028fbc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
20028fc0:	e0bffd17 	ldw	r2,-12(fp)
20028fc4:	e0ffff0b 	ldhu	r3,-4(fp)
20028fc8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
20028fcc:	e0bffd17 	ldw	r2,-12(fp)
20028fd0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
20028fd4:	e0bffd17 	ldw	r2,-12(fp)
20028fd8:	00c00fc4 	movi	r3,63
20028fdc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
20028fe0:	e0bffd17 	ldw	r2,-12(fp)
20028fe4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
20028fe8:	e13ffd17 	ldw	r4,-12(fp)
20028fec:	00252140 	call	20025214 <OS_EventWaitListInit>
    }
    return (pevent);
20028ff0:	e0bffd17 	ldw	r2,-12(fp)
}
20028ff4:	e037883a 	mov	sp,fp
20028ff8:	dfc00117 	ldw	ra,4(sp)
20028ffc:	df000017 	ldw	fp,0(sp)
20029000:	dec00204 	addi	sp,sp,8
20029004:	f800283a 	ret

20029008 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20029008:	defff304 	addi	sp,sp,-52
2002900c:	dfc00c15 	stw	ra,48(sp)
20029010:	df000b15 	stw	fp,44(sp)
20029014:	df000b04 	addi	fp,sp,44
20029018:	e13ffd15 	stw	r4,-12(fp)
2002901c:	2805883a 	mov	r2,r5
20029020:	e1bfff15 	stw	r6,-4(fp)
20029024:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
20029028:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
2002902c:	e0bfff17 	ldw	r2,-4(fp)
20029030:	1000021e 	bne	r2,zero,2002903c <OSSemDel+0x34>
        return (pevent);
20029034:	e0bffd17 	ldw	r2,-12(fp)
20029038:	00007e06 	br	20029234 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
2002903c:	e0bffd17 	ldw	r2,-12(fp)
20029040:	1000051e 	bne	r2,zero,20029058 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20029044:	e0bfff17 	ldw	r2,-4(fp)
20029048:	00c00104 	movi	r3,4
2002904c:	10c00005 	stb	r3,0(r2)
        return (pevent);
20029050:	e0bffd17 	ldw	r2,-12(fp)
20029054:	00007706 	br	20029234 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20029058:	e0bffd17 	ldw	r2,-12(fp)
2002905c:	10800003 	ldbu	r2,0(r2)
20029060:	10803fcc 	andi	r2,r2,255
20029064:	108000e0 	cmpeqi	r2,r2,3
20029068:	1000051e 	bne	r2,zero,20029080 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
2002906c:	e0bfff17 	ldw	r2,-4(fp)
20029070:	00c00044 	movi	r3,1
20029074:	10c00005 	stb	r3,0(r2)
        return (pevent);
20029078:	e0bffd17 	ldw	r2,-12(fp)
2002907c:	00006d06 	br	20029234 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
20029080:	d0a04803 	ldbu	r2,-32480(gp)
20029084:	10803fcc 	andi	r2,r2,255
20029088:	10000526 	beq	r2,zero,200290a0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
2002908c:	e0bfff17 	ldw	r2,-4(fp)
20029090:	00c003c4 	movi	r3,15
20029094:	10c00005 	stb	r3,0(r2)
        return (pevent);
20029098:	e0bffd17 	ldw	r2,-12(fp)
2002909c:	00006506 	br	20029234 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200290a0:	0005303a 	rdctl	r2,status
200290a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200290a8:	e0fffc17 	ldw	r3,-16(fp)
200290ac:	00bfff84 	movi	r2,-2
200290b0:	1884703a 	and	r2,r3,r2
200290b4:	1001703a 	wrctl	status,r2
  
  return context;
200290b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200290bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
200290c0:	e0bffd17 	ldw	r2,-12(fp)
200290c4:	10800283 	ldbu	r2,10(r2)
200290c8:	10803fcc 	andi	r2,r2,255
200290cc:	10000326 	beq	r2,zero,200290dc <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
200290d0:	00800044 	movi	r2,1
200290d4:	e0bff505 	stb	r2,-44(fp)
200290d8:	00000106 	br	200290e0 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
200290dc:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
200290e0:	e0bffe03 	ldbu	r2,-8(fp)
200290e4:	10000326 	beq	r2,zero,200290f4 <OSSemDel+0xec>
200290e8:	10800060 	cmpeqi	r2,r2,1
200290ec:	1000281e 	bne	r2,zero,20029190 <OSSemDel+0x188>
200290f0:	00004506 	br	20029208 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
200290f4:	e0bff503 	ldbu	r2,-44(fp)
200290f8:	1000161e 	bne	r2,zero,20029154 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
200290fc:	e0bffd17 	ldw	r2,-12(fp)
20029100:	00c00fc4 	movi	r3,63
20029104:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
20029108:	e0bffd17 	ldw	r2,-12(fp)
2002910c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
20029110:	e0bffd17 	ldw	r2,-12(fp)
20029114:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
20029118:	d0e04717 	ldw	r3,-32484(gp)
2002911c:	e0bffd17 	ldw	r2,-12(fp)
20029120:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
20029124:	e0bffd17 	ldw	r2,-12(fp)
20029128:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
2002912c:	e0bffd17 	ldw	r2,-12(fp)
20029130:	d0a04715 	stw	r2,-32484(gp)
20029134:	e0bff717 	ldw	r2,-36(fp)
20029138:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002913c:	e0bff817 	ldw	r2,-32(fp)
20029140:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
20029144:	e0bfff17 	ldw	r2,-4(fp)
20029148:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
2002914c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
20029150:	00003706 	br	20029230 <OSSemDel+0x228>
20029154:	e0bff717 	ldw	r2,-36(fp)
20029158:	e0bff915 	stw	r2,-28(fp)
2002915c:	e0bff917 	ldw	r2,-28(fp)
20029160:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
20029164:	e0bfff17 	ldw	r2,-4(fp)
20029168:	00c01244 	movi	r3,73
2002916c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
20029170:	e0bffd17 	ldw	r2,-12(fp)
20029174:	e0bff615 	stw	r2,-40(fp)
             }
             break;
20029178:	00002d06 	br	20029230 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
2002917c:	000f883a 	mov	r7,zero
20029180:	01800044 	movi	r6,1
20029184:	000b883a 	mov	r5,zero
20029188:	e13ffd17 	ldw	r4,-12(fp)
2002918c:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
20029190:	e0bffd17 	ldw	r2,-12(fp)
20029194:	10800283 	ldbu	r2,10(r2)
20029198:	10803fcc 	andi	r2,r2,255
2002919c:	103ff71e 	bne	r2,zero,2002917c <__flash_rwdata_start+0xffffb694>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
200291a0:	e0bffd17 	ldw	r2,-12(fp)
200291a4:	00c00fc4 	movi	r3,63
200291a8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
200291ac:	e0bffd17 	ldw	r2,-12(fp)
200291b0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
200291b4:	e0bffd17 	ldw	r2,-12(fp)
200291b8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
200291bc:	d0e04717 	ldw	r3,-32484(gp)
200291c0:	e0bffd17 	ldw	r2,-12(fp)
200291c4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
200291c8:	e0bffd17 	ldw	r2,-12(fp)
200291cc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
200291d0:	e0bffd17 	ldw	r2,-12(fp)
200291d4:	d0a04715 	stw	r2,-32484(gp)
200291d8:	e0bff717 	ldw	r2,-36(fp)
200291dc:	e0bffa15 	stw	r2,-24(fp)
200291e0:	e0bffa17 	ldw	r2,-24(fp)
200291e4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
200291e8:	e0bff503 	ldbu	r2,-44(fp)
200291ec:	10800058 	cmpnei	r2,r2,1
200291f0:	1000011e 	bne	r2,zero,200291f8 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
200291f4:	00256b00 	call	200256b0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
200291f8:	e0bfff17 	ldw	r2,-4(fp)
200291fc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
20029200:	e03ff615 	stw	zero,-40(fp)
             break;
20029204:	00000a06 	br	20029230 <OSSemDel+0x228>
20029208:	e0bff717 	ldw	r2,-36(fp)
2002920c:	e0bffb15 	stw	r2,-20(fp)
20029210:	e0bffb17 	ldw	r2,-20(fp)
20029214:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
20029218:	e0bfff17 	ldw	r2,-4(fp)
2002921c:	00c001c4 	movi	r3,7
20029220:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
20029224:	e0bffd17 	ldw	r2,-12(fp)
20029228:	e0bff615 	stw	r2,-40(fp)
             break;
2002922c:	0001883a 	nop
    }
    return (pevent_return);
20029230:	e0bff617 	ldw	r2,-40(fp)
}
20029234:	e037883a 	mov	sp,fp
20029238:	dfc00117 	ldw	ra,4(sp)
2002923c:	df000017 	ldw	fp,0(sp)
20029240:	dec00204 	addi	sp,sp,8
20029244:	f800283a 	ret

20029248 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
20029248:	defff504 	addi	sp,sp,-44
2002924c:	dfc00a15 	stw	ra,40(sp)
20029250:	df000915 	stw	fp,36(sp)
20029254:	df000904 	addi	fp,sp,36
20029258:	e13ffd15 	stw	r4,-12(fp)
2002925c:	2805883a 	mov	r2,r5
20029260:	e1bfff15 	stw	r6,-4(fp)
20029264:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20029268:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
2002926c:	e0bfff17 	ldw	r2,-4(fp)
20029270:	10007226 	beq	r2,zero,2002943c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20029274:	e0bffd17 	ldw	r2,-12(fp)
20029278:	1000041e 	bne	r2,zero,2002928c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
2002927c:	e0bfff17 	ldw	r2,-4(fp)
20029280:	00c00104 	movi	r3,4
20029284:	10c00005 	stb	r3,0(r2)
        return;
20029288:	00006d06 	br	20029440 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
2002928c:	e0bffd17 	ldw	r2,-12(fp)
20029290:	10800003 	ldbu	r2,0(r2)
20029294:	10803fcc 	andi	r2,r2,255
20029298:	108000e0 	cmpeqi	r2,r2,3
2002929c:	1000041e 	bne	r2,zero,200292b0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
200292a0:	e0bfff17 	ldw	r2,-4(fp)
200292a4:	00c00044 	movi	r3,1
200292a8:	10c00005 	stb	r3,0(r2)
        return;
200292ac:	00006406 	br	20029440 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
200292b0:	d0a04803 	ldbu	r2,-32480(gp)
200292b4:	10803fcc 	andi	r2,r2,255
200292b8:	10000426 	beq	r2,zero,200292cc <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
200292bc:	e0bfff17 	ldw	r2,-4(fp)
200292c0:	00c00084 	movi	r3,2
200292c4:	10c00005 	stb	r3,0(r2)
        return;
200292c8:	00005d06 	br	20029440 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
200292cc:	d0a03a03 	ldbu	r2,-32536(gp)
200292d0:	10803fcc 	andi	r2,r2,255
200292d4:	10000426 	beq	r2,zero,200292e8 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
200292d8:	e0bfff17 	ldw	r2,-4(fp)
200292dc:	00c00344 	movi	r3,13
200292e0:	10c00005 	stb	r3,0(r2)
        return;
200292e4:	00005606 	br	20029440 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200292e8:	0005303a 	rdctl	r2,status
200292ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200292f0:	e0fffc17 	ldw	r3,-16(fp)
200292f4:	00bfff84 	movi	r2,-2
200292f8:	1884703a 	and	r2,r3,r2
200292fc:	1001703a 	wrctl	status,r2
  
  return context;
20029300:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20029304:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
20029308:	e0bffd17 	ldw	r2,-12(fp)
2002930c:	1080020b 	ldhu	r2,8(r2)
20029310:	10bfffcc 	andi	r2,r2,65535
20029314:	10000d26 	beq	r2,zero,2002934c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
20029318:	e0bffd17 	ldw	r2,-12(fp)
2002931c:	1080020b 	ldhu	r2,8(r2)
20029320:	10bfffc4 	addi	r2,r2,-1
20029324:	1007883a 	mov	r3,r2
20029328:	e0bffd17 	ldw	r2,-12(fp)
2002932c:	10c0020d 	sth	r3,8(r2)
20029330:	e0bff717 	ldw	r2,-36(fp)
20029334:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029338:	e0bff817 	ldw	r2,-32(fp)
2002933c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
20029340:	e0bfff17 	ldw	r2,-4(fp)
20029344:	10000005 	stb	zero,0(r2)
        return;
20029348:	00003d06 	br	20029440 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
2002934c:	d0a04917 	ldw	r2,-32476(gp)
20029350:	d0e04917 	ldw	r3,-32476(gp)
20029354:	18c00c03 	ldbu	r3,48(r3)
20029358:	18c00054 	ori	r3,r3,1
2002935c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
20029360:	d0a04917 	ldw	r2,-32476(gp)
20029364:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
20029368:	d0a04917 	ldw	r2,-32476(gp)
2002936c:	e0fffe0b 	ldhu	r3,-8(fp)
20029370:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
20029374:	e13ffd17 	ldw	r4,-12(fp)
20029378:	0024dfc0 	call	20024dfc <OS_EventTaskWait>
2002937c:	e0bff717 	ldw	r2,-36(fp)
20029380:	e0bffb15 	stw	r2,-20(fp)
20029384:	e0bffb17 	ldw	r2,-20(fp)
20029388:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
2002938c:	00256b00 	call	200256b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029390:	0005303a 	rdctl	r2,status
20029394:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20029398:	e0fff917 	ldw	r3,-28(fp)
2002939c:	00bfff84 	movi	r2,-2
200293a0:	1884703a 	and	r2,r3,r2
200293a4:	1001703a 	wrctl	status,r2
  
  return context;
200293a8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
200293ac:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
200293b0:	d0a04917 	ldw	r2,-32476(gp)
200293b4:	10800c43 	ldbu	r2,49(r2)
200293b8:	10803fcc 	andi	r2,r2,255
200293bc:	10000326 	beq	r2,zero,200293cc <OSSemPend+0x184>
200293c0:	108000a0 	cmpeqi	r2,r2,2
200293c4:	1000041e 	bne	r2,zero,200293d8 <OSSemPend+0x190>
200293c8:	00000706 	br	200293e8 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
200293cc:	e0bfff17 	ldw	r2,-4(fp)
200293d0:	10000005 	stb	zero,0(r2)
             break;
200293d4:	00000c06 	br	20029408 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
200293d8:	e0bfff17 	ldw	r2,-4(fp)
200293dc:	00c00384 	movi	r3,14
200293e0:	10c00005 	stb	r3,0(r2)
             break;
200293e4:	00000806 	br	20029408 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
200293e8:	d0a04917 	ldw	r2,-32476(gp)
200293ec:	e17ffd17 	ldw	r5,-12(fp)
200293f0:	1009883a 	mov	r4,r2
200293f4:	002505c0 	call	2002505c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
200293f8:	e0bfff17 	ldw	r2,-4(fp)
200293fc:	00c00284 	movi	r3,10
20029400:	10c00005 	stb	r3,0(r2)
             break;
20029404:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
20029408:	d0a04917 	ldw	r2,-32476(gp)
2002940c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
20029410:	d0a04917 	ldw	r2,-32476(gp)
20029414:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
20029418:	d0a04917 	ldw	r2,-32476(gp)
2002941c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
20029420:	d0a04917 	ldw	r2,-32476(gp)
20029424:	10000815 	stw	zero,32(r2)
20029428:	e0bff717 	ldw	r2,-36(fp)
2002942c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029430:	e0bffa17 	ldw	r2,-24(fp)
20029434:	1001703a 	wrctl	status,r2
20029438:	00000106 	br	20029440 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
2002943c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
20029440:	e037883a 	mov	sp,fp
20029444:	dfc00117 	ldw	ra,4(sp)
20029448:	df000017 	ldw	fp,0(sp)
2002944c:	dec00204 	addi	sp,sp,8
20029450:	f800283a 	ret

20029454 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
20029454:	defff604 	addi	sp,sp,-40
20029458:	dfc00915 	stw	ra,36(sp)
2002945c:	df000815 	stw	fp,32(sp)
20029460:	df000804 	addi	fp,sp,32
20029464:	e13ffd15 	stw	r4,-12(fp)
20029468:	2805883a 	mov	r2,r5
2002946c:	e1bfff15 	stw	r6,-4(fp)
20029470:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
20029474:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20029478:	e0bfff17 	ldw	r2,-4(fp)
2002947c:	1000021e 	bne	r2,zero,20029488 <OSSemPendAbort+0x34>
        return (0);
20029480:	0005883a 	mov	r2,zero
20029484:	00004906 	br	200295ac <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20029488:	e0bffd17 	ldw	r2,-12(fp)
2002948c:	1000051e 	bne	r2,zero,200294a4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
20029490:	e0bfff17 	ldw	r2,-4(fp)
20029494:	00c00104 	movi	r3,4
20029498:	10c00005 	stb	r3,0(r2)
        return (0);
2002949c:	0005883a 	mov	r2,zero
200294a0:	00004206 	br	200295ac <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
200294a4:	e0bffd17 	ldw	r2,-12(fp)
200294a8:	10800003 	ldbu	r2,0(r2)
200294ac:	10803fcc 	andi	r2,r2,255
200294b0:	108000e0 	cmpeqi	r2,r2,3
200294b4:	1000051e 	bne	r2,zero,200294cc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
200294b8:	e0bfff17 	ldw	r2,-4(fp)
200294bc:	00c00044 	movi	r3,1
200294c0:	10c00005 	stb	r3,0(r2)
        return (0);
200294c4:	0005883a 	mov	r2,zero
200294c8:	00003806 	br	200295ac <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200294cc:	0005303a 	rdctl	r2,status
200294d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200294d4:	e0fffc17 	ldw	r3,-16(fp)
200294d8:	00bfff84 	movi	r2,-2
200294dc:	1884703a 	and	r2,r3,r2
200294e0:	1001703a 	wrctl	status,r2
  
  return context;
200294e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
200294e8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
200294ec:	e0bffd17 	ldw	r2,-12(fp)
200294f0:	10800283 	ldbu	r2,10(r2)
200294f4:	10803fcc 	andi	r2,r2,255
200294f8:	10002526 	beq	r2,zero,20029590 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
200294fc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
20029500:	e0bffe03 	ldbu	r2,-8(fp)
20029504:	10800060 	cmpeqi	r2,r2,1
20029508:	10000e26 	beq	r2,zero,20029544 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
2002950c:	00000806 	br	20029530 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
20029510:	01c00084 	movi	r7,2
20029514:	01800044 	movi	r6,1
20029518:	000b883a 	mov	r5,zero
2002951c:	e13ffd17 	ldw	r4,-12(fp)
20029520:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                     nbr_tasks++;
20029524:	e0bff803 	ldbu	r2,-32(fp)
20029528:	10800044 	addi	r2,r2,1
2002952c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
20029530:	e0bffd17 	ldw	r2,-12(fp)
20029534:	10800283 	ldbu	r2,10(r2)
20029538:	10803fcc 	andi	r2,r2,255
2002953c:	103ff41e 	bne	r2,zero,20029510 <__flash_rwdata_start+0xffffba28>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
20029540:	00000906 	br	20029568 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
20029544:	01c00084 	movi	r7,2
20029548:	01800044 	movi	r6,1
2002954c:	000b883a 	mov	r5,zero
20029550:	e13ffd17 	ldw	r4,-12(fp)
20029554:	0024c640 	call	20024c64 <OS_EventTaskRdy>
                 nbr_tasks++;
20029558:	e0bff803 	ldbu	r2,-32(fp)
2002955c:	10800044 	addi	r2,r2,1
20029560:	e0bff805 	stb	r2,-32(fp)
                 break;
20029564:	0001883a 	nop
20029568:	e0bff917 	ldw	r2,-28(fp)
2002956c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029570:	e0bffa17 	ldw	r2,-24(fp)
20029574:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
20029578:	00256b00 	call	200256b0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
2002957c:	e0bfff17 	ldw	r2,-4(fp)
20029580:	00c00384 	movi	r3,14
20029584:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
20029588:	e0bff803 	ldbu	r2,-32(fp)
2002958c:	00000706 	br	200295ac <OSSemPendAbort+0x158>
20029590:	e0bff917 	ldw	r2,-28(fp)
20029594:	e0bffb15 	stw	r2,-20(fp)
20029598:	e0bffb17 	ldw	r2,-20(fp)
2002959c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
200295a0:	e0bfff17 	ldw	r2,-4(fp)
200295a4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
200295a8:	0005883a 	mov	r2,zero
}
200295ac:	e037883a 	mov	sp,fp
200295b0:	dfc00117 	ldw	ra,4(sp)
200295b4:	df000017 	ldw	fp,0(sp)
200295b8:	dec00204 	addi	sp,sp,8
200295bc:	f800283a 	ret

200295c0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
200295c0:	defff804 	addi	sp,sp,-32
200295c4:	dfc00715 	stw	ra,28(sp)
200295c8:	df000615 	stw	fp,24(sp)
200295cc:	df000604 	addi	fp,sp,24
200295d0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200295d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
200295d8:	e0bfff17 	ldw	r2,-4(fp)
200295dc:	1000021e 	bne	r2,zero,200295e8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
200295e0:	00800104 	movi	r2,4
200295e4:	00003506 	br	200296bc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
200295e8:	e0bfff17 	ldw	r2,-4(fp)
200295ec:	10800003 	ldbu	r2,0(r2)
200295f0:	10803fcc 	andi	r2,r2,255
200295f4:	108000e0 	cmpeqi	r2,r2,3
200295f8:	1000021e 	bne	r2,zero,20029604 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
200295fc:	00800044 	movi	r2,1
20029600:	00002e06 	br	200296bc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029604:	0005303a 	rdctl	r2,status
20029608:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002960c:	e0fffe17 	ldw	r3,-8(fp)
20029610:	00bfff84 	movi	r2,-2
20029614:	1884703a 	and	r2,r3,r2
20029618:	1001703a 	wrctl	status,r2
  
  return context;
2002961c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
20029620:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
20029624:	e0bfff17 	ldw	r2,-4(fp)
20029628:	10800283 	ldbu	r2,10(r2)
2002962c:	10803fcc 	andi	r2,r2,255
20029630:	10000c26 	beq	r2,zero,20029664 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
20029634:	000f883a 	mov	r7,zero
20029638:	01800044 	movi	r6,1
2002963c:	000b883a 	mov	r5,zero
20029640:	e13fff17 	ldw	r4,-4(fp)
20029644:	0024c640 	call	20024c64 <OS_EventTaskRdy>
20029648:	e0bffa17 	ldw	r2,-24(fp)
2002964c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029650:	e0bffb17 	ldw	r2,-20(fp)
20029654:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
20029658:	00256b00 	call	200256b0 <OS_Sched>
        return (OS_ERR_NONE);
2002965c:	0005883a 	mov	r2,zero
20029660:	00001606 	br	200296bc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
20029664:	e0bfff17 	ldw	r2,-4(fp)
20029668:	1080020b 	ldhu	r2,8(r2)
2002966c:	10ffffcc 	andi	r3,r2,65535
20029670:	00bfffd4 	movui	r2,65535
20029674:	18800c26 	beq	r3,r2,200296a8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
20029678:	e0bfff17 	ldw	r2,-4(fp)
2002967c:	1080020b 	ldhu	r2,8(r2)
20029680:	10800044 	addi	r2,r2,1
20029684:	1007883a 	mov	r3,r2
20029688:	e0bfff17 	ldw	r2,-4(fp)
2002968c:	10c0020d 	sth	r3,8(r2)
20029690:	e0bffa17 	ldw	r2,-24(fp)
20029694:	e0bffc15 	stw	r2,-16(fp)
20029698:	e0bffc17 	ldw	r2,-16(fp)
2002969c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
200296a0:	0005883a 	mov	r2,zero
200296a4:	00000506 	br	200296bc <OSSemPost+0xfc>
200296a8:	e0bffa17 	ldw	r2,-24(fp)
200296ac:	e0bffd15 	stw	r2,-12(fp)
200296b0:	e0bffd17 	ldw	r2,-12(fp)
200296b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
200296b8:	00800c84 	movi	r2,50
}
200296bc:	e037883a 	mov	sp,fp
200296c0:	dfc00117 	ldw	ra,4(sp)
200296c4:	df000017 	ldw	fp,0(sp)
200296c8:	dec00204 	addi	sp,sp,8
200296cc:	f800283a 	ret

200296d0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
200296d0:	defff704 	addi	sp,sp,-36
200296d4:	df000815 	stw	fp,32(sp)
200296d8:	df000804 	addi	fp,sp,32
200296dc:	e13ffe15 	stw	r4,-8(fp)
200296e0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
200296e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
200296e8:	e0bffe17 	ldw	r2,-8(fp)
200296ec:	1000021e 	bne	r2,zero,200296f8 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
200296f0:	00800104 	movi	r2,4
200296f4:	00003606 	br	200297d0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
200296f8:	e0bfff17 	ldw	r2,-4(fp)
200296fc:	1000021e 	bne	r2,zero,20029708 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
20029700:	00800244 	movi	r2,9
20029704:	00003206 	br	200297d0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
20029708:	e0bffe17 	ldw	r2,-8(fp)
2002970c:	10800003 	ldbu	r2,0(r2)
20029710:	10803fcc 	andi	r2,r2,255
20029714:	108000e0 	cmpeqi	r2,r2,3
20029718:	1000021e 	bne	r2,zero,20029724 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
2002971c:	00800044 	movi	r2,1
20029720:	00002b06 	br	200297d0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029724:	0005303a 	rdctl	r2,status
20029728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002972c:	e0fffd17 	ldw	r3,-12(fp)
20029730:	00bfff84 	movi	r2,-2
20029734:	1884703a 	and	r2,r3,r2
20029738:	1001703a 	wrctl	status,r2
  
  return context;
2002973c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
20029740:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
20029744:	e0bffe17 	ldw	r2,-8(fp)
20029748:	10c00283 	ldbu	r3,10(r2)
2002974c:	e0bfff17 	ldw	r2,-4(fp)
20029750:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
20029754:	e0bffe17 	ldw	r2,-8(fp)
20029758:	108002c4 	addi	r2,r2,11
2002975c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
20029760:	e0bfff17 	ldw	r2,-4(fp)
20029764:	10800084 	addi	r2,r2,2
20029768:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
2002976c:	e03ffa05 	stb	zero,-24(fp)
20029770:	00000b06 	br	200297a0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
20029774:	e0bff917 	ldw	r2,-28(fp)
20029778:	10c00044 	addi	r3,r2,1
2002977c:	e0fff915 	stw	r3,-28(fp)
20029780:	e0fff817 	ldw	r3,-32(fp)
20029784:	19000044 	addi	r4,r3,1
20029788:	e13ff815 	stw	r4,-32(fp)
2002978c:	18c00003 	ldbu	r3,0(r3)
20029790:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
20029794:	e0bffa03 	ldbu	r2,-24(fp)
20029798:	10800044 	addi	r2,r2,1
2002979c:	e0bffa05 	stb	r2,-24(fp)
200297a0:	e0bffa03 	ldbu	r2,-24(fp)
200297a4:	108000f0 	cmpltui	r2,r2,3
200297a8:	103ff21e 	bne	r2,zero,20029774 <__flash_rwdata_start+0xffffbc8c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
200297ac:	e0bffe17 	ldw	r2,-8(fp)
200297b0:	10c0020b 	ldhu	r3,8(r2)
200297b4:	e0bfff17 	ldw	r2,-4(fp)
200297b8:	10c0000d 	sth	r3,0(r2)
200297bc:	e0bffb17 	ldw	r2,-20(fp)
200297c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200297c4:	e0bffc17 	ldw	r2,-16(fp)
200297c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
200297cc:	0005883a 	mov	r2,zero
}
200297d0:	e037883a 	mov	sp,fp
200297d4:	df000017 	ldw	fp,0(sp)
200297d8:	dec00104 	addi	sp,sp,4
200297dc:	f800283a 	ret

200297e0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
200297e0:	defff904 	addi	sp,sp,-28
200297e4:	df000615 	stw	fp,24(sp)
200297e8:	df000604 	addi	fp,sp,24
200297ec:	e13ffd15 	stw	r4,-12(fp)
200297f0:	2805883a 	mov	r2,r5
200297f4:	e1bfff15 	stw	r6,-4(fp)
200297f8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
200297fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
20029800:	e0bfff17 	ldw	r2,-4(fp)
20029804:	10003126 	beq	r2,zero,200298cc <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
20029808:	e0bffd17 	ldw	r2,-12(fp)
2002980c:	1000041e 	bne	r2,zero,20029820 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
20029810:	e0bfff17 	ldw	r2,-4(fp)
20029814:	00c00104 	movi	r3,4
20029818:	10c00005 	stb	r3,0(r2)
        return;
2002981c:	00002c06 	br	200298d0 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
20029820:	e0bffd17 	ldw	r2,-12(fp)
20029824:	10800003 	ldbu	r2,0(r2)
20029828:	10803fcc 	andi	r2,r2,255
2002982c:	108000e0 	cmpeqi	r2,r2,3
20029830:	1000041e 	bne	r2,zero,20029844 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
20029834:	e0bfff17 	ldw	r2,-4(fp)
20029838:	00c00044 	movi	r3,1
2002983c:	10c00005 	stb	r3,0(r2)
        return;
20029840:	00002306 	br	200298d0 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029844:	0005303a 	rdctl	r2,status
20029848:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002984c:	e0fffc17 	ldw	r3,-16(fp)
20029850:	00bfff84 	movi	r2,-2
20029854:	1884703a 	and	r2,r3,r2
20029858:	1001703a 	wrctl	status,r2
  
  return context;
2002985c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
20029860:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
20029864:	e0bfff17 	ldw	r2,-4(fp)
20029868:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
2002986c:	e0bffd17 	ldw	r2,-12(fp)
20029870:	1080020b 	ldhu	r2,8(r2)
20029874:	10bfffcc 	andi	r2,r2,65535
20029878:	10000426 	beq	r2,zero,2002988c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
2002987c:	e0bffd17 	ldw	r2,-12(fp)
20029880:	e0fffe0b 	ldhu	r3,-8(fp)
20029884:	10c0020d 	sth	r3,8(r2)
20029888:	00000b06 	br	200298b8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
2002988c:	e0bffd17 	ldw	r2,-12(fp)
20029890:	10800283 	ldbu	r2,10(r2)
20029894:	10803fcc 	andi	r2,r2,255
20029898:	1000041e 	bne	r2,zero,200298ac <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
2002989c:	e0bffd17 	ldw	r2,-12(fp)
200298a0:	e0fffe0b 	ldhu	r3,-8(fp)
200298a4:	10c0020d 	sth	r3,8(r2)
200298a8:	00000306 	br	200298b8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
200298ac:	e0bfff17 	ldw	r2,-4(fp)
200298b0:	00c01244 	movi	r3,73
200298b4:	10c00005 	stb	r3,0(r2)
200298b8:	e0bffa17 	ldw	r2,-24(fp)
200298bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200298c0:	e0bffb17 	ldw	r2,-20(fp)
200298c4:	1001703a 	wrctl	status,r2
200298c8:	00000106 	br	200298d0 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
200298cc:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
200298d0:	e037883a 	mov	sp,fp
200298d4:	df000017 	ldw	fp,0(sp)
200298d8:	dec00104 	addi	sp,sp,4
200298dc:	f800283a 	ret

200298e0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
200298e0:	defff104 	addi	sp,sp,-60
200298e4:	dfc00e15 	stw	ra,56(sp)
200298e8:	df000d15 	stw	fp,52(sp)
200298ec:	df000d04 	addi	fp,sp,52
200298f0:	2007883a 	mov	r3,r4
200298f4:	2805883a 	mov	r2,r5
200298f8:	e0fffe05 	stb	r3,-8(fp)
200298fc:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
20029900:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
20029904:	e0bffe03 	ldbu	r2,-8(fp)
20029908:	10800530 	cmpltui	r2,r2,20
2002990c:	1000051e 	bne	r2,zero,20029924 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
20029910:	e0bffe03 	ldbu	r2,-8(fp)
20029914:	10803fe0 	cmpeqi	r2,r2,255
20029918:	1000021e 	bne	r2,zero,20029924 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
2002991c:	00800a84 	movi	r2,42
20029920:	00012606 	br	20029dbc <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
20029924:	e0bfff03 	ldbu	r2,-4(fp)
20029928:	10800530 	cmpltui	r2,r2,20
2002992c:	1000021e 	bne	r2,zero,20029938 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
20029930:	00800a84 	movi	r2,42
20029934:	00012106 	br	20029dbc <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029938:	0005303a 	rdctl	r2,status
2002993c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20029940:	e0fffd17 	ldw	r3,-12(fp)
20029944:	00bfff84 	movi	r2,-2
20029948:	1884703a 	and	r2,r3,r2
2002994c:	1001703a 	wrctl	status,r2
  
  return context;
20029950:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20029954:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
20029958:	e0ffff03 	ldbu	r3,-4(fp)
2002995c:	00800074 	movhi	r2,1
20029960:	10a3c304 	addi	r2,r2,-28916
20029964:	18c7883a 	add	r3,r3,r3
20029968:	18c7883a 	add	r3,r3,r3
2002996c:	10c5883a 	add	r2,r2,r3
20029970:	10800017 	ldw	r2,0(r2)
20029974:	10000626 	beq	r2,zero,20029990 <OSTaskChangePrio+0xb0>
20029978:	e0bff517 	ldw	r2,-44(fp)
2002997c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029980:	e0bff617 	ldw	r2,-40(fp)
20029984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
20029988:	00800a04 	movi	r2,40
2002998c:	00010b06 	br	20029dbc <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
20029990:	e0bffe03 	ldbu	r2,-8(fp)
20029994:	10803fd8 	cmpnei	r2,r2,255
20029998:	1000031e 	bne	r2,zero,200299a8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
2002999c:	d0a04917 	ldw	r2,-32476(gp)
200299a0:	10800c83 	ldbu	r2,50(r2)
200299a4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
200299a8:	e0fffe03 	ldbu	r3,-8(fp)
200299ac:	00800074 	movhi	r2,1
200299b0:	10a3c304 	addi	r2,r2,-28916
200299b4:	18c7883a 	add	r3,r3,r3
200299b8:	18c7883a 	add	r3,r3,r3
200299bc:	10c5883a 	add	r2,r2,r3
200299c0:	10800017 	ldw	r2,0(r2)
200299c4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
200299c8:	e0bff817 	ldw	r2,-32(fp)
200299cc:	1000061e 	bne	r2,zero,200299e8 <OSTaskChangePrio+0x108>
200299d0:	e0bff517 	ldw	r2,-44(fp)
200299d4:	e0bff715 	stw	r2,-36(fp)
200299d8:	e0bff717 	ldw	r2,-36(fp)
200299dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
200299e0:	00800a44 	movi	r2,41
200299e4:	0000f506 	br	20029dbc <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
200299e8:	e0bff817 	ldw	r2,-32(fp)
200299ec:	10800058 	cmpnei	r2,r2,1
200299f0:	1000061e 	bne	r2,zero,20029a0c <OSTaskChangePrio+0x12c>
200299f4:	e0bff517 	ldw	r2,-44(fp)
200299f8:	e0bff915 	stw	r2,-28(fp)
200299fc:	e0bff917 	ldw	r2,-28(fp)
20029a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
20029a04:	008010c4 	movi	r2,67
20029a08:	0000ec06 	br	20029dbc <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
20029a0c:	e0bfff03 	ldbu	r2,-4(fp)
20029a10:	1004d0fa 	srli	r2,r2,3
20029a14:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
20029a18:	e0bfff03 	ldbu	r2,-4(fp)
20029a1c:	108001cc 	andi	r2,r2,7
20029a20:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
20029a24:	e0bffb03 	ldbu	r2,-20(fp)
20029a28:	00c00044 	movi	r3,1
20029a2c:	1884983a 	sll	r2,r3,r2
20029a30:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
20029a34:	e0bffb43 	ldbu	r2,-19(fp)
20029a38:	00c00044 	movi	r3,1
20029a3c:	1884983a 	sll	r2,r3,r2
20029a40:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
20029a44:	e0fffe03 	ldbu	r3,-8(fp)
20029a48:	00800074 	movhi	r2,1
20029a4c:	10a3c304 	addi	r2,r2,-28916
20029a50:	18c7883a 	add	r3,r3,r3
20029a54:	18c7883a 	add	r3,r3,r3
20029a58:	10c5883a 	add	r2,r2,r3
20029a5c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
20029a60:	e0ffff03 	ldbu	r3,-4(fp)
20029a64:	00800074 	movhi	r2,1
20029a68:	10a3c304 	addi	r2,r2,-28916
20029a6c:	18c7883a 	add	r3,r3,r3
20029a70:	18c7883a 	add	r3,r3,r3
20029a74:	10c5883a 	add	r2,r2,r3
20029a78:	e0fff817 	ldw	r3,-32(fp)
20029a7c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
20029a80:	e0bff817 	ldw	r2,-32(fp)
20029a84:	10800d03 	ldbu	r2,52(r2)
20029a88:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
20029a8c:	e0bff817 	ldw	r2,-32(fp)
20029a90:	10800d83 	ldbu	r2,54(r2)
20029a94:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
20029a98:	e0bff817 	ldw	r2,-32(fp)
20029a9c:	10800d43 	ldbu	r2,53(r2)
20029aa0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
20029aa4:	e0fffc03 	ldbu	r3,-16(fp)
20029aa8:	d0a04644 	addi	r2,gp,-32487
20029aac:	1885883a 	add	r2,r3,r2
20029ab0:	10c00003 	ldbu	r3,0(r2)
20029ab4:	e0bffc83 	ldbu	r2,-14(fp)
20029ab8:	1884703a 	and	r2,r3,r2
20029abc:	10803fcc 	andi	r2,r2,255
20029ac0:	10002826 	beq	r2,zero,20029b64 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
20029ac4:	e0fffc03 	ldbu	r3,-16(fp)
20029ac8:	e13ffc03 	ldbu	r4,-16(fp)
20029acc:	d0a04644 	addi	r2,gp,-32487
20029ad0:	2085883a 	add	r2,r4,r2
20029ad4:	10800003 	ldbu	r2,0(r2)
20029ad8:	1009883a 	mov	r4,r2
20029adc:	e0bffc83 	ldbu	r2,-14(fp)
20029ae0:	0084303a 	nor	r2,zero,r2
20029ae4:	2084703a 	and	r2,r4,r2
20029ae8:	1009883a 	mov	r4,r2
20029aec:	d0a04644 	addi	r2,gp,-32487
20029af0:	1885883a 	add	r2,r3,r2
20029af4:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
20029af8:	e0fffc03 	ldbu	r3,-16(fp)
20029afc:	d0a04644 	addi	r2,gp,-32487
20029b00:	1885883a 	add	r2,r3,r2
20029b04:	10800003 	ldbu	r2,0(r2)
20029b08:	10803fcc 	andi	r2,r2,255
20029b0c:	1000061e 	bne	r2,zero,20029b28 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
20029b10:	e0bffc43 	ldbu	r2,-15(fp)
20029b14:	0084303a 	nor	r2,zero,r2
20029b18:	1007883a 	mov	r3,r2
20029b1c:	d0a04603 	ldbu	r2,-32488(gp)
20029b20:	1884703a 	and	r2,r3,r2
20029b24:	d0a04605 	stb	r2,-32488(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
20029b28:	d0e04603 	ldbu	r3,-32488(gp)
20029b2c:	e0bffb83 	ldbu	r2,-18(fp)
20029b30:	1884b03a 	or	r2,r3,r2
20029b34:	d0a04605 	stb	r2,-32488(gp)
         OSRdyTbl[y_new] |= bitx_new;
20029b38:	e0fffb03 	ldbu	r3,-20(fp)
20029b3c:	e13ffb03 	ldbu	r4,-20(fp)
20029b40:	d0a04644 	addi	r2,gp,-32487
20029b44:	2085883a 	add	r2,r4,r2
20029b48:	11000003 	ldbu	r4,0(r2)
20029b4c:	e0bffbc3 	ldbu	r2,-17(fp)
20029b50:	2084b03a 	or	r2,r4,r2
20029b54:	1009883a 	mov	r4,r2
20029b58:	d0a04644 	addi	r2,gp,-32487
20029b5c:	1885883a 	add	r2,r3,r2
20029b60:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
20029b64:	e0bff817 	ldw	r2,-32(fp)
20029b68:	10800717 	ldw	r2,28(r2)
20029b6c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
20029b70:	e0bff317 	ldw	r2,-52(fp)
20029b74:	10003326 	beq	r2,zero,20029c44 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
20029b78:	e0bffc03 	ldbu	r2,-16(fp)
20029b7c:	e0fffc03 	ldbu	r3,-16(fp)
20029b80:	e13ff317 	ldw	r4,-52(fp)
20029b84:	20c7883a 	add	r3,r4,r3
20029b88:	18c002c4 	addi	r3,r3,11
20029b8c:	18c00003 	ldbu	r3,0(r3)
20029b90:	1809883a 	mov	r4,r3
20029b94:	e0fffc83 	ldbu	r3,-14(fp)
20029b98:	00c6303a 	nor	r3,zero,r3
20029b9c:	20c6703a 	and	r3,r4,r3
20029ba0:	1809883a 	mov	r4,r3
20029ba4:	e0fff317 	ldw	r3,-52(fp)
20029ba8:	1885883a 	add	r2,r3,r2
20029bac:	108002c4 	addi	r2,r2,11
20029bb0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
20029bb4:	e0bffc03 	ldbu	r2,-16(fp)
20029bb8:	e0fff317 	ldw	r3,-52(fp)
20029bbc:	1885883a 	add	r2,r3,r2
20029bc0:	108002c4 	addi	r2,r2,11
20029bc4:	10800003 	ldbu	r2,0(r2)
20029bc8:	10803fcc 	andi	r2,r2,255
20029bcc:	1000091e 	bne	r2,zero,20029bf4 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
20029bd0:	e0bff317 	ldw	r2,-52(fp)
20029bd4:	10800283 	ldbu	r2,10(r2)
20029bd8:	1007883a 	mov	r3,r2
20029bdc:	e0bffc43 	ldbu	r2,-15(fp)
20029be0:	0084303a 	nor	r2,zero,r2
20029be4:	1884703a 	and	r2,r3,r2
20029be8:	1007883a 	mov	r3,r2
20029bec:	e0bff317 	ldw	r2,-52(fp)
20029bf0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
20029bf4:	e0bff317 	ldw	r2,-52(fp)
20029bf8:	10c00283 	ldbu	r3,10(r2)
20029bfc:	e0bffb83 	ldbu	r2,-18(fp)
20029c00:	1884b03a 	or	r2,r3,r2
20029c04:	1007883a 	mov	r3,r2
20029c08:	e0bff317 	ldw	r2,-52(fp)
20029c0c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
20029c10:	e0bffb03 	ldbu	r2,-20(fp)
20029c14:	e0fffb03 	ldbu	r3,-20(fp)
20029c18:	e13ff317 	ldw	r4,-52(fp)
20029c1c:	20c7883a 	add	r3,r4,r3
20029c20:	18c002c4 	addi	r3,r3,11
20029c24:	19000003 	ldbu	r4,0(r3)
20029c28:	e0fffbc3 	ldbu	r3,-17(fp)
20029c2c:	20c6b03a 	or	r3,r4,r3
20029c30:	1809883a 	mov	r4,r3
20029c34:	e0fff317 	ldw	r3,-52(fp)
20029c38:	1885883a 	add	r2,r3,r2
20029c3c:	108002c4 	addi	r2,r2,11
20029c40:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
20029c44:	e0bff817 	ldw	r2,-32(fp)
20029c48:	10800817 	ldw	r2,32(r2)
20029c4c:	10004226 	beq	r2,zero,20029d58 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
20029c50:	e0bff817 	ldw	r2,-32(fp)
20029c54:	10800817 	ldw	r2,32(r2)
20029c58:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
20029c5c:	e0bff417 	ldw	r2,-48(fp)
20029c60:	10800017 	ldw	r2,0(r2)
20029c64:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
20029c68:	00003906 	br	20029d50 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
20029c6c:	e0bffc03 	ldbu	r2,-16(fp)
20029c70:	e0fffc03 	ldbu	r3,-16(fp)
20029c74:	e13ff317 	ldw	r4,-52(fp)
20029c78:	20c7883a 	add	r3,r4,r3
20029c7c:	18c002c4 	addi	r3,r3,11
20029c80:	18c00003 	ldbu	r3,0(r3)
20029c84:	1809883a 	mov	r4,r3
20029c88:	e0fffc83 	ldbu	r3,-14(fp)
20029c8c:	00c6303a 	nor	r3,zero,r3
20029c90:	20c6703a 	and	r3,r4,r3
20029c94:	1809883a 	mov	r4,r3
20029c98:	e0fff317 	ldw	r3,-52(fp)
20029c9c:	1885883a 	add	r2,r3,r2
20029ca0:	108002c4 	addi	r2,r2,11
20029ca4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
20029ca8:	e0bffc03 	ldbu	r2,-16(fp)
20029cac:	e0fff317 	ldw	r3,-52(fp)
20029cb0:	1885883a 	add	r2,r3,r2
20029cb4:	108002c4 	addi	r2,r2,11
20029cb8:	10800003 	ldbu	r2,0(r2)
20029cbc:	10803fcc 	andi	r2,r2,255
20029cc0:	1000091e 	bne	r2,zero,20029ce8 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
20029cc4:	e0bff317 	ldw	r2,-52(fp)
20029cc8:	10800283 	ldbu	r2,10(r2)
20029ccc:	1007883a 	mov	r3,r2
20029cd0:	e0bffc43 	ldbu	r2,-15(fp)
20029cd4:	0084303a 	nor	r2,zero,r2
20029cd8:	1884703a 	and	r2,r3,r2
20029cdc:	1007883a 	mov	r3,r2
20029ce0:	e0bff317 	ldw	r2,-52(fp)
20029ce4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
20029ce8:	e0bff317 	ldw	r2,-52(fp)
20029cec:	10c00283 	ldbu	r3,10(r2)
20029cf0:	e0bffb83 	ldbu	r2,-18(fp)
20029cf4:	1884b03a 	or	r2,r3,r2
20029cf8:	1007883a 	mov	r3,r2
20029cfc:	e0bff317 	ldw	r2,-52(fp)
20029d00:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
20029d04:	e0bffb03 	ldbu	r2,-20(fp)
20029d08:	e0fffb03 	ldbu	r3,-20(fp)
20029d0c:	e13ff317 	ldw	r4,-52(fp)
20029d10:	20c7883a 	add	r3,r4,r3
20029d14:	18c002c4 	addi	r3,r3,11
20029d18:	19000003 	ldbu	r4,0(r3)
20029d1c:	e0fffbc3 	ldbu	r3,-17(fp)
20029d20:	20c6b03a 	or	r3,r4,r3
20029d24:	1809883a 	mov	r4,r3
20029d28:	e0fff317 	ldw	r3,-52(fp)
20029d2c:	1885883a 	add	r2,r3,r2
20029d30:	108002c4 	addi	r2,r2,11
20029d34:	11000005 	stb	r4,0(r2)
            pevents++;
20029d38:	e0bff417 	ldw	r2,-48(fp)
20029d3c:	10800104 	addi	r2,r2,4
20029d40:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
20029d44:	e0bff417 	ldw	r2,-48(fp)
20029d48:	10800017 	ldw	r2,0(r2)
20029d4c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
20029d50:	e0bff317 	ldw	r2,-52(fp)
20029d54:	103fc51e 	bne	r2,zero,20029c6c <__flash_rwdata_start+0xffffc184>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
20029d58:	e0bff817 	ldw	r2,-32(fp)
20029d5c:	e0ffff03 	ldbu	r3,-4(fp)
20029d60:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
20029d64:	e0bff817 	ldw	r2,-32(fp)
20029d68:	e0fffb03 	ldbu	r3,-20(fp)
20029d6c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
20029d70:	e0bff817 	ldw	r2,-32(fp)
20029d74:	e0fffb43 	ldbu	r3,-19(fp)
20029d78:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
20029d7c:	e0bff817 	ldw	r2,-32(fp)
20029d80:	e0fffb83 	ldbu	r3,-18(fp)
20029d84:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
20029d88:	e0bff817 	ldw	r2,-32(fp)
20029d8c:	e0fffbc3 	ldbu	r3,-17(fp)
20029d90:	10c00d45 	stb	r3,53(r2)
20029d94:	e0bff517 	ldw	r2,-44(fp)
20029d98:	e0bffa15 	stw	r2,-24(fp)
20029d9c:	e0bffa17 	ldw	r2,-24(fp)
20029da0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
20029da4:	d0a03a43 	ldbu	r2,-32535(gp)
20029da8:	10803fcc 	andi	r2,r2,255
20029dac:	10800058 	cmpnei	r2,r2,1
20029db0:	1000011e 	bne	r2,zero,20029db8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
20029db4:	00256b00 	call	200256b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
20029db8:	0005883a 	mov	r2,zero
}
20029dbc:	e037883a 	mov	sp,fp
20029dc0:	dfc00117 	ldw	ra,4(sp)
20029dc4:	df000017 	ldw	fp,0(sp)
20029dc8:	dec00204 	addi	sp,sp,8
20029dcc:	f800283a 	ret

20029dd0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
20029dd0:	deffee04 	addi	sp,sp,-72
20029dd4:	dfc01115 	stw	ra,68(sp)
20029dd8:	df001015 	stw	fp,64(sp)
20029ddc:	df001004 	addi	fp,sp,64
20029de0:	e13ffc15 	stw	r4,-16(fp)
20029de4:	e17ffd15 	stw	r5,-12(fp)
20029de8:	e1bffe15 	stw	r6,-8(fp)
20029dec:	3805883a 	mov	r2,r7
20029df0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20029df4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20029df8:	e0bfff03 	ldbu	r2,-4(fp)
20029dfc:	10800570 	cmpltui	r2,r2,21
20029e00:	1000021e 	bne	r2,zero,20029e0c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
20029e04:	00800a84 	movi	r2,42
20029e08:	00005706 	br	20029f68 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029e0c:	0005303a 	rdctl	r2,status
20029e10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20029e14:	e0fffb17 	ldw	r3,-20(fp)
20029e18:	00bfff84 	movi	r2,-2
20029e1c:	1884703a 	and	r2,r3,r2
20029e20:	1001703a 	wrctl	status,r2
  
  return context;
20029e24:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20029e28:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20029e2c:	d0a04803 	ldbu	r2,-32480(gp)
20029e30:	10803fcc 	andi	r2,r2,255
20029e34:	10000626 	beq	r2,zero,20029e50 <OSTaskCreate+0x80>
20029e38:	e0bff317 	ldw	r2,-52(fp)
20029e3c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029e40:	e0bff417 	ldw	r2,-48(fp)
20029e44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
20029e48:	00800f04 	movi	r2,60
20029e4c:	00004606 	br	20029f68 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
20029e50:	e0ffff03 	ldbu	r3,-4(fp)
20029e54:	00800074 	movhi	r2,1
20029e58:	10a3c304 	addi	r2,r2,-28916
20029e5c:	18c7883a 	add	r3,r3,r3
20029e60:	18c7883a 	add	r3,r3,r3
20029e64:	10c5883a 	add	r2,r2,r3
20029e68:	10800017 	ldw	r2,0(r2)
20029e6c:	1000391e 	bne	r2,zero,20029f54 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
20029e70:	e0ffff03 	ldbu	r3,-4(fp)
20029e74:	00800074 	movhi	r2,1
20029e78:	10a3c304 	addi	r2,r2,-28916
20029e7c:	18c7883a 	add	r3,r3,r3
20029e80:	18c7883a 	add	r3,r3,r3
20029e84:	10c5883a 	add	r2,r2,r3
20029e88:	00c00044 	movi	r3,1
20029e8c:	10c00015 	stw	r3,0(r2)
20029e90:	e0bff317 	ldw	r2,-52(fp)
20029e94:	e0bff515 	stw	r2,-44(fp)
20029e98:	e0bff517 	ldw	r2,-44(fp)
20029e9c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
20029ea0:	000f883a 	mov	r7,zero
20029ea4:	e1bffe17 	ldw	r6,-8(fp)
20029ea8:	e17ffd17 	ldw	r5,-12(fp)
20029eac:	e13ffc17 	ldw	r4,-16(fp)
20029eb0:	002d0380 	call	2002d038 <OSTaskStkInit>
20029eb4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
20029eb8:	e0bfff03 	ldbu	r2,-4(fp)
20029ebc:	d8000215 	stw	zero,8(sp)
20029ec0:	d8000115 	stw	zero,4(sp)
20029ec4:	d8000015 	stw	zero,0(sp)
20029ec8:	000f883a 	mov	r7,zero
20029ecc:	000d883a 	mov	r6,zero
20029ed0:	e17ff717 	ldw	r5,-36(fp)
20029ed4:	1009883a 	mov	r4,r2
20029ed8:	0025ab00 	call	20025ab0 <OS_TCBInit>
20029edc:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
20029ee0:	e0bff803 	ldbu	r2,-32(fp)
20029ee4:	1000061e 	bne	r2,zero,20029f00 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
20029ee8:	d0a03a43 	ldbu	r2,-32535(gp)
20029eec:	10803fcc 	andi	r2,r2,255
20029ef0:	10800058 	cmpnei	r2,r2,1
20029ef4:	1000151e 	bne	r2,zero,20029f4c <OSTaskCreate+0x17c>
                OS_Sched();
20029ef8:	00256b00 	call	200256b0 <OS_Sched>
20029efc:	00001306 	br	20029f4c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029f00:	0005303a 	rdctl	r2,status
20029f04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20029f08:	e0fffa17 	ldw	r3,-24(fp)
20029f0c:	00bfff84 	movi	r2,-2
20029f10:	1884703a 	and	r2,r3,r2
20029f14:	1001703a 	wrctl	status,r2
  
  return context;
20029f18:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
20029f1c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
20029f20:	e0ffff03 	ldbu	r3,-4(fp)
20029f24:	00800074 	movhi	r2,1
20029f28:	10a3c304 	addi	r2,r2,-28916
20029f2c:	18c7883a 	add	r3,r3,r3
20029f30:	18c7883a 	add	r3,r3,r3
20029f34:	10c5883a 	add	r2,r2,r3
20029f38:	10000015 	stw	zero,0(r2)
20029f3c:	e0bff317 	ldw	r2,-52(fp)
20029f40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029f44:	e0bff617 	ldw	r2,-40(fp)
20029f48:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
20029f4c:	e0bff803 	ldbu	r2,-32(fp)
20029f50:	00000506 	br	20029f68 <OSTaskCreate+0x198>
20029f54:	e0bff317 	ldw	r2,-52(fp)
20029f58:	e0bff915 	stw	r2,-28(fp)
20029f5c:	e0bff917 	ldw	r2,-28(fp)
20029f60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
20029f64:	00800a04 	movi	r2,40
}
20029f68:	e037883a 	mov	sp,fp
20029f6c:	dfc00117 	ldw	ra,4(sp)
20029f70:	df000017 	ldw	fp,0(sp)
20029f74:	dec00204 	addi	sp,sp,8
20029f78:	f800283a 	ret

20029f7c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
20029f7c:	deffec04 	addi	sp,sp,-80
20029f80:	dfc01315 	stw	ra,76(sp)
20029f84:	df001215 	stw	fp,72(sp)
20029f88:	df001204 	addi	fp,sp,72
20029f8c:	e13ffa15 	stw	r4,-24(fp)
20029f90:	e17ffb15 	stw	r5,-20(fp)
20029f94:	e1bffc15 	stw	r6,-16(fp)
20029f98:	3809883a 	mov	r4,r7
20029f9c:	e0c00217 	ldw	r3,8(fp)
20029fa0:	e0800617 	ldw	r2,24(fp)
20029fa4:	e13ffd05 	stb	r4,-12(fp)
20029fa8:	e0fffe0d 	sth	r3,-8(fp)
20029fac:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
20029fb0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
20029fb4:	e0bffd03 	ldbu	r2,-12(fp)
20029fb8:	10800570 	cmpltui	r2,r2,21
20029fbc:	1000021e 	bne	r2,zero,20029fc8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
20029fc0:	00800a84 	movi	r2,42
20029fc4:	00006106 	br	2002a14c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20029fc8:	0005303a 	rdctl	r2,status
20029fcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20029fd0:	e0fff917 	ldw	r3,-28(fp)
20029fd4:	00bfff84 	movi	r2,-2
20029fd8:	1884703a 	and	r2,r3,r2
20029fdc:	1001703a 	wrctl	status,r2
  
  return context;
20029fe0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
20029fe4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
20029fe8:	d0a04803 	ldbu	r2,-32480(gp)
20029fec:	10803fcc 	andi	r2,r2,255
20029ff0:	10000626 	beq	r2,zero,2002a00c <OSTaskCreateExt+0x90>
20029ff4:	e0bff117 	ldw	r2,-60(fp)
20029ff8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20029ffc:	e0bff217 	ldw	r2,-56(fp)
2002a000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
2002a004:	00800f04 	movi	r2,60
2002a008:	00005006 	br	2002a14c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
2002a00c:	e0fffd03 	ldbu	r3,-12(fp)
2002a010:	00800074 	movhi	r2,1
2002a014:	10a3c304 	addi	r2,r2,-28916
2002a018:	18c7883a 	add	r3,r3,r3
2002a01c:	18c7883a 	add	r3,r3,r3
2002a020:	10c5883a 	add	r2,r2,r3
2002a024:	10800017 	ldw	r2,0(r2)
2002a028:	1000431e 	bne	r2,zero,2002a138 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
2002a02c:	e0fffd03 	ldbu	r3,-12(fp)
2002a030:	00800074 	movhi	r2,1
2002a034:	10a3c304 	addi	r2,r2,-28916
2002a038:	18c7883a 	add	r3,r3,r3
2002a03c:	18c7883a 	add	r3,r3,r3
2002a040:	10c5883a 	add	r2,r2,r3
2002a044:	00c00044 	movi	r3,1
2002a048:	10c00015 	stw	r3,0(r2)
2002a04c:	e0bff117 	ldw	r2,-60(fp)
2002a050:	e0bff315 	stw	r2,-52(fp)
2002a054:	e0bff317 	ldw	r2,-52(fp)
2002a058:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
2002a05c:	e0bfff0b 	ldhu	r2,-4(fp)
2002a060:	100d883a 	mov	r6,r2
2002a064:	e1400417 	ldw	r5,16(fp)
2002a068:	e1000317 	ldw	r4,12(fp)
2002a06c:	002afdc0 	call	2002afdc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
2002a070:	e0bfff0b 	ldhu	r2,-4(fp)
2002a074:	100f883a 	mov	r7,r2
2002a078:	e1bffc17 	ldw	r6,-16(fp)
2002a07c:	e17ffb17 	ldw	r5,-20(fp)
2002a080:	e13ffa17 	ldw	r4,-24(fp)
2002a084:	002d0380 	call	2002d038 <OSTaskStkInit>
2002a088:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
2002a08c:	e0fffd03 	ldbu	r3,-12(fp)
2002a090:	e13ffe0b 	ldhu	r4,-8(fp)
2002a094:	e0bfff0b 	ldhu	r2,-4(fp)
2002a098:	d8800215 	stw	r2,8(sp)
2002a09c:	e0800517 	ldw	r2,20(fp)
2002a0a0:	d8800115 	stw	r2,4(sp)
2002a0a4:	e0800417 	ldw	r2,16(fp)
2002a0a8:	d8800015 	stw	r2,0(sp)
2002a0ac:	200f883a 	mov	r7,r4
2002a0b0:	e1800317 	ldw	r6,12(fp)
2002a0b4:	e17ff517 	ldw	r5,-44(fp)
2002a0b8:	1809883a 	mov	r4,r3
2002a0bc:	0025ab00 	call	20025ab0 <OS_TCBInit>
2002a0c0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
2002a0c4:	e0bff603 	ldbu	r2,-40(fp)
2002a0c8:	1000061e 	bne	r2,zero,2002a0e4 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
2002a0cc:	d0a03a43 	ldbu	r2,-32535(gp)
2002a0d0:	10803fcc 	andi	r2,r2,255
2002a0d4:	10800058 	cmpnei	r2,r2,1
2002a0d8:	1000151e 	bne	r2,zero,2002a130 <OSTaskCreateExt+0x1b4>
                OS_Sched();
2002a0dc:	00256b00 	call	200256b0 <OS_Sched>
2002a0e0:	00001306 	br	2002a130 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a0e4:	0005303a 	rdctl	r2,status
2002a0e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a0ec:	e0fff817 	ldw	r3,-32(fp)
2002a0f0:	00bfff84 	movi	r2,-2
2002a0f4:	1884703a 	and	r2,r3,r2
2002a0f8:	1001703a 	wrctl	status,r2
  
  return context;
2002a0fc:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
2002a100:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
2002a104:	e0fffd03 	ldbu	r3,-12(fp)
2002a108:	00800074 	movhi	r2,1
2002a10c:	10a3c304 	addi	r2,r2,-28916
2002a110:	18c7883a 	add	r3,r3,r3
2002a114:	18c7883a 	add	r3,r3,r3
2002a118:	10c5883a 	add	r2,r2,r3
2002a11c:	10000015 	stw	zero,0(r2)
2002a120:	e0bff117 	ldw	r2,-60(fp)
2002a124:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a128:	e0bff417 	ldw	r2,-48(fp)
2002a12c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
2002a130:	e0bff603 	ldbu	r2,-40(fp)
2002a134:	00000506 	br	2002a14c <OSTaskCreateExt+0x1d0>
2002a138:	e0bff117 	ldw	r2,-60(fp)
2002a13c:	e0bff715 	stw	r2,-36(fp)
2002a140:	e0bff717 	ldw	r2,-36(fp)
2002a144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
2002a148:	00800a04 	movi	r2,40
}
2002a14c:	e037883a 	mov	sp,fp
2002a150:	dfc00117 	ldw	ra,4(sp)
2002a154:	df000017 	ldw	fp,0(sp)
2002a158:	dec00204 	addi	sp,sp,8
2002a15c:	f800283a 	ret

2002a160 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
2002a160:	defff404 	addi	sp,sp,-48
2002a164:	dfc00b15 	stw	ra,44(sp)
2002a168:	df000a15 	stw	fp,40(sp)
2002a16c:	df000a04 	addi	fp,sp,40
2002a170:	2005883a 	mov	r2,r4
2002a174:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
2002a178:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
2002a17c:	d0a04803 	ldbu	r2,-32480(gp)
2002a180:	10803fcc 	andi	r2,r2,255
2002a184:	10000226 	beq	r2,zero,2002a190 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
2002a188:	00801004 	movi	r2,64
2002a18c:	0000c006 	br	2002a490 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
2002a190:	e0bfff03 	ldbu	r2,-4(fp)
2002a194:	10800518 	cmpnei	r2,r2,20
2002a198:	1000021e 	bne	r2,zero,2002a1a4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
2002a19c:	00800f84 	movi	r2,62
2002a1a0:	0000bb06 	br	2002a490 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
2002a1a4:	e0bfff03 	ldbu	r2,-4(fp)
2002a1a8:	10800530 	cmpltui	r2,r2,20
2002a1ac:	1000051e 	bne	r2,zero,2002a1c4 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
2002a1b0:	e0bfff03 	ldbu	r2,-4(fp)
2002a1b4:	10803fe0 	cmpeqi	r2,r2,255
2002a1b8:	1000021e 	bne	r2,zero,2002a1c4 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
2002a1bc:	00800a84 	movi	r2,42
2002a1c0:	0000b306 	br	2002a490 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a1c4:	0005303a 	rdctl	r2,status
2002a1c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a1cc:	e0fffe17 	ldw	r3,-8(fp)
2002a1d0:	00bfff84 	movi	r2,-2
2002a1d4:	1884703a 	and	r2,r3,r2
2002a1d8:	1001703a 	wrctl	status,r2
  
  return context;
2002a1dc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
2002a1e0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
2002a1e4:	e0bfff03 	ldbu	r2,-4(fp)
2002a1e8:	10803fd8 	cmpnei	r2,r2,255
2002a1ec:	1000031e 	bne	r2,zero,2002a1fc <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
2002a1f0:	d0a04917 	ldw	r2,-32476(gp)
2002a1f4:	10800c83 	ldbu	r2,50(r2)
2002a1f8:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002a1fc:	e0ffff03 	ldbu	r3,-4(fp)
2002a200:	00800074 	movhi	r2,1
2002a204:	10a3c304 	addi	r2,r2,-28916
2002a208:	18c7883a 	add	r3,r3,r3
2002a20c:	18c7883a 	add	r3,r3,r3
2002a210:	10c5883a 	add	r2,r2,r3
2002a214:	10800017 	ldw	r2,0(r2)
2002a218:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
2002a21c:	e0bff817 	ldw	r2,-32(fp)
2002a220:	1000061e 	bne	r2,zero,2002a23c <OSTaskDel+0xdc>
2002a224:	e0bff617 	ldw	r2,-40(fp)
2002a228:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a22c:	e0bff717 	ldw	r2,-36(fp)
2002a230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002a234:	008010c4 	movi	r2,67
2002a238:	00009506 	br	2002a490 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
2002a23c:	e0bff817 	ldw	r2,-32(fp)
2002a240:	10800058 	cmpnei	r2,r2,1
2002a244:	1000061e 	bne	r2,zero,2002a260 <OSTaskDel+0x100>
2002a248:	e0bff617 	ldw	r2,-40(fp)
2002a24c:	e0bff915 	stw	r2,-28(fp)
2002a250:	e0bff917 	ldw	r2,-28(fp)
2002a254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
2002a258:	00800f44 	movi	r2,61
2002a25c:	00008c06 	br	2002a490 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
2002a260:	e0bff817 	ldw	r2,-32(fp)
2002a264:	10800d03 	ldbu	r2,52(r2)
2002a268:	10c03fcc 	andi	r3,r2,255
2002a26c:	e0bff817 	ldw	r2,-32(fp)
2002a270:	10800d03 	ldbu	r2,52(r2)
2002a274:	11003fcc 	andi	r4,r2,255
2002a278:	d0a04644 	addi	r2,gp,-32487
2002a27c:	2085883a 	add	r2,r4,r2
2002a280:	10800003 	ldbu	r2,0(r2)
2002a284:	1009883a 	mov	r4,r2
2002a288:	e0bff817 	ldw	r2,-32(fp)
2002a28c:	10800d43 	ldbu	r2,53(r2)
2002a290:	0084303a 	nor	r2,zero,r2
2002a294:	2084703a 	and	r2,r4,r2
2002a298:	1009883a 	mov	r4,r2
2002a29c:	d0a04644 	addi	r2,gp,-32487
2002a2a0:	1885883a 	add	r2,r3,r2
2002a2a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
2002a2a8:	e0bff817 	ldw	r2,-32(fp)
2002a2ac:	10800d03 	ldbu	r2,52(r2)
2002a2b0:	10c03fcc 	andi	r3,r2,255
2002a2b4:	d0a04644 	addi	r2,gp,-32487
2002a2b8:	1885883a 	add	r2,r3,r2
2002a2bc:	10800003 	ldbu	r2,0(r2)
2002a2c0:	10803fcc 	andi	r2,r2,255
2002a2c4:	1000071e 	bne	r2,zero,2002a2e4 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
2002a2c8:	e0bff817 	ldw	r2,-32(fp)
2002a2cc:	10800d83 	ldbu	r2,54(r2)
2002a2d0:	0084303a 	nor	r2,zero,r2
2002a2d4:	1007883a 	mov	r3,r2
2002a2d8:	d0a04603 	ldbu	r2,-32488(gp)
2002a2dc:	1884703a 	and	r2,r3,r2
2002a2e0:	d0a04605 	stb	r2,-32488(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
2002a2e4:	e0bff817 	ldw	r2,-32(fp)
2002a2e8:	10800717 	ldw	r2,28(r2)
2002a2ec:	10000526 	beq	r2,zero,2002a304 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
2002a2f0:	e0bff817 	ldw	r2,-32(fp)
2002a2f4:	10800717 	ldw	r2,28(r2)
2002a2f8:	100b883a 	mov	r5,r2
2002a2fc:	e13ff817 	ldw	r4,-32(fp)
2002a300:	002505c0 	call	2002505c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
2002a304:	e0bff817 	ldw	r2,-32(fp)
2002a308:	10800817 	ldw	r2,32(r2)
2002a30c:	10000526 	beq	r2,zero,2002a324 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
2002a310:	e0bff817 	ldw	r2,-32(fp)
2002a314:	10800817 	ldw	r2,32(r2)
2002a318:	100b883a 	mov	r5,r2
2002a31c:	e13ff817 	ldw	r4,-32(fp)
2002a320:	00251140 	call	20025114 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
2002a324:	e0bff817 	ldw	r2,-32(fp)
2002a328:	10800a17 	ldw	r2,40(r2)
2002a32c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
2002a330:	e0bffb17 	ldw	r2,-20(fp)
2002a334:	10000226 	beq	r2,zero,2002a340 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
2002a338:	e13ffb17 	ldw	r4,-20(fp)
2002a33c:	00275840 	call	20027584 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
2002a340:	e0bff817 	ldw	r2,-32(fp)
2002a344:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
2002a348:	e0bff817 	ldw	r2,-32(fp)
2002a34c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
2002a350:	e0bff817 	ldw	r2,-32(fp)
2002a354:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
2002a358:	d0a03a03 	ldbu	r2,-32536(gp)
2002a35c:	10803fcc 	andi	r2,r2,255
2002a360:	10803fe0 	cmpeqi	r2,r2,255
2002a364:	1000031e 	bne	r2,zero,2002a374 <OSTaskDel+0x214>
        OSLockNesting++;
2002a368:	d0a03a03 	ldbu	r2,-32536(gp)
2002a36c:	10800044 	addi	r2,r2,1
2002a370:	d0a03a05 	stb	r2,-32536(gp)
2002a374:	e0bff617 	ldw	r2,-40(fp)
2002a378:	e0bffd15 	stw	r2,-12(fp)
2002a37c:	e0bffd17 	ldw	r2,-12(fp)
2002a380:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
2002a384:	0024c440 	call	20024c44 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a388:	0005303a 	rdctl	r2,status
2002a38c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a390:	e0fffa17 	ldw	r3,-24(fp)
2002a394:	00bfff84 	movi	r2,-2
2002a398:	1884703a 	and	r2,r3,r2
2002a39c:	1001703a 	wrctl	status,r2
  
  return context;
2002a3a0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
2002a3a4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
2002a3a8:	d0a03a03 	ldbu	r2,-32536(gp)
2002a3ac:	10803fcc 	andi	r2,r2,255
2002a3b0:	10000326 	beq	r2,zero,2002a3c0 <OSTaskDel+0x260>
        OSLockNesting--;
2002a3b4:	d0a03a03 	ldbu	r2,-32536(gp)
2002a3b8:	10bfffc4 	addi	r2,r2,-1
2002a3bc:	d0a03a05 	stb	r2,-32536(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
2002a3c0:	e13ff817 	ldw	r4,-32(fp)
2002a3c4:	002d1b80 	call	2002d1b8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
2002a3c8:	d0a04243 	ldbu	r2,-32503(gp)
2002a3cc:	10bfffc4 	addi	r2,r2,-1
2002a3d0:	d0a04245 	stb	r2,-32503(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
2002a3d4:	e0ffff03 	ldbu	r3,-4(fp)
2002a3d8:	00800074 	movhi	r2,1
2002a3dc:	10a3c304 	addi	r2,r2,-28916
2002a3e0:	18c7883a 	add	r3,r3,r3
2002a3e4:	18c7883a 	add	r3,r3,r3
2002a3e8:	10c5883a 	add	r2,r2,r3
2002a3ec:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
2002a3f0:	e0bff817 	ldw	r2,-32(fp)
2002a3f4:	10800617 	ldw	r2,24(r2)
2002a3f8:	1000071e 	bne	r2,zero,2002a418 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
2002a3fc:	e0bff817 	ldw	r2,-32(fp)
2002a400:	10800517 	ldw	r2,20(r2)
2002a404:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
2002a408:	e0bff817 	ldw	r2,-32(fp)
2002a40c:	10800517 	ldw	r2,20(r2)
2002a410:	d0a03d15 	stw	r2,-32524(gp)
2002a414:	00000a06 	br	2002a440 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
2002a418:	e0bff817 	ldw	r2,-32(fp)
2002a41c:	10800617 	ldw	r2,24(r2)
2002a420:	e0fff817 	ldw	r3,-32(fp)
2002a424:	18c00517 	ldw	r3,20(r3)
2002a428:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
2002a42c:	e0bff817 	ldw	r2,-32(fp)
2002a430:	10800517 	ldw	r2,20(r2)
2002a434:	e0fff817 	ldw	r3,-32(fp)
2002a438:	18c00617 	ldw	r3,24(r3)
2002a43c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
2002a440:	d0e04117 	ldw	r3,-32508(gp)
2002a444:	e0bff817 	ldw	r2,-32(fp)
2002a448:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
2002a44c:	e0bff817 	ldw	r2,-32(fp)
2002a450:	d0a04115 	stw	r2,-32508(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
2002a454:	e0bff817 	ldw	r2,-32(fp)
2002a458:	00c00fc4 	movi	r3,63
2002a45c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
2002a460:	e0bff817 	ldw	r2,-32(fp)
2002a464:	10001345 	stb	zero,77(r2)
2002a468:	e0bff617 	ldw	r2,-40(fp)
2002a46c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a470:	e0bffc17 	ldw	r2,-16(fp)
2002a474:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
2002a478:	d0a03a43 	ldbu	r2,-32535(gp)
2002a47c:	10803fcc 	andi	r2,r2,255
2002a480:	10800058 	cmpnei	r2,r2,1
2002a484:	1000011e 	bne	r2,zero,2002a48c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
2002a488:	00256b00 	call	200256b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
2002a48c:	0005883a 	mov	r2,zero
}
2002a490:	e037883a 	mov	sp,fp
2002a494:	dfc00117 	ldw	ra,4(sp)
2002a498:	df000017 	ldw	fp,0(sp)
2002a49c:	dec00204 	addi	sp,sp,8
2002a4a0:	f800283a 	ret

2002a4a4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
2002a4a4:	defff504 	addi	sp,sp,-44
2002a4a8:	df000a15 	stw	fp,40(sp)
2002a4ac:	df000a04 	addi	fp,sp,40
2002a4b0:	2005883a 	mov	r2,r4
2002a4b4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002a4b8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
2002a4bc:	e0bfff03 	ldbu	r2,-4(fp)
2002a4c0:	10800518 	cmpnei	r2,r2,20
2002a4c4:	1000021e 	bne	r2,zero,2002a4d0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
2002a4c8:	00800f84 	movi	r2,62
2002a4cc:	00004506 	br	2002a5e4 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
2002a4d0:	e0bfff03 	ldbu	r2,-4(fp)
2002a4d4:	10800530 	cmpltui	r2,r2,20
2002a4d8:	1000051e 	bne	r2,zero,2002a4f0 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
2002a4dc:	e0bfff03 	ldbu	r2,-4(fp)
2002a4e0:	10803fe0 	cmpeqi	r2,r2,255
2002a4e4:	1000021e 	bne	r2,zero,2002a4f0 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
2002a4e8:	00800a84 	movi	r2,42
2002a4ec:	00003d06 	br	2002a5e4 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
2002a4f0:	e0bfff03 	ldbu	r2,-4(fp)
2002a4f4:	10803fd8 	cmpnei	r2,r2,255
2002a4f8:	1000111e 	bne	r2,zero,2002a540 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a4fc:	0005303a 	rdctl	r2,status
2002a500:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a504:	e0fff917 	ldw	r3,-28(fp)
2002a508:	00bfff84 	movi	r2,-2
2002a50c:	1884703a 	and	r2,r3,r2
2002a510:	1001703a 	wrctl	status,r2
  
  return context;
2002a514:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
2002a518:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
2002a51c:	d0a04917 	ldw	r2,-32476(gp)
2002a520:	10800dc3 	ldbu	r2,55(r2)
2002a524:	e0bff805 	stb	r2,-32(fp)
2002a528:	e0bff617 	ldw	r2,-40(fp)
2002a52c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a530:	e0bffe17 	ldw	r2,-8(fp)
2002a534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
2002a538:	e0bff803 	ldbu	r2,-32(fp)
2002a53c:	00002906 	br	2002a5e4 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a540:	0005303a 	rdctl	r2,status
2002a544:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a548:	e0fff717 	ldw	r3,-36(fp)
2002a54c:	00bfff84 	movi	r2,-2
2002a550:	1884703a 	and	r2,r3,r2
2002a554:	1001703a 	wrctl	status,r2
  
  return context;
2002a558:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
2002a55c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
2002a560:	e0ffff03 	ldbu	r3,-4(fp)
2002a564:	00800074 	movhi	r2,1
2002a568:	10a3c304 	addi	r2,r2,-28916
2002a56c:	18c7883a 	add	r3,r3,r3
2002a570:	18c7883a 	add	r3,r3,r3
2002a574:	10c5883a 	add	r2,r2,r3
2002a578:	10800017 	ldw	r2,0(r2)
2002a57c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
2002a580:	e0bffb17 	ldw	r2,-20(fp)
2002a584:	1000061e 	bne	r2,zero,2002a5a0 <OSTaskDelReq+0xfc>
2002a588:	e0bff617 	ldw	r2,-40(fp)
2002a58c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a590:	e0bffa17 	ldw	r2,-24(fp)
2002a594:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
2002a598:	008010c4 	movi	r2,67
2002a59c:	00001106 	br	2002a5e4 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
2002a5a0:	e0bffb17 	ldw	r2,-20(fp)
2002a5a4:	10800058 	cmpnei	r2,r2,1
2002a5a8:	1000061e 	bne	r2,zero,2002a5c4 <OSTaskDelReq+0x120>
2002a5ac:	e0bff617 	ldw	r2,-40(fp)
2002a5b0:	e0bffc15 	stw	r2,-16(fp)
2002a5b4:	e0bffc17 	ldw	r2,-16(fp)
2002a5b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
2002a5bc:	00800f44 	movi	r2,61
2002a5c0:	00000806 	br	2002a5e4 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
2002a5c4:	e0bffb17 	ldw	r2,-20(fp)
2002a5c8:	00c00fc4 	movi	r3,63
2002a5cc:	10c00dc5 	stb	r3,55(r2)
2002a5d0:	e0bff617 	ldw	r2,-40(fp)
2002a5d4:	e0bffd15 	stw	r2,-12(fp)
2002a5d8:	e0bffd17 	ldw	r2,-12(fp)
2002a5dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2002a5e0:	0005883a 	mov	r2,zero
}
2002a5e4:	e037883a 	mov	sp,fp
2002a5e8:	df000017 	ldw	fp,0(sp)
2002a5ec:	dec00104 	addi	sp,sp,4
2002a5f0:	f800283a 	ret

2002a5f4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
2002a5f4:	defff404 	addi	sp,sp,-48
2002a5f8:	dfc00b15 	stw	ra,44(sp)
2002a5fc:	df000a15 	stw	fp,40(sp)
2002a600:	df000a04 	addi	fp,sp,40
2002a604:	2005883a 	mov	r2,r4
2002a608:	e17ffe15 	stw	r5,-8(fp)
2002a60c:	e1bfff15 	stw	r6,-4(fp)
2002a610:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
2002a614:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
2002a618:	e0bfff17 	ldw	r2,-4(fp)
2002a61c:	1000021e 	bne	r2,zero,2002a628 <OSTaskNameGet+0x34>
        return (0);
2002a620:	0005883a 	mov	r2,zero
2002a624:	00005406 	br	2002a778 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
2002a628:	e0bffd03 	ldbu	r2,-12(fp)
2002a62c:	10800570 	cmpltui	r2,r2,21
2002a630:	1000081e 	bne	r2,zero,2002a654 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
2002a634:	e0bffd03 	ldbu	r2,-12(fp)
2002a638:	10803fe0 	cmpeqi	r2,r2,255
2002a63c:	1000051e 	bne	r2,zero,2002a654 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
2002a640:	e0bfff17 	ldw	r2,-4(fp)
2002a644:	00c00a84 	movi	r3,42
2002a648:	10c00005 	stb	r3,0(r2)
            return (0);
2002a64c:	0005883a 	mov	r2,zero
2002a650:	00004906 	br	2002a778 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
2002a654:	e0bffe17 	ldw	r2,-8(fp)
2002a658:	1000051e 	bne	r2,zero,2002a670 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
2002a65c:	e0bfff17 	ldw	r2,-4(fp)
2002a660:	00c00304 	movi	r3,12
2002a664:	10c00005 	stb	r3,0(r2)
        return (0);
2002a668:	0005883a 	mov	r2,zero
2002a66c:	00004206 	br	2002a778 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
2002a670:	d0a04803 	ldbu	r2,-32480(gp)
2002a674:	10803fcc 	andi	r2,r2,255
2002a678:	10000526 	beq	r2,zero,2002a690 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
2002a67c:	e0bfff17 	ldw	r2,-4(fp)
2002a680:	00c00444 	movi	r3,17
2002a684:	10c00005 	stb	r3,0(r2)
        return (0);
2002a688:	0005883a 	mov	r2,zero
2002a68c:	00003a06 	br	2002a778 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a690:	0005303a 	rdctl	r2,status
2002a694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a698:	e0fffc17 	ldw	r3,-16(fp)
2002a69c:	00bfff84 	movi	r2,-2
2002a6a0:	1884703a 	and	r2,r3,r2
2002a6a4:	1001703a 	wrctl	status,r2
  
  return context;
2002a6a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2002a6ac:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
2002a6b0:	e0bffd03 	ldbu	r2,-12(fp)
2002a6b4:	10803fd8 	cmpnei	r2,r2,255
2002a6b8:	1000031e 	bne	r2,zero,2002a6c8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
2002a6bc:	d0a04917 	ldw	r2,-32476(gp)
2002a6c0:	10800c83 	ldbu	r2,50(r2)
2002a6c4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002a6c8:	e0fffd03 	ldbu	r3,-12(fp)
2002a6cc:	00800074 	movhi	r2,1
2002a6d0:	10a3c304 	addi	r2,r2,-28916
2002a6d4:	18c7883a 	add	r3,r3,r3
2002a6d8:	18c7883a 	add	r3,r3,r3
2002a6dc:	10c5883a 	add	r2,r2,r3
2002a6e0:	10800017 	ldw	r2,0(r2)
2002a6e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
2002a6e8:	e0bff817 	ldw	r2,-32(fp)
2002a6ec:	1000091e 	bne	r2,zero,2002a714 <OSTaskNameGet+0x120>
2002a6f0:	e0bff617 	ldw	r2,-40(fp)
2002a6f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a6f8:	e0bff717 	ldw	r2,-36(fp)
2002a6fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
2002a700:	e0bfff17 	ldw	r2,-4(fp)
2002a704:	00c010c4 	movi	r3,67
2002a708:	10c00005 	stb	r3,0(r2)
        return (0);
2002a70c:	0005883a 	mov	r2,zero
2002a710:	00001906 	br	2002a778 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
2002a714:	e0bff817 	ldw	r2,-32(fp)
2002a718:	10800058 	cmpnei	r2,r2,1
2002a71c:	1000091e 	bne	r2,zero,2002a744 <OSTaskNameGet+0x150>
2002a720:	e0bff617 	ldw	r2,-40(fp)
2002a724:	e0bff915 	stw	r2,-28(fp)
2002a728:	e0bff917 	ldw	r2,-28(fp)
2002a72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
2002a730:	e0bfff17 	ldw	r2,-4(fp)
2002a734:	00c010c4 	movi	r3,67
2002a738:	10c00005 	stb	r3,0(r2)
        return (0);
2002a73c:	0005883a 	mov	r2,zero
2002a740:	00000d06 	br	2002a778 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
2002a744:	e0bff817 	ldw	r2,-32(fp)
2002a748:	10801304 	addi	r2,r2,76
2002a74c:	100b883a 	mov	r5,r2
2002a750:	e13ffe17 	ldw	r4,-8(fp)
2002a754:	00257f40 	call	200257f4 <OS_StrCopy>
2002a758:	e0bffb05 	stb	r2,-20(fp)
2002a75c:	e0bff617 	ldw	r2,-40(fp)
2002a760:	e0bffa15 	stw	r2,-24(fp)
2002a764:	e0bffa17 	ldw	r2,-24(fp)
2002a768:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002a76c:	e0bfff17 	ldw	r2,-4(fp)
2002a770:	10000005 	stb	zero,0(r2)
    return (len);
2002a774:	e0bffb03 	ldbu	r2,-20(fp)
}
2002a778:	e037883a 	mov	sp,fp
2002a77c:	dfc00117 	ldw	ra,4(sp)
2002a780:	df000017 	ldw	fp,0(sp)
2002a784:	dec00204 	addi	sp,sp,8
2002a788:	f800283a 	ret

2002a78c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
2002a78c:	defff304 	addi	sp,sp,-52
2002a790:	dfc00c15 	stw	ra,48(sp)
2002a794:	df000b15 	stw	fp,44(sp)
2002a798:	df000b04 	addi	fp,sp,44
2002a79c:	2005883a 	mov	r2,r4
2002a7a0:	e17ffe15 	stw	r5,-8(fp)
2002a7a4:	e1bfff15 	stw	r6,-4(fp)
2002a7a8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
2002a7ac:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
2002a7b0:	e0bfff17 	ldw	r2,-4(fp)
2002a7b4:	10005c26 	beq	r2,zero,2002a928 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
2002a7b8:	e0bffd03 	ldbu	r2,-12(fp)
2002a7bc:	10800570 	cmpltui	r2,r2,21
2002a7c0:	1000071e 	bne	r2,zero,2002a7e0 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
2002a7c4:	e0bffd03 	ldbu	r2,-12(fp)
2002a7c8:	10803fe0 	cmpeqi	r2,r2,255
2002a7cc:	1000041e 	bne	r2,zero,2002a7e0 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
2002a7d0:	e0bfff17 	ldw	r2,-4(fp)
2002a7d4:	00c00a84 	movi	r3,42
2002a7d8:	10c00005 	stb	r3,0(r2)
            return;
2002a7dc:	00005306 	br	2002a92c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
2002a7e0:	e0bffe17 	ldw	r2,-8(fp)
2002a7e4:	1000041e 	bne	r2,zero,2002a7f8 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
2002a7e8:	e0bfff17 	ldw	r2,-4(fp)
2002a7ec:	00c00304 	movi	r3,12
2002a7f0:	10c00005 	stb	r3,0(r2)
        return;
2002a7f4:	00004d06 	br	2002a92c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
2002a7f8:	d0a04803 	ldbu	r2,-32480(gp)
2002a7fc:	10803fcc 	andi	r2,r2,255
2002a800:	10000426 	beq	r2,zero,2002a814 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
2002a804:	e0bfff17 	ldw	r2,-4(fp)
2002a808:	00c00484 	movi	r3,18
2002a80c:	10c00005 	stb	r3,0(r2)
        return;
2002a810:	00004606 	br	2002a92c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a814:	0005303a 	rdctl	r2,status
2002a818:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a81c:	e0fffc17 	ldw	r3,-16(fp)
2002a820:	00bfff84 	movi	r2,-2
2002a824:	1884703a 	and	r2,r3,r2
2002a828:	1001703a 	wrctl	status,r2
  
  return context;
2002a82c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
2002a830:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
2002a834:	e0bffd03 	ldbu	r2,-12(fp)
2002a838:	10803fd8 	cmpnei	r2,r2,255
2002a83c:	1000031e 	bne	r2,zero,2002a84c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
2002a840:	d0a04917 	ldw	r2,-32476(gp)
2002a844:	10800c83 	ldbu	r2,50(r2)
2002a848:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002a84c:	e0fffd03 	ldbu	r3,-12(fp)
2002a850:	00800074 	movhi	r2,1
2002a854:	10a3c304 	addi	r2,r2,-28916
2002a858:	18c7883a 	add	r3,r3,r3
2002a85c:	18c7883a 	add	r3,r3,r3
2002a860:	10c5883a 	add	r2,r2,r3
2002a864:	10800017 	ldw	r2,0(r2)
2002a868:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
2002a86c:	e0bff717 	ldw	r2,-36(fp)
2002a870:	1000081e 	bne	r2,zero,2002a894 <OSTaskNameSet+0x108>
2002a874:	e0bff517 	ldw	r2,-44(fp)
2002a878:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a87c:	e0bff617 	ldw	r2,-40(fp)
2002a880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
2002a884:	e0bfff17 	ldw	r2,-4(fp)
2002a888:	00c010c4 	movi	r3,67
2002a88c:	10c00005 	stb	r3,0(r2)
        return;
2002a890:	00002606 	br	2002a92c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
2002a894:	e0bff717 	ldw	r2,-36(fp)
2002a898:	10800058 	cmpnei	r2,r2,1
2002a89c:	1000081e 	bne	r2,zero,2002a8c0 <OSTaskNameSet+0x134>
2002a8a0:	e0bff517 	ldw	r2,-44(fp)
2002a8a4:	e0bff815 	stw	r2,-32(fp)
2002a8a8:	e0bff817 	ldw	r2,-32(fp)
2002a8ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
2002a8b0:	e0bfff17 	ldw	r2,-4(fp)
2002a8b4:	00c010c4 	movi	r3,67
2002a8b8:	10c00005 	stb	r3,0(r2)
        return;
2002a8bc:	00001b06 	br	2002a92c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
2002a8c0:	e13ffe17 	ldw	r4,-8(fp)
2002a8c4:	00258680 	call	20025868 <OS_StrLen>
2002a8c8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
2002a8cc:	e0bffa03 	ldbu	r2,-24(fp)
2002a8d0:	10800830 	cmpltui	r2,r2,32
2002a8d4:	1000081e 	bne	r2,zero,2002a8f8 <OSTaskNameSet+0x16c>
2002a8d8:	e0bff517 	ldw	r2,-44(fp)
2002a8dc:	e0bff915 	stw	r2,-28(fp)
2002a8e0:	e0bff917 	ldw	r2,-28(fp)
2002a8e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
2002a8e8:	e0bfff17 	ldw	r2,-4(fp)
2002a8ec:	00c01044 	movi	r3,65
2002a8f0:	10c00005 	stb	r3,0(r2)
        return;
2002a8f4:	00000d06 	br	2002a92c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
2002a8f8:	e0bff717 	ldw	r2,-36(fp)
2002a8fc:	10801304 	addi	r2,r2,76
2002a900:	e17ffe17 	ldw	r5,-8(fp)
2002a904:	1009883a 	mov	r4,r2
2002a908:	00257f40 	call	200257f4 <OS_StrCopy>
2002a90c:	e0bff517 	ldw	r2,-44(fp)
2002a910:	e0bffb15 	stw	r2,-20(fp)
2002a914:	e0bffb17 	ldw	r2,-20(fp)
2002a918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
2002a91c:	e0bfff17 	ldw	r2,-4(fp)
2002a920:	10000005 	stb	zero,0(r2)
2002a924:	00000106 	br	2002a92c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
2002a928:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
2002a92c:	e037883a 	mov	sp,fp
2002a930:	dfc00117 	ldw	ra,4(sp)
2002a934:	df000017 	ldw	fp,0(sp)
2002a938:	dec00204 	addi	sp,sp,8
2002a93c:	f800283a 	ret

2002a940 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
2002a940:	defff404 	addi	sp,sp,-48
2002a944:	dfc00b15 	stw	ra,44(sp)
2002a948:	df000a15 	stw	fp,40(sp)
2002a94c:	df000a04 	addi	fp,sp,40
2002a950:	2005883a 	mov	r2,r4
2002a954:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
2002a958:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
2002a95c:	e0bfff03 	ldbu	r2,-4(fp)
2002a960:	10800530 	cmpltui	r2,r2,20
2002a964:	1000021e 	bne	r2,zero,2002a970 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
2002a968:	00800a84 	movi	r2,42
2002a96c:	00006406 	br	2002ab00 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a970:	0005303a 	rdctl	r2,status
2002a974:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a978:	e0fffe17 	ldw	r3,-8(fp)
2002a97c:	00bfff84 	movi	r2,-2
2002a980:	1884703a 	and	r2,r3,r2
2002a984:	1001703a 	wrctl	status,r2
  
  return context;
2002a988:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
2002a98c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
2002a990:	e0ffff03 	ldbu	r3,-4(fp)
2002a994:	00800074 	movhi	r2,1
2002a998:	10a3c304 	addi	r2,r2,-28916
2002a99c:	18c7883a 	add	r3,r3,r3
2002a9a0:	18c7883a 	add	r3,r3,r3
2002a9a4:	10c5883a 	add	r2,r2,r3
2002a9a8:	10800017 	ldw	r2,0(r2)
2002a9ac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
2002a9b0:	e0bff817 	ldw	r2,-32(fp)
2002a9b4:	1000061e 	bne	r2,zero,2002a9d0 <OSTaskResume+0x90>
2002a9b8:	e0bff617 	ldw	r2,-40(fp)
2002a9bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a9c0:	e0bff717 	ldw	r2,-36(fp)
2002a9c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
2002a9c8:	00801184 	movi	r2,70
2002a9cc:	00004c06 	br	2002ab00 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
2002a9d0:	e0bff817 	ldw	r2,-32(fp)
2002a9d4:	10800058 	cmpnei	r2,r2,1
2002a9d8:	1000061e 	bne	r2,zero,2002a9f4 <OSTaskResume+0xb4>
2002a9dc:	e0bff617 	ldw	r2,-40(fp)
2002a9e0:	e0bff915 	stw	r2,-28(fp)
2002a9e4:	e0bff917 	ldw	r2,-28(fp)
2002a9e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002a9ec:	008010c4 	movi	r2,67
2002a9f0:	00004306 	br	2002ab00 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
2002a9f4:	e0bff817 	ldw	r2,-32(fp)
2002a9f8:	10800c03 	ldbu	r2,48(r2)
2002a9fc:	10803fcc 	andi	r2,r2,255
2002aa00:	1080020c 	andi	r2,r2,8
2002aa04:	10003926 	beq	r2,zero,2002aaec <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
2002aa08:	e0bff817 	ldw	r2,-32(fp)
2002aa0c:	10c00c03 	ldbu	r3,48(r2)
2002aa10:	00bffdc4 	movi	r2,-9
2002aa14:	1884703a 	and	r2,r3,r2
2002aa18:	1007883a 	mov	r3,r2
2002aa1c:	e0bff817 	ldw	r2,-32(fp)
2002aa20:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
2002aa24:	e0bff817 	ldw	r2,-32(fp)
2002aa28:	10800c03 	ldbu	r2,48(r2)
2002aa2c:	10803fcc 	andi	r2,r2,255
2002aa30:	1000281e 	bne	r2,zero,2002aad4 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
2002aa34:	e0bff817 	ldw	r2,-32(fp)
2002aa38:	10800b8b 	ldhu	r2,46(r2)
2002aa3c:	10bfffcc 	andi	r2,r2,65535
2002aa40:	10001f1e 	bne	r2,zero,2002aac0 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
2002aa44:	e0bff817 	ldw	r2,-32(fp)
2002aa48:	10c00d83 	ldbu	r3,54(r2)
2002aa4c:	d0a04603 	ldbu	r2,-32488(gp)
2002aa50:	1884b03a 	or	r2,r3,r2
2002aa54:	d0a04605 	stb	r2,-32488(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002aa58:	e0bff817 	ldw	r2,-32(fp)
2002aa5c:	10800d03 	ldbu	r2,52(r2)
2002aa60:	10c03fcc 	andi	r3,r2,255
2002aa64:	e0bff817 	ldw	r2,-32(fp)
2002aa68:	10800d03 	ldbu	r2,52(r2)
2002aa6c:	11003fcc 	andi	r4,r2,255
2002aa70:	d0a04644 	addi	r2,gp,-32487
2002aa74:	2085883a 	add	r2,r4,r2
2002aa78:	11000003 	ldbu	r4,0(r2)
2002aa7c:	e0bff817 	ldw	r2,-32(fp)
2002aa80:	10800d43 	ldbu	r2,53(r2)
2002aa84:	2084b03a 	or	r2,r4,r2
2002aa88:	1009883a 	mov	r4,r2
2002aa8c:	d0a04644 	addi	r2,gp,-32487
2002aa90:	1885883a 	add	r2,r3,r2
2002aa94:	11000005 	stb	r4,0(r2)
2002aa98:	e0bff617 	ldw	r2,-40(fp)
2002aa9c:	e0bffa15 	stw	r2,-24(fp)
2002aaa0:	e0bffa17 	ldw	r2,-24(fp)
2002aaa4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
2002aaa8:	d0a03a43 	ldbu	r2,-32535(gp)
2002aaac:	10803fcc 	andi	r2,r2,255
2002aab0:	10800058 	cmpnei	r2,r2,1
2002aab4:	10000b1e 	bne	r2,zero,2002aae4 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
2002aab8:	00256b00 	call	200256b0 <OS_Sched>
2002aabc:	00000906 	br	2002aae4 <OSTaskResume+0x1a4>
2002aac0:	e0bff617 	ldw	r2,-40(fp)
2002aac4:	e0bffb15 	stw	r2,-20(fp)
2002aac8:	e0bffb17 	ldw	r2,-20(fp)
2002aacc:	1001703a 	wrctl	status,r2
2002aad0:	00000406 	br	2002aae4 <OSTaskResume+0x1a4>
2002aad4:	e0bff617 	ldw	r2,-40(fp)
2002aad8:	e0bffc15 	stw	r2,-16(fp)
2002aadc:	e0bffc17 	ldw	r2,-16(fp)
2002aae0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
2002aae4:	0005883a 	mov	r2,zero
2002aae8:	00000506 	br	2002ab00 <OSTaskResume+0x1c0>
2002aaec:	e0bff617 	ldw	r2,-40(fp)
2002aaf0:	e0bffd15 	stw	r2,-12(fp)
2002aaf4:	e0bffd17 	ldw	r2,-12(fp)
2002aaf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
2002aafc:	00801104 	movi	r2,68
}
2002ab00:	e037883a 	mov	sp,fp
2002ab04:	dfc00117 	ldw	ra,4(sp)
2002ab08:	df000017 	ldw	fp,0(sp)
2002ab0c:	dec00204 	addi	sp,sp,8
2002ab10:	f800283a 	ret

2002ab14 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
2002ab14:	defff304 	addi	sp,sp,-52
2002ab18:	df000c15 	stw	fp,48(sp)
2002ab1c:	df000c04 	addi	fp,sp,48
2002ab20:	2005883a 	mov	r2,r4
2002ab24:	e17fff15 	stw	r5,-4(fp)
2002ab28:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
2002ab2c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
2002ab30:	e0bffe03 	ldbu	r2,-8(fp)
2002ab34:	10800570 	cmpltui	r2,r2,21
2002ab38:	1000051e 	bne	r2,zero,2002ab50 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
2002ab3c:	e0bffe03 	ldbu	r2,-8(fp)
2002ab40:	10803fe0 	cmpeqi	r2,r2,255
2002ab44:	1000021e 	bne	r2,zero,2002ab50 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
2002ab48:	00800a84 	movi	r2,42
2002ab4c:	00005d06 	br	2002acc4 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
2002ab50:	e0bfff17 	ldw	r2,-4(fp)
2002ab54:	1000021e 	bne	r2,zero,2002ab60 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
2002ab58:	00800244 	movi	r2,9
2002ab5c:	00005906 	br	2002acc4 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
2002ab60:	e0bfff17 	ldw	r2,-4(fp)
2002ab64:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
2002ab68:	e0bfff17 	ldw	r2,-4(fp)
2002ab6c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ab70:	0005303a 	rdctl	r2,status
2002ab74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ab78:	e0fffd17 	ldw	r3,-12(fp)
2002ab7c:	00bfff84 	movi	r2,-2
2002ab80:	1884703a 	and	r2,r3,r2
2002ab84:	1001703a 	wrctl	status,r2
  
  return context;
2002ab88:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
2002ab8c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
2002ab90:	e0bffe03 	ldbu	r2,-8(fp)
2002ab94:	10803fd8 	cmpnei	r2,r2,255
2002ab98:	1000031e 	bne	r2,zero,2002aba8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
2002ab9c:	d0a04917 	ldw	r2,-32476(gp)
2002aba0:	10800c83 	ldbu	r2,50(r2)
2002aba4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002aba8:	e0fffe03 	ldbu	r3,-8(fp)
2002abac:	00800074 	movhi	r2,1
2002abb0:	10a3c304 	addi	r2,r2,-28916
2002abb4:	18c7883a 	add	r3,r3,r3
2002abb8:	18c7883a 	add	r3,r3,r3
2002abbc:	10c5883a 	add	r2,r2,r3
2002abc0:	10800017 	ldw	r2,0(r2)
2002abc4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
2002abc8:	e0bff817 	ldw	r2,-32(fp)
2002abcc:	1000061e 	bne	r2,zero,2002abe8 <OSTaskStkChk+0xd4>
2002abd0:	e0bff617 	ldw	r2,-40(fp)
2002abd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002abd8:	e0bff717 	ldw	r2,-36(fp)
2002abdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002abe0:	008010c4 	movi	r2,67
2002abe4:	00003706 	br	2002acc4 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
2002abe8:	e0bff817 	ldw	r2,-32(fp)
2002abec:	10800058 	cmpnei	r2,r2,1
2002abf0:	1000061e 	bne	r2,zero,2002ac0c <OSTaskStkChk+0xf8>
2002abf4:	e0bff617 	ldw	r2,-40(fp)
2002abf8:	e0bff915 	stw	r2,-28(fp)
2002abfc:	e0bff917 	ldw	r2,-28(fp)
2002ac00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002ac04:	008010c4 	movi	r2,67
2002ac08:	00002e06 	br	2002acc4 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
2002ac0c:	e0bff817 	ldw	r2,-32(fp)
2002ac10:	1080040b 	ldhu	r2,16(r2)
2002ac14:	10bfffcc 	andi	r2,r2,65535
2002ac18:	1080004c 	andi	r2,r2,1
2002ac1c:	1000061e 	bne	r2,zero,2002ac38 <OSTaskStkChk+0x124>
2002ac20:	e0bff617 	ldw	r2,-40(fp)
2002ac24:	e0bffa15 	stw	r2,-24(fp)
2002ac28:	e0bffa17 	ldw	r2,-24(fp)
2002ac2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
2002ac30:	00801144 	movi	r2,69
2002ac34:	00002306 	br	2002acc4 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
2002ac38:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
2002ac3c:	e0bff817 	ldw	r2,-32(fp)
2002ac40:	10800317 	ldw	r2,12(r2)
2002ac44:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
2002ac48:	e0bff817 	ldw	r2,-32(fp)
2002ac4c:	10800217 	ldw	r2,8(r2)
2002ac50:	e0bff415 	stw	r2,-48(fp)
2002ac54:	e0bff617 	ldw	r2,-40(fp)
2002ac58:	e0bffb15 	stw	r2,-20(fp)
2002ac5c:	e0bffb17 	ldw	r2,-20(fp)
2002ac60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
2002ac64:	00000306 	br	2002ac74 <OSTaskStkChk+0x160>
        nfree++;
2002ac68:	e0bff517 	ldw	r2,-44(fp)
2002ac6c:	10800044 	addi	r2,r2,1
2002ac70:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
2002ac74:	e0bff417 	ldw	r2,-48(fp)
2002ac78:	10c00104 	addi	r3,r2,4
2002ac7c:	e0fff415 	stw	r3,-48(fp)
2002ac80:	10800017 	ldw	r2,0(r2)
2002ac84:	103ff826 	beq	r2,zero,2002ac68 <__flash_rwdata_start+0xffffd180>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
2002ac88:	e0bff517 	ldw	r2,-44(fp)
2002ac8c:	1085883a 	add	r2,r2,r2
2002ac90:	1085883a 	add	r2,r2,r2
2002ac94:	1007883a 	mov	r3,r2
2002ac98:	e0bfff17 	ldw	r2,-4(fp)
2002ac9c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
2002aca0:	e0fffc17 	ldw	r3,-16(fp)
2002aca4:	e0bff517 	ldw	r2,-44(fp)
2002aca8:	1885c83a 	sub	r2,r3,r2
2002acac:	1085883a 	add	r2,r2,r2
2002acb0:	1085883a 	add	r2,r2,r2
2002acb4:	1007883a 	mov	r3,r2
2002acb8:	e0bfff17 	ldw	r2,-4(fp)
2002acbc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
2002acc0:	0005883a 	mov	r2,zero
}
2002acc4:	e037883a 	mov	sp,fp
2002acc8:	df000017 	ldw	fp,0(sp)
2002accc:	dec00104 	addi	sp,sp,4
2002acd0:	f800283a 	ret

2002acd4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
2002acd4:	defff504 	addi	sp,sp,-44
2002acd8:	dfc00a15 	stw	ra,40(sp)
2002acdc:	df000915 	stw	fp,36(sp)
2002ace0:	df000904 	addi	fp,sp,36
2002ace4:	2005883a 	mov	r2,r4
2002ace8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002acec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
2002acf0:	e0bfff03 	ldbu	r2,-4(fp)
2002acf4:	10800518 	cmpnei	r2,r2,20
2002acf8:	1000021e 	bne	r2,zero,2002ad04 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
2002acfc:	008011c4 	movi	r2,71
2002ad00:	00006806 	br	2002aea4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
2002ad04:	e0bfff03 	ldbu	r2,-4(fp)
2002ad08:	10800530 	cmpltui	r2,r2,20
2002ad0c:	1000051e 	bne	r2,zero,2002ad24 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
2002ad10:	e0bfff03 	ldbu	r2,-4(fp)
2002ad14:	10803fe0 	cmpeqi	r2,r2,255
2002ad18:	1000021e 	bne	r2,zero,2002ad24 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
2002ad1c:	00800a84 	movi	r2,42
2002ad20:	00006006 	br	2002aea4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002ad24:	0005303a 	rdctl	r2,status
2002ad28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002ad2c:	e0fffe17 	ldw	r3,-8(fp)
2002ad30:	00bfff84 	movi	r2,-2
2002ad34:	1884703a 	and	r2,r3,r2
2002ad38:	1001703a 	wrctl	status,r2
  
  return context;
2002ad3c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
2002ad40:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
2002ad44:	e0bfff03 	ldbu	r2,-4(fp)
2002ad48:	10803fd8 	cmpnei	r2,r2,255
2002ad4c:	1000061e 	bne	r2,zero,2002ad68 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
2002ad50:	d0a04917 	ldw	r2,-32476(gp)
2002ad54:	10800c83 	ldbu	r2,50(r2)
2002ad58:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
2002ad5c:	00800044 	movi	r2,1
2002ad60:	e0bff705 	stb	r2,-36(fp)
2002ad64:	00000906 	br	2002ad8c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
2002ad68:	d0a04917 	ldw	r2,-32476(gp)
2002ad6c:	10800c83 	ldbu	r2,50(r2)
2002ad70:	10c03fcc 	andi	r3,r2,255
2002ad74:	e0bfff03 	ldbu	r2,-4(fp)
2002ad78:	1880031e 	bne	r3,r2,2002ad88 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
2002ad7c:	00800044 	movi	r2,1
2002ad80:	e0bff705 	stb	r2,-36(fp)
2002ad84:	00000106 	br	2002ad8c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
2002ad88:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002ad8c:	e0ffff03 	ldbu	r3,-4(fp)
2002ad90:	00800074 	movhi	r2,1
2002ad94:	10a3c304 	addi	r2,r2,-28916
2002ad98:	18c7883a 	add	r3,r3,r3
2002ad9c:	18c7883a 	add	r3,r3,r3
2002ada0:	10c5883a 	add	r2,r2,r3
2002ada4:	10800017 	ldw	r2,0(r2)
2002ada8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
2002adac:	e0bffa17 	ldw	r2,-24(fp)
2002adb0:	1000061e 	bne	r2,zero,2002adcc <OSTaskSuspend+0xf8>
2002adb4:	e0bff817 	ldw	r2,-32(fp)
2002adb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002adbc:	e0bff917 	ldw	r2,-28(fp)
2002adc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
2002adc4:	00801204 	movi	r2,72
2002adc8:	00003606 	br	2002aea4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
2002adcc:	e0bffa17 	ldw	r2,-24(fp)
2002add0:	10800058 	cmpnei	r2,r2,1
2002add4:	1000061e 	bne	r2,zero,2002adf0 <OSTaskSuspend+0x11c>
2002add8:	e0bff817 	ldw	r2,-32(fp)
2002addc:	e0bffb15 	stw	r2,-20(fp)
2002ade0:	e0bffb17 	ldw	r2,-20(fp)
2002ade4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002ade8:	008010c4 	movi	r2,67
2002adec:	00002d06 	br	2002aea4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
2002adf0:	e0bffa17 	ldw	r2,-24(fp)
2002adf4:	10800d03 	ldbu	r2,52(r2)
2002adf8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
2002adfc:	e0fffd03 	ldbu	r3,-12(fp)
2002ae00:	e13ffd03 	ldbu	r4,-12(fp)
2002ae04:	d0a04644 	addi	r2,gp,-32487
2002ae08:	2085883a 	add	r2,r4,r2
2002ae0c:	10800003 	ldbu	r2,0(r2)
2002ae10:	1009883a 	mov	r4,r2
2002ae14:	e0bffa17 	ldw	r2,-24(fp)
2002ae18:	10800d43 	ldbu	r2,53(r2)
2002ae1c:	0084303a 	nor	r2,zero,r2
2002ae20:	2084703a 	and	r2,r4,r2
2002ae24:	1009883a 	mov	r4,r2
2002ae28:	d0a04644 	addi	r2,gp,-32487
2002ae2c:	1885883a 	add	r2,r3,r2
2002ae30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
2002ae34:	e0fffd03 	ldbu	r3,-12(fp)
2002ae38:	d0a04644 	addi	r2,gp,-32487
2002ae3c:	1885883a 	add	r2,r3,r2
2002ae40:	10800003 	ldbu	r2,0(r2)
2002ae44:	10803fcc 	andi	r2,r2,255
2002ae48:	1000071e 	bne	r2,zero,2002ae68 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
2002ae4c:	e0bffa17 	ldw	r2,-24(fp)
2002ae50:	10800d83 	ldbu	r2,54(r2)
2002ae54:	0084303a 	nor	r2,zero,r2
2002ae58:	1007883a 	mov	r3,r2
2002ae5c:	d0a04603 	ldbu	r2,-32488(gp)
2002ae60:	1884703a 	and	r2,r3,r2
2002ae64:	d0a04605 	stb	r2,-32488(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
2002ae68:	e0bffa17 	ldw	r2,-24(fp)
2002ae6c:	10800c03 	ldbu	r2,48(r2)
2002ae70:	10800214 	ori	r2,r2,8
2002ae74:	1007883a 	mov	r3,r2
2002ae78:	e0bffa17 	ldw	r2,-24(fp)
2002ae7c:	10c00c05 	stb	r3,48(r2)
2002ae80:	e0bff817 	ldw	r2,-32(fp)
2002ae84:	e0bffc15 	stw	r2,-16(fp)
2002ae88:	e0bffc17 	ldw	r2,-16(fp)
2002ae8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
2002ae90:	e0bff703 	ldbu	r2,-36(fp)
2002ae94:	10800058 	cmpnei	r2,r2,1
2002ae98:	1000011e 	bne	r2,zero,2002aea0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
2002ae9c:	00256b00 	call	200256b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
2002aea0:	0005883a 	mov	r2,zero
}
2002aea4:	e037883a 	mov	sp,fp
2002aea8:	dfc00117 	ldw	ra,4(sp)
2002aeac:	df000017 	ldw	fp,0(sp)
2002aeb0:	dec00204 	addi	sp,sp,8
2002aeb4:	f800283a 	ret

2002aeb8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
2002aeb8:	defff604 	addi	sp,sp,-40
2002aebc:	dfc00915 	stw	ra,36(sp)
2002aec0:	df000815 	stw	fp,32(sp)
2002aec4:	df000804 	addi	fp,sp,32
2002aec8:	2005883a 	mov	r2,r4
2002aecc:	e17fff15 	stw	r5,-4(fp)
2002aed0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002aed4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
2002aed8:	e0bffe03 	ldbu	r2,-8(fp)
2002aedc:	10800570 	cmpltui	r2,r2,21
2002aee0:	1000051e 	bne	r2,zero,2002aef8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
2002aee4:	e0bffe03 	ldbu	r2,-8(fp)
2002aee8:	10803fe0 	cmpeqi	r2,r2,255
2002aeec:	1000021e 	bne	r2,zero,2002aef8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
2002aef0:	00800a84 	movi	r2,42
2002aef4:	00003406 	br	2002afc8 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
2002aef8:	e0bfff17 	ldw	r2,-4(fp)
2002aefc:	1000021e 	bne	r2,zero,2002af08 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
2002af00:	00800244 	movi	r2,9
2002af04:	00003006 	br	2002afc8 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002af08:	0005303a 	rdctl	r2,status
2002af0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002af10:	e0fffd17 	ldw	r3,-12(fp)
2002af14:	00bfff84 	movi	r2,-2
2002af18:	1884703a 	and	r2,r3,r2
2002af1c:	1001703a 	wrctl	status,r2
  
  return context;
2002af20:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
2002af24:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
2002af28:	e0bffe03 	ldbu	r2,-8(fp)
2002af2c:	10803fd8 	cmpnei	r2,r2,255
2002af30:	1000031e 	bne	r2,zero,2002af40 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
2002af34:	d0a04917 	ldw	r2,-32476(gp)
2002af38:	10800c83 	ldbu	r2,50(r2)
2002af3c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
2002af40:	e0fffe03 	ldbu	r3,-8(fp)
2002af44:	00800074 	movhi	r2,1
2002af48:	10a3c304 	addi	r2,r2,-28916
2002af4c:	18c7883a 	add	r3,r3,r3
2002af50:	18c7883a 	add	r3,r3,r3
2002af54:	10c5883a 	add	r2,r2,r3
2002af58:	10800017 	ldw	r2,0(r2)
2002af5c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
2002af60:	e0bffa17 	ldw	r2,-24(fp)
2002af64:	1000061e 	bne	r2,zero,2002af80 <OSTaskQuery+0xc8>
2002af68:	e0bff817 	ldw	r2,-32(fp)
2002af6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002af70:	e0bff917 	ldw	r2,-28(fp)
2002af74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
2002af78:	00800a44 	movi	r2,41
2002af7c:	00001206 	br	2002afc8 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
2002af80:	e0bffa17 	ldw	r2,-24(fp)
2002af84:	10800058 	cmpnei	r2,r2,1
2002af88:	1000061e 	bne	r2,zero,2002afa4 <OSTaskQuery+0xec>
2002af8c:	e0bff817 	ldw	r2,-32(fp)
2002af90:	e0bffb15 	stw	r2,-20(fp)
2002af94:	e0bffb17 	ldw	r2,-20(fp)
2002af98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
2002af9c:	008010c4 	movi	r2,67
2002afa0:	00000906 	br	2002afc8 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
2002afa4:	01801b04 	movi	r6,108
2002afa8:	e17ffa17 	ldw	r5,-24(fp)
2002afac:	e13fff17 	ldw	r4,-4(fp)
2002afb0:	00256480 	call	20025648 <OS_MemCopy>
2002afb4:	e0bff817 	ldw	r2,-32(fp)
2002afb8:	e0bffc15 	stw	r2,-16(fp)
2002afbc:	e0bffc17 	ldw	r2,-16(fp)
2002afc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
2002afc4:	0005883a 	mov	r2,zero
}
2002afc8:	e037883a 	mov	sp,fp
2002afcc:	dfc00117 	ldw	ra,4(sp)
2002afd0:	df000017 	ldw	fp,0(sp)
2002afd4:	dec00204 	addi	sp,sp,8
2002afd8:	f800283a 	ret

2002afdc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
2002afdc:	defffc04 	addi	sp,sp,-16
2002afe0:	df000315 	stw	fp,12(sp)
2002afe4:	df000304 	addi	fp,sp,12
2002afe8:	e13ffd15 	stw	r4,-12(fp)
2002afec:	e17ffe15 	stw	r5,-8(fp)
2002aff0:	3005883a 	mov	r2,r6
2002aff4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
2002aff8:	e0bfff0b 	ldhu	r2,-4(fp)
2002affc:	1080004c 	andi	r2,r2,1
2002b000:	10000d26 	beq	r2,zero,2002b038 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
2002b004:	e0bfff0b 	ldhu	r2,-4(fp)
2002b008:	1080008c 	andi	r2,r2,2
2002b00c:	10000a26 	beq	r2,zero,2002b038 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
2002b010:	00000706 	br	2002b030 <OS_TaskStkClr+0x54>
                size--;
2002b014:	e0bffe17 	ldw	r2,-8(fp)
2002b018:	10bfffc4 	addi	r2,r2,-1
2002b01c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
2002b020:	e0bffd17 	ldw	r2,-12(fp)
2002b024:	10c00104 	addi	r3,r2,4
2002b028:	e0fffd15 	stw	r3,-12(fp)
2002b02c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
2002b030:	e0bffe17 	ldw	r2,-8(fp)
2002b034:	103ff71e 	bne	r2,zero,2002b014 <__flash_rwdata_start+0xffffd52c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
2002b038:	0001883a 	nop
2002b03c:	e037883a 	mov	sp,fp
2002b040:	df000017 	ldw	fp,0(sp)
2002b044:	dec00104 	addi	sp,sp,4
2002b048:	f800283a 	ret

2002b04c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
2002b04c:	defff904 	addi	sp,sp,-28
2002b050:	dfc00615 	stw	ra,24(sp)
2002b054:	df000515 	stw	fp,20(sp)
2002b058:	df000504 	addi	fp,sp,20
2002b05c:	2005883a 	mov	r2,r4
2002b060:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002b064:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002b068:	d0a04803 	ldbu	r2,-32480(gp)
2002b06c:	10803fcc 	andi	r2,r2,255
2002b070:	1000311e 	bne	r2,zero,2002b138 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
2002b074:	e0bfff0b 	ldhu	r2,-4(fp)
2002b078:	10003026 	beq	r2,zero,2002b13c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b07c:	0005303a 	rdctl	r2,status
2002b080:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b084:	e0fffe17 	ldw	r3,-8(fp)
2002b088:	00bfff84 	movi	r2,-2
2002b08c:	1884703a 	and	r2,r3,r2
2002b090:	1001703a 	wrctl	status,r2
  
  return context;
2002b094:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
2002b098:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
2002b09c:	d0a04917 	ldw	r2,-32476(gp)
2002b0a0:	10800d03 	ldbu	r2,52(r2)
2002b0a4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
2002b0a8:	e0fffd03 	ldbu	r3,-12(fp)
2002b0ac:	e13ffd03 	ldbu	r4,-12(fp)
2002b0b0:	d0a04644 	addi	r2,gp,-32487
2002b0b4:	2085883a 	add	r2,r4,r2
2002b0b8:	10800003 	ldbu	r2,0(r2)
2002b0bc:	1009883a 	mov	r4,r2
2002b0c0:	d0a04917 	ldw	r2,-32476(gp)
2002b0c4:	10800d43 	ldbu	r2,53(r2)
2002b0c8:	0084303a 	nor	r2,zero,r2
2002b0cc:	2084703a 	and	r2,r4,r2
2002b0d0:	1009883a 	mov	r4,r2
2002b0d4:	d0a04644 	addi	r2,gp,-32487
2002b0d8:	1885883a 	add	r2,r3,r2
2002b0dc:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
2002b0e0:	e0fffd03 	ldbu	r3,-12(fp)
2002b0e4:	d0a04644 	addi	r2,gp,-32487
2002b0e8:	1885883a 	add	r2,r3,r2
2002b0ec:	10800003 	ldbu	r2,0(r2)
2002b0f0:	10803fcc 	andi	r2,r2,255
2002b0f4:	1000071e 	bne	r2,zero,2002b114 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
2002b0f8:	d0a04917 	ldw	r2,-32476(gp)
2002b0fc:	10800d83 	ldbu	r2,54(r2)
2002b100:	0084303a 	nor	r2,zero,r2
2002b104:	1007883a 	mov	r3,r2
2002b108:	d0a04603 	ldbu	r2,-32488(gp)
2002b10c:	1884703a 	and	r2,r3,r2
2002b110:	d0a04605 	stb	r2,-32488(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
2002b114:	d0a04917 	ldw	r2,-32476(gp)
2002b118:	e0ffff0b 	ldhu	r3,-4(fp)
2002b11c:	10c00b8d 	sth	r3,46(r2)
2002b120:	e0bffb17 	ldw	r2,-20(fp)
2002b124:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b128:	e0bffc17 	ldw	r2,-16(fp)
2002b12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
2002b130:	00256b00 	call	200256b0 <OS_Sched>
2002b134:	00000106 	br	2002b13c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
2002b138:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
2002b13c:	e037883a 	mov	sp,fp
2002b140:	dfc00117 	ldw	ra,4(sp)
2002b144:	df000017 	ldw	fp,0(sp)
2002b148:	dec00204 	addi	sp,sp,8
2002b14c:	f800283a 	ret

2002b150 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
2002b150:	defff704 	addi	sp,sp,-36
2002b154:	dfc00815 	stw	ra,32(sp)
2002b158:	df000715 	stw	fp,28(sp)
2002b15c:	dc000615 	stw	r16,24(sp)
2002b160:	df000704 	addi	fp,sp,28
2002b164:	2011883a 	mov	r8,r4
2002b168:	2809883a 	mov	r4,r5
2002b16c:	3007883a 	mov	r3,r6
2002b170:	3805883a 	mov	r2,r7
2002b174:	e23ffb05 	stb	r8,-20(fp)
2002b178:	e13ffc05 	stb	r4,-16(fp)
2002b17c:	e0fffd05 	stb	r3,-12(fp)
2002b180:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
2002b184:	d0a04803 	ldbu	r2,-32480(gp)
2002b188:	10803fcc 	andi	r2,r2,255
2002b18c:	10000226 	beq	r2,zero,2002b198 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
2002b190:	00801544 	movi	r2,85
2002b194:	00003d06 	br	2002b28c <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
2002b198:	e0bffb03 	ldbu	r2,-20(fp)
2002b19c:	1000081e 	bne	r2,zero,2002b1c0 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
2002b1a0:	e0bffc03 	ldbu	r2,-16(fp)
2002b1a4:	1000061e 	bne	r2,zero,2002b1c0 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
2002b1a8:	e0bffd03 	ldbu	r2,-12(fp)
2002b1ac:	1000041e 	bne	r2,zero,2002b1c0 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
2002b1b0:	e0bffe0b 	ldhu	r2,-8(fp)
2002b1b4:	1000021e 	bne	r2,zero,2002b1c0 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
2002b1b8:	00801504 	movi	r2,84
2002b1bc:	00003306 	br	2002b28c <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
2002b1c0:	e0bffc03 	ldbu	r2,-16(fp)
2002b1c4:	10800f30 	cmpltui	r2,r2,60
2002b1c8:	1000021e 	bne	r2,zero,2002b1d4 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
2002b1cc:	00801444 	movi	r2,81
2002b1d0:	00002e06 	br	2002b28c <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
2002b1d4:	e0bffd03 	ldbu	r2,-12(fp)
2002b1d8:	10800f30 	cmpltui	r2,r2,60
2002b1dc:	1000021e 	bne	r2,zero,2002b1e8 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
2002b1e0:	00801484 	movi	r2,82
2002b1e4:	00002906 	br	2002b28c <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
2002b1e8:	e0bffe0b 	ldhu	r2,-8(fp)
2002b1ec:	1080fa30 	cmpltui	r2,r2,1000
2002b1f0:	1000021e 	bne	r2,zero,2002b1fc <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
2002b1f4:	008014c4 	movi	r2,83
2002b1f8:	00002406 	br	2002b28c <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
2002b1fc:	e0bffb03 	ldbu	r2,-20(fp)
2002b200:	10c38424 	muli	r3,r2,3600
2002b204:	e0bffc03 	ldbu	r2,-16(fp)
2002b208:	10800f24 	muli	r2,r2,60
2002b20c:	1887883a 	add	r3,r3,r2
2002b210:	e0bffd03 	ldbu	r2,-12(fp)
2002b214:	1885883a 	add	r2,r3,r2
2002b218:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
2002b21c:	e0bffe0b 	ldhu	r2,-8(fp)
2002b220:	1080fa24 	muli	r2,r2,1000
2002b224:	0140fa04 	movi	r5,1000
2002b228:	1009883a 	mov	r4,r2
2002b22c:	00230680 	call	20023068 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
2002b230:	8085883a 	add	r2,r16,r2
2002b234:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
2002b238:	e0bffa17 	ldw	r2,-24(fp)
2002b23c:	1004d43a 	srli	r2,r2,16
2002b240:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
2002b244:	e0bffa17 	ldw	r2,-24(fp)
2002b248:	10bfffcc 	andi	r2,r2,65535
2002b24c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
2002b250:	e0bffa17 	ldw	r2,-24(fp)
2002b254:	10bfffcc 	andi	r2,r2,65535
2002b258:	1009883a 	mov	r4,r2
2002b25c:	002b04c0 	call	2002b04c <OSTimeDly>
    while (loops > 0) {
2002b260:	00000706 	br	2002b280 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
2002b264:	01200014 	movui	r4,32768
2002b268:	002b04c0 	call	2002b04c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
2002b26c:	01200014 	movui	r4,32768
2002b270:	002b04c0 	call	2002b04c <OSTimeDly>
        loops--;
2002b274:	e0bff90b 	ldhu	r2,-28(fp)
2002b278:	10bfffc4 	addi	r2,r2,-1
2002b27c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
2002b280:	e0bff90b 	ldhu	r2,-28(fp)
2002b284:	103ff71e 	bne	r2,zero,2002b264 <__flash_rwdata_start+0xffffd77c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
2002b288:	0005883a 	mov	r2,zero
}
2002b28c:	e6ffff04 	addi	sp,fp,-4
2002b290:	dfc00217 	ldw	ra,8(sp)
2002b294:	df000117 	ldw	fp,4(sp)
2002b298:	dc000017 	ldw	r16,0(sp)
2002b29c:	dec00304 	addi	sp,sp,12
2002b2a0:	f800283a 	ret

2002b2a4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
2002b2a4:	defff504 	addi	sp,sp,-44
2002b2a8:	dfc00a15 	stw	ra,40(sp)
2002b2ac:	df000915 	stw	fp,36(sp)
2002b2b0:	df000904 	addi	fp,sp,36
2002b2b4:	2005883a 	mov	r2,r4
2002b2b8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
2002b2bc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
2002b2c0:	e0bfff03 	ldbu	r2,-4(fp)
2002b2c4:	10800530 	cmpltui	r2,r2,20
2002b2c8:	1000021e 	bne	r2,zero,2002b2d4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
2002b2cc:	00800a84 	movi	r2,42
2002b2d0:	00006406 	br	2002b464 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b2d4:	0005303a 	rdctl	r2,status
2002b2d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b2dc:	e0fffe17 	ldw	r3,-8(fp)
2002b2e0:	00bfff84 	movi	r2,-2
2002b2e4:	1884703a 	and	r2,r3,r2
2002b2e8:	1001703a 	wrctl	status,r2
  
  return context;
2002b2ec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
2002b2f0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
2002b2f4:	e0ffff03 	ldbu	r3,-4(fp)
2002b2f8:	00800074 	movhi	r2,1
2002b2fc:	10a3c304 	addi	r2,r2,-28916
2002b300:	18c7883a 	add	r3,r3,r3
2002b304:	18c7883a 	add	r3,r3,r3
2002b308:	10c5883a 	add	r2,r2,r3
2002b30c:	10800017 	ldw	r2,0(r2)
2002b310:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
2002b314:	e0bff917 	ldw	r2,-28(fp)
2002b318:	1000061e 	bne	r2,zero,2002b334 <OSTimeDlyResume+0x90>
2002b31c:	e0bff717 	ldw	r2,-36(fp)
2002b320:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b324:	e0bff817 	ldw	r2,-32(fp)
2002b328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
2002b32c:	008010c4 	movi	r2,67
2002b330:	00004c06 	br	2002b464 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
2002b334:	e0bff917 	ldw	r2,-28(fp)
2002b338:	10800058 	cmpnei	r2,r2,1
2002b33c:	1000061e 	bne	r2,zero,2002b358 <OSTimeDlyResume+0xb4>
2002b340:	e0bff717 	ldw	r2,-36(fp)
2002b344:	e0bffa15 	stw	r2,-24(fp)
2002b348:	e0bffa17 	ldw	r2,-24(fp)
2002b34c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
2002b350:	008010c4 	movi	r2,67
2002b354:	00004306 	br	2002b464 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
2002b358:	e0bff917 	ldw	r2,-28(fp)
2002b35c:	10800b8b 	ldhu	r2,46(r2)
2002b360:	10bfffcc 	andi	r2,r2,65535
2002b364:	1000061e 	bne	r2,zero,2002b380 <OSTimeDlyResume+0xdc>
2002b368:	e0bff717 	ldw	r2,-36(fp)
2002b36c:	e0bffb15 	stw	r2,-20(fp)
2002b370:	e0bffb17 	ldw	r2,-20(fp)
2002b374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
2002b378:	00801404 	movi	r2,80
2002b37c:	00003906 	br	2002b464 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
2002b380:	e0bff917 	ldw	r2,-28(fp)
2002b384:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
2002b388:	e0bff917 	ldw	r2,-28(fp)
2002b38c:	10800c03 	ldbu	r2,48(r2)
2002b390:	10803fcc 	andi	r2,r2,255
2002b394:	10800dcc 	andi	r2,r2,55
2002b398:	10000b26 	beq	r2,zero,2002b3c8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
2002b39c:	e0bff917 	ldw	r2,-28(fp)
2002b3a0:	10c00c03 	ldbu	r3,48(r2)
2002b3a4:	00bff204 	movi	r2,-56
2002b3a8:	1884703a 	and	r2,r3,r2
2002b3ac:	1007883a 	mov	r3,r2
2002b3b0:	e0bff917 	ldw	r2,-28(fp)
2002b3b4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
2002b3b8:	e0bff917 	ldw	r2,-28(fp)
2002b3bc:	00c00044 	movi	r3,1
2002b3c0:	10c00c45 	stb	r3,49(r2)
2002b3c4:	00000206 	br	2002b3d0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
2002b3c8:	e0bff917 	ldw	r2,-28(fp)
2002b3cc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
2002b3d0:	e0bff917 	ldw	r2,-28(fp)
2002b3d4:	10800c03 	ldbu	r2,48(r2)
2002b3d8:	10803fcc 	andi	r2,r2,255
2002b3dc:	1080020c 	andi	r2,r2,8
2002b3e0:	10001b1e 	bne	r2,zero,2002b450 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
2002b3e4:	e0bff917 	ldw	r2,-28(fp)
2002b3e8:	10c00d83 	ldbu	r3,54(r2)
2002b3ec:	d0a04603 	ldbu	r2,-32488(gp)
2002b3f0:	1884b03a 	or	r2,r3,r2
2002b3f4:	d0a04605 	stb	r2,-32488(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
2002b3f8:	e0bff917 	ldw	r2,-28(fp)
2002b3fc:	10800d03 	ldbu	r2,52(r2)
2002b400:	10c03fcc 	andi	r3,r2,255
2002b404:	e0bff917 	ldw	r2,-28(fp)
2002b408:	10800d03 	ldbu	r2,52(r2)
2002b40c:	11003fcc 	andi	r4,r2,255
2002b410:	d0a04644 	addi	r2,gp,-32487
2002b414:	2085883a 	add	r2,r4,r2
2002b418:	11000003 	ldbu	r4,0(r2)
2002b41c:	e0bff917 	ldw	r2,-28(fp)
2002b420:	10800d43 	ldbu	r2,53(r2)
2002b424:	2084b03a 	or	r2,r4,r2
2002b428:	1009883a 	mov	r4,r2
2002b42c:	d0a04644 	addi	r2,gp,-32487
2002b430:	1885883a 	add	r2,r3,r2
2002b434:	11000005 	stb	r4,0(r2)
2002b438:	e0bff717 	ldw	r2,-36(fp)
2002b43c:	e0bffc15 	stw	r2,-16(fp)
2002b440:	e0bffc17 	ldw	r2,-16(fp)
2002b444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
2002b448:	00256b00 	call	200256b0 <OS_Sched>
2002b44c:	00000406 	br	2002b460 <OSTimeDlyResume+0x1bc>
2002b450:	e0bff717 	ldw	r2,-36(fp)
2002b454:	e0bffd15 	stw	r2,-12(fp)
2002b458:	e0bffd17 	ldw	r2,-12(fp)
2002b45c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
2002b460:	0005883a 	mov	r2,zero
}
2002b464:	e037883a 	mov	sp,fp
2002b468:	dfc00117 	ldw	ra,4(sp)
2002b46c:	df000017 	ldw	fp,0(sp)
2002b470:	dec00204 	addi	sp,sp,8
2002b474:	f800283a 	ret

2002b478 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
2002b478:	defffb04 	addi	sp,sp,-20
2002b47c:	df000415 	stw	fp,16(sp)
2002b480:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002b484:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b488:	0005303a 	rdctl	r2,status
2002b48c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b490:	e0fffe17 	ldw	r3,-8(fp)
2002b494:	00bfff84 	movi	r2,-2
2002b498:	1884703a 	and	r2,r3,r2
2002b49c:	1001703a 	wrctl	status,r2
  
  return context;
2002b4a0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
2002b4a4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
2002b4a8:	d0a04a17 	ldw	r2,-32472(gp)
2002b4ac:	e0bffd15 	stw	r2,-12(fp)
2002b4b0:	e0bffc17 	ldw	r2,-16(fp)
2002b4b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b4b8:	e0bfff17 	ldw	r2,-4(fp)
2002b4bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
2002b4c0:	e0bffd17 	ldw	r2,-12(fp)
}
2002b4c4:	e037883a 	mov	sp,fp
2002b4c8:	df000017 	ldw	fp,0(sp)
2002b4cc:	dec00104 	addi	sp,sp,4
2002b4d0:	f800283a 	ret

2002b4d4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
2002b4d4:	defffb04 	addi	sp,sp,-20
2002b4d8:	df000415 	stw	fp,16(sp)
2002b4dc:	df000404 	addi	fp,sp,16
2002b4e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
2002b4e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b4e8:	0005303a 	rdctl	r2,status
2002b4ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b4f0:	e0fffd17 	ldw	r3,-12(fp)
2002b4f4:	00bfff84 	movi	r2,-2
2002b4f8:	1884703a 	and	r2,r3,r2
2002b4fc:	1001703a 	wrctl	status,r2
  
  return context;
2002b500:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
2002b504:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
2002b508:	e0bfff17 	ldw	r2,-4(fp)
2002b50c:	d0a04a15 	stw	r2,-32472(gp)
2002b510:	e0bffc17 	ldw	r2,-16(fp)
2002b514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b518:	e0bffe17 	ldw	r2,-8(fp)
2002b51c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
2002b520:	0001883a 	nop
2002b524:	e037883a 	mov	sp,fp
2002b528:	df000017 	ldw	fp,0(sp)
2002b52c:	dec00104 	addi	sp,sp,4
2002b530:	f800283a 	ret

2002b534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2002b534:	defffd04 	addi	sp,sp,-12
2002b538:	dfc00215 	stw	ra,8(sp)
2002b53c:	df000115 	stw	fp,4(sp)
2002b540:	df000104 	addi	fp,sp,4
2002b544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2002b548:	d1600604 	addi	r5,gp,-32744
2002b54c:	e13fff17 	ldw	r4,-4(fp)
2002b550:	002c5d40 	call	2002c5d4 <alt_dev_llist_insert>
}
2002b554:	e037883a 	mov	sp,fp
2002b558:	dfc00117 	ldw	ra,4(sp)
2002b55c:	df000017 	ldw	fp,0(sp)
2002b560:	dec00204 	addi	sp,sp,8
2002b564:	f800283a 	ret

2002b568 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2002b568:	defffd04 	addi	sp,sp,-12
2002b56c:	dfc00215 	stw	ra,8(sp)
2002b570:	df000115 	stw	fp,4(sp)
2002b574:	df000104 	addi	fp,sp,4
2002b578:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
2002b57c:	002cf440 	call	2002cf44 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2002b580:	00800044 	movi	r2,1
2002b584:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2002b588:	0001883a 	nop
2002b58c:	e037883a 	mov	sp,fp
2002b590:	dfc00117 	ldw	ra,4(sp)
2002b594:	df000017 	ldw	fp,0(sp)
2002b598:	dec00204 	addi	sp,sp,8
2002b59c:	f800283a 	ret

2002b5a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2002b5a0:	defffe04 	addi	sp,sp,-8
2002b5a4:	dfc00115 	stw	ra,4(sp)
2002b5a8:	df000015 	stw	fp,0(sp)
2002b5ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
2002b5b0:	01c0fa04 	movi	r7,1000
2002b5b4:	000d883a 	mov	r6,zero
2002b5b8:	000b883a 	mov	r5,zero
2002b5bc:	01080134 	movhi	r4,8196
2002b5c0:	21040004 	addi	r4,r4,4096
2002b5c4:	002c3a80 	call	2002c3a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2002b5c8:	01800044 	movi	r6,1
2002b5cc:	000b883a 	mov	r5,zero
2002b5d0:	01000034 	movhi	r4,0
2002b5d4:	2102e304 	addi	r4,r4,2956
2002b5d8:	002b7680 	call	2002b768 <altera_avalon_jtag_uart_init>
2002b5dc:	01000034 	movhi	r4,0
2002b5e0:	2102d904 	addi	r4,r4,2916
2002b5e4:	002b5340 	call	2002b534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
2002b5e8:	0001883a 	nop
}
2002b5ec:	0001883a 	nop
2002b5f0:	e037883a 	mov	sp,fp
2002b5f4:	dfc00117 	ldw	ra,4(sp)
2002b5f8:	df000017 	ldw	fp,0(sp)
2002b5fc:	dec00204 	addi	sp,sp,8
2002b600:	f800283a 	ret

2002b604 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2002b604:	defffa04 	addi	sp,sp,-24
2002b608:	dfc00515 	stw	ra,20(sp)
2002b60c:	df000415 	stw	fp,16(sp)
2002b610:	df000404 	addi	fp,sp,16
2002b614:	e13ffd15 	stw	r4,-12(fp)
2002b618:	e17ffe15 	stw	r5,-8(fp)
2002b61c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002b620:	e0bffd17 	ldw	r2,-12(fp)
2002b624:	10800017 	ldw	r2,0(r2)
2002b628:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2002b62c:	e0bffc17 	ldw	r2,-16(fp)
2002b630:	10c00a04 	addi	r3,r2,40
2002b634:	e0bffd17 	ldw	r2,-12(fp)
2002b638:	10800217 	ldw	r2,8(r2)
2002b63c:	100f883a 	mov	r7,r2
2002b640:	e1bfff17 	ldw	r6,-4(fp)
2002b644:	e17ffe17 	ldw	r5,-8(fp)
2002b648:	1809883a 	mov	r4,r3
2002b64c:	002bdb00 	call	2002bdb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2002b650:	e037883a 	mov	sp,fp
2002b654:	dfc00117 	ldw	ra,4(sp)
2002b658:	df000017 	ldw	fp,0(sp)
2002b65c:	dec00204 	addi	sp,sp,8
2002b660:	f800283a 	ret

2002b664 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2002b664:	defffa04 	addi	sp,sp,-24
2002b668:	dfc00515 	stw	ra,20(sp)
2002b66c:	df000415 	stw	fp,16(sp)
2002b670:	df000404 	addi	fp,sp,16
2002b674:	e13ffd15 	stw	r4,-12(fp)
2002b678:	e17ffe15 	stw	r5,-8(fp)
2002b67c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002b680:	e0bffd17 	ldw	r2,-12(fp)
2002b684:	10800017 	ldw	r2,0(r2)
2002b688:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2002b68c:	e0bffc17 	ldw	r2,-16(fp)
2002b690:	10c00a04 	addi	r3,r2,40
2002b694:	e0bffd17 	ldw	r2,-12(fp)
2002b698:	10800217 	ldw	r2,8(r2)
2002b69c:	100f883a 	mov	r7,r2
2002b6a0:	e1bfff17 	ldw	r6,-4(fp)
2002b6a4:	e17ffe17 	ldw	r5,-8(fp)
2002b6a8:	1809883a 	mov	r4,r3
2002b6ac:	002c06c0 	call	2002c06c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2002b6b0:	e037883a 	mov	sp,fp
2002b6b4:	dfc00117 	ldw	ra,4(sp)
2002b6b8:	df000017 	ldw	fp,0(sp)
2002b6bc:	dec00204 	addi	sp,sp,8
2002b6c0:	f800283a 	ret

2002b6c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2002b6c4:	defffc04 	addi	sp,sp,-16
2002b6c8:	dfc00315 	stw	ra,12(sp)
2002b6cc:	df000215 	stw	fp,8(sp)
2002b6d0:	df000204 	addi	fp,sp,8
2002b6d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002b6d8:	e0bfff17 	ldw	r2,-4(fp)
2002b6dc:	10800017 	ldw	r2,0(r2)
2002b6e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2002b6e4:	e0bffe17 	ldw	r2,-8(fp)
2002b6e8:	10c00a04 	addi	r3,r2,40
2002b6ec:	e0bfff17 	ldw	r2,-4(fp)
2002b6f0:	10800217 	ldw	r2,8(r2)
2002b6f4:	100b883a 	mov	r5,r2
2002b6f8:	1809883a 	mov	r4,r3
2002b6fc:	002bc580 	call	2002bc58 <altera_avalon_jtag_uart_close>
}
2002b700:	e037883a 	mov	sp,fp
2002b704:	dfc00117 	ldw	ra,4(sp)
2002b708:	df000017 	ldw	fp,0(sp)
2002b70c:	dec00204 	addi	sp,sp,8
2002b710:	f800283a 	ret

2002b714 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2002b714:	defffa04 	addi	sp,sp,-24
2002b718:	dfc00515 	stw	ra,20(sp)
2002b71c:	df000415 	stw	fp,16(sp)
2002b720:	df000404 	addi	fp,sp,16
2002b724:	e13ffd15 	stw	r4,-12(fp)
2002b728:	e17ffe15 	stw	r5,-8(fp)
2002b72c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2002b730:	e0bffd17 	ldw	r2,-12(fp)
2002b734:	10800017 	ldw	r2,0(r2)
2002b738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2002b73c:	e0bffc17 	ldw	r2,-16(fp)
2002b740:	10800a04 	addi	r2,r2,40
2002b744:	e1bfff17 	ldw	r6,-4(fp)
2002b748:	e17ffe17 	ldw	r5,-8(fp)
2002b74c:	1009883a 	mov	r4,r2
2002b750:	002bcc00 	call	2002bcc0 <altera_avalon_jtag_uart_ioctl>
}
2002b754:	e037883a 	mov	sp,fp
2002b758:	dfc00117 	ldw	ra,4(sp)
2002b75c:	df000017 	ldw	fp,0(sp)
2002b760:	dec00204 	addi	sp,sp,8
2002b764:	f800283a 	ret

2002b768 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2002b768:	defff104 	addi	sp,sp,-60
2002b76c:	dfc00e15 	stw	ra,56(sp)
2002b770:	df000d15 	stw	fp,52(sp)
2002b774:	df000d04 	addi	fp,sp,52
2002b778:	e13ff915 	stw	r4,-28(fp)
2002b77c:	e17ffa15 	stw	r5,-24(fp)
2002b780:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
2002b784:	e0bff917 	ldw	r2,-28(fp)
2002b788:	10800c04 	addi	r2,r2,48
2002b78c:	e0bff415 	stw	r2,-48(fp)
2002b790:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
2002b794:	e0bff80b 	ldhu	r2,-32(fp)
2002b798:	e0fff884 	addi	r3,fp,-30
2002b79c:	180b883a 	mov	r5,r3
2002b7a0:	1009883a 	mov	r4,r2
2002b7a4:	002621c0 	call	2002621c <OSFlagCreate>
2002b7a8:	1007883a 	mov	r3,r2
2002b7ac:	e0bff417 	ldw	r2,-48(fp)
2002b7b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
2002b7b4:	e0bff917 	ldw	r2,-28(fp)
2002b7b8:	10800a04 	addi	r2,r2,40
2002b7bc:	e0bff515 	stw	r2,-44(fp)
2002b7c0:	00800044 	movi	r2,1
2002b7c4:	e0bff78d 	sth	r2,-34(fp)
2002b7c8:	e0bff78b 	ldhu	r2,-34(fp)
2002b7cc:	1009883a 	mov	r4,r2
2002b7d0:	0028f300 	call	20028f30 <OSSemCreate>
2002b7d4:	1007883a 	mov	r3,r2
2002b7d8:	e0bff517 	ldw	r2,-44(fp)
2002b7dc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
2002b7e0:	e0bff917 	ldw	r2,-28(fp)
2002b7e4:	10800b04 	addi	r2,r2,44
2002b7e8:	e0bff615 	stw	r2,-40(fp)
2002b7ec:	00800044 	movi	r2,1
2002b7f0:	e0bff70d 	sth	r2,-36(fp)
2002b7f4:	e0bff70b 	ldhu	r2,-36(fp)
2002b7f8:	1009883a 	mov	r4,r2
2002b7fc:	0028f300 	call	20028f30 <OSSemCreate>
2002b800:	1007883a 	mov	r3,r2
2002b804:	e0bff617 	ldw	r2,-40(fp)
2002b808:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002b80c:	e0bff917 	ldw	r2,-28(fp)
2002b810:	00c00044 	movi	r3,1
2002b814:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2002b818:	e0bff917 	ldw	r2,-28(fp)
2002b81c:	10800017 	ldw	r2,0(r2)
2002b820:	10800104 	addi	r2,r2,4
2002b824:	1007883a 	mov	r3,r2
2002b828:	e0bff917 	ldw	r2,-28(fp)
2002b82c:	10800817 	ldw	r2,32(r2)
2002b830:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2002b834:	e0bffa17 	ldw	r2,-24(fp)
2002b838:	e0fffb17 	ldw	r3,-20(fp)
2002b83c:	d8000015 	stw	zero,0(sp)
2002b840:	e1fff917 	ldw	r7,-28(fp)
2002b844:	018800f4 	movhi	r6,8195
2002b848:	31ae2c04 	addi	r6,r6,-18256
2002b84c:	180b883a 	mov	r5,r3
2002b850:	1009883a 	mov	r4,r2
2002b854:	002c76c0 	call	2002c76c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2002b858:	e0bff917 	ldw	r2,-28(fp)
2002b85c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2002b860:	e0bff917 	ldw	r2,-28(fp)
2002b864:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002b868:	d0e04f17 	ldw	r3,-32452(gp)
2002b86c:	e1fff917 	ldw	r7,-28(fp)
2002b870:	018800f4 	movhi	r6,8195
2002b874:	31aed504 	addi	r6,r6,-17580
2002b878:	180b883a 	mov	r5,r3
2002b87c:	1009883a 	mov	r4,r2
2002b880:	002c4240 	call	2002c424 <alt_alarm_start>
2002b884:	1000040e 	bge	r2,zero,2002b898 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2002b888:	e0fff917 	ldw	r3,-28(fp)
2002b88c:	00a00034 	movhi	r2,32768
2002b890:	10bfffc4 	addi	r2,r2,-1
2002b894:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2002b898:	0001883a 	nop
2002b89c:	e037883a 	mov	sp,fp
2002b8a0:	dfc00117 	ldw	ra,4(sp)
2002b8a4:	df000017 	ldw	fp,0(sp)
2002b8a8:	dec00204 	addi	sp,sp,8
2002b8ac:	f800283a 	ret

2002b8b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2002b8b0:	defff204 	addi	sp,sp,-56
2002b8b4:	dfc00d15 	stw	ra,52(sp)
2002b8b8:	df000c15 	stw	fp,48(sp)
2002b8bc:	df000c04 	addi	fp,sp,48
2002b8c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2002b8c4:	e0bfff17 	ldw	r2,-4(fp)
2002b8c8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
2002b8cc:	e0bff617 	ldw	r2,-40(fp)
2002b8d0:	10800017 	ldw	r2,0(r2)
2002b8d4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002b8d8:	e0bff717 	ldw	r2,-36(fp)
2002b8dc:	10800104 	addi	r2,r2,4
2002b8e0:	10800037 	ldwio	r2,0(r2)
2002b8e4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2002b8e8:	e0bff817 	ldw	r2,-32(fp)
2002b8ec:	1080c00c 	andi	r2,r2,768
2002b8f0:	10009126 	beq	r2,zero,2002bb38 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2002b8f4:	e0bff817 	ldw	r2,-32(fp)
2002b8f8:	1080400c 	andi	r2,r2,256
2002b8fc:	10004726 	beq	r2,zero,2002ba1c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2002b900:	00800074 	movhi	r2,1
2002b904:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b908:	e0bff617 	ldw	r2,-40(fp)
2002b90c:	10800d17 	ldw	r2,52(r2)
2002b910:	10800044 	addi	r2,r2,1
2002b914:	1081ffcc 	andi	r2,r2,2047
2002b918:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
2002b91c:	e0bff617 	ldw	r2,-40(fp)
2002b920:	10c00e17 	ldw	r3,56(r2)
2002b924:	e0bff917 	ldw	r2,-28(fp)
2002b928:	18802726 	beq	r3,r2,2002b9c8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2002b92c:	e0bff717 	ldw	r2,-36(fp)
2002b930:	10800037 	ldwio	r2,0(r2)
2002b934:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2002b938:	e0bff417 	ldw	r2,-48(fp)
2002b93c:	10a0000c 	andi	r2,r2,32768
2002b940:	10002326 	beq	r2,zero,2002b9d0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2002b944:	e0bff617 	ldw	r2,-40(fp)
2002b948:	10800d17 	ldw	r2,52(r2)
2002b94c:	e0fff417 	ldw	r3,-48(fp)
2002b950:	1809883a 	mov	r4,r3
2002b954:	e0fff617 	ldw	r3,-40(fp)
2002b958:	1885883a 	add	r2,r3,r2
2002b95c:	10801104 	addi	r2,r2,68
2002b960:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b964:	e0bff617 	ldw	r2,-40(fp)
2002b968:	10800d17 	ldw	r2,52(r2)
2002b96c:	10800044 	addi	r2,r2,1
2002b970:	10c1ffcc 	andi	r3,r2,2047
2002b974:	e0bff617 	ldw	r2,-40(fp)
2002b978:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
2002b97c:	e0bff617 	ldw	r2,-40(fp)
2002b980:	10800c17 	ldw	r2,48(r2)
2002b984:	e0bffb15 	stw	r2,-20(fp)
2002b988:	00800044 	movi	r2,1
2002b98c:	e0bffc0d 	sth	r2,-16(fp)
2002b990:	00800044 	movi	r2,1
2002b994:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
2002b998:	d0a03a43 	ldbu	r2,-32535(gp)
2002b99c:	10803fcc 	andi	r2,r2,255
2002b9a0:	103fd926 	beq	r2,zero,2002b908 <__flash_rwdata_start+0xffffde20>
  {
    OSFlagPost (group, flags, opt, &err);
2002b9a4:	e0bffc0b 	ldhu	r2,-16(fp)
2002b9a8:	e0fffc83 	ldbu	r3,-14(fp)
2002b9ac:	e13ffdc4 	addi	r4,fp,-9
2002b9b0:	200f883a 	mov	r7,r4
2002b9b4:	180d883a 	mov	r6,r3
2002b9b8:	100b883a 	mov	r5,r2
2002b9bc:	e13ffb17 	ldw	r4,-20(fp)
2002b9c0:	0026df80 	call	20026df8 <OSFlagPost>
      }
2002b9c4:	003fd006 	br	2002b908 <__flash_rwdata_start+0xffffde20>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
2002b9c8:	0001883a 	nop
2002b9cc:	00000106 	br	2002b9d4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
2002b9d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2002b9d4:	e0bff417 	ldw	r2,-48(fp)
2002b9d8:	10bfffec 	andhi	r2,r2,65535
2002b9dc:	10000f26 	beq	r2,zero,2002ba1c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002b9e0:	e0bff617 	ldw	r2,-40(fp)
2002b9e4:	10c00817 	ldw	r3,32(r2)
2002b9e8:	00bfff84 	movi	r2,-2
2002b9ec:	1886703a 	and	r3,r3,r2
2002b9f0:	e0bff617 	ldw	r2,-40(fp)
2002b9f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2002b9f8:	e0bff717 	ldw	r2,-36(fp)
2002b9fc:	10800104 	addi	r2,r2,4
2002ba00:	1007883a 	mov	r3,r2
2002ba04:	e0bff617 	ldw	r2,-40(fp)
2002ba08:	10800817 	ldw	r2,32(r2)
2002ba0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002ba10:	e0bff717 	ldw	r2,-36(fp)
2002ba14:	10800104 	addi	r2,r2,4
2002ba18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2002ba1c:	e0bff817 	ldw	r2,-32(fp)
2002ba20:	1080800c 	andi	r2,r2,512
2002ba24:	103fac26 	beq	r2,zero,2002b8d8 <__flash_rwdata_start+0xffffddf0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2002ba28:	e0bff817 	ldw	r2,-32(fp)
2002ba2c:	1004d43a 	srli	r2,r2,16
2002ba30:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2002ba34:	00002606 	br	2002bad0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2002ba38:	e0bff717 	ldw	r2,-36(fp)
2002ba3c:	e0fff617 	ldw	r3,-40(fp)
2002ba40:	18c01017 	ldw	r3,64(r3)
2002ba44:	e13ff617 	ldw	r4,-40(fp)
2002ba48:	20c7883a 	add	r3,r4,r3
2002ba4c:	18c21104 	addi	r3,r3,2116
2002ba50:	18c00003 	ldbu	r3,0(r3)
2002ba54:	18c03fcc 	andi	r3,r3,255
2002ba58:	18c0201c 	xori	r3,r3,128
2002ba5c:	18ffe004 	addi	r3,r3,-128
2002ba60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002ba64:	e0bff617 	ldw	r2,-40(fp)
2002ba68:	10801017 	ldw	r2,64(r2)
2002ba6c:	10800044 	addi	r2,r2,1
2002ba70:	10c1ffcc 	andi	r3,r2,2047
2002ba74:	e0bff617 	ldw	r2,-40(fp)
2002ba78:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
2002ba7c:	e0bff617 	ldw	r2,-40(fp)
2002ba80:	10800c17 	ldw	r2,48(r2)
2002ba84:	e0bffa15 	stw	r2,-24(fp)
2002ba88:	00800084 	movi	r2,2
2002ba8c:	e0bffd0d 	sth	r2,-12(fp)
2002ba90:	00800044 	movi	r2,1
2002ba94:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
2002ba98:	d0a03a43 	ldbu	r2,-32535(gp)
2002ba9c:	10803fcc 	andi	r2,r2,255
2002baa0:	10000826 	beq	r2,zero,2002bac4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
2002baa4:	e0bffd0b 	ldhu	r2,-12(fp)
2002baa8:	e0fffd83 	ldbu	r3,-10(fp)
2002baac:	e13ffe04 	addi	r4,fp,-8
2002bab0:	200f883a 	mov	r7,r4
2002bab4:	180d883a 	mov	r6,r3
2002bab8:	100b883a 	mov	r5,r2
2002babc:	e13ffa17 	ldw	r4,-24(fp)
2002bac0:	0026df80 	call	20026df8 <OSFlagPost>

        space--;
2002bac4:	e0bff517 	ldw	r2,-44(fp)
2002bac8:	10bfffc4 	addi	r2,r2,-1
2002bacc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2002bad0:	e0bff517 	ldw	r2,-44(fp)
2002bad4:	10000526 	beq	r2,zero,2002baec <altera_avalon_jtag_uart_irq+0x23c>
2002bad8:	e0bff617 	ldw	r2,-40(fp)
2002badc:	10c01017 	ldw	r3,64(r2)
2002bae0:	e0bff617 	ldw	r2,-40(fp)
2002bae4:	10800f17 	ldw	r2,60(r2)
2002bae8:	18bfd31e 	bne	r3,r2,2002ba38 <__flash_rwdata_start+0xffffdf50>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2002baec:	e0bff517 	ldw	r2,-44(fp)
2002baf0:	103f7926 	beq	r2,zero,2002b8d8 <__flash_rwdata_start+0xffffddf0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002baf4:	e0bff617 	ldw	r2,-40(fp)
2002baf8:	10c00817 	ldw	r3,32(r2)
2002bafc:	00bfff44 	movi	r2,-3
2002bb00:	1886703a 	and	r3,r3,r2
2002bb04:	e0bff617 	ldw	r2,-40(fp)
2002bb08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002bb0c:	e0bff617 	ldw	r2,-40(fp)
2002bb10:	10800017 	ldw	r2,0(r2)
2002bb14:	10800104 	addi	r2,r2,4
2002bb18:	1007883a 	mov	r3,r2
2002bb1c:	e0bff617 	ldw	r2,-40(fp)
2002bb20:	10800817 	ldw	r2,32(r2)
2002bb24:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002bb28:	e0bff717 	ldw	r2,-36(fp)
2002bb2c:	10800104 	addi	r2,r2,4
2002bb30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2002bb34:	003f6806 	br	2002b8d8 <__flash_rwdata_start+0xffffddf0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
2002bb38:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
2002bb3c:	0001883a 	nop
2002bb40:	e037883a 	mov	sp,fp
2002bb44:	dfc00117 	ldw	ra,4(sp)
2002bb48:	df000017 	ldw	fp,0(sp)
2002bb4c:	dec00204 	addi	sp,sp,8
2002bb50:	f800283a 	ret

2002bb54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2002bb54:	defff904 	addi	sp,sp,-28
2002bb58:	dfc00615 	stw	ra,24(sp)
2002bb5c:	df000515 	stw	fp,20(sp)
2002bb60:	df000504 	addi	fp,sp,20
2002bb64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2002bb68:	e0bfff17 	ldw	r2,-4(fp)
2002bb6c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2002bb70:	e0bffb17 	ldw	r2,-20(fp)
2002bb74:	10800017 	ldw	r2,0(r2)
2002bb78:	10800104 	addi	r2,r2,4
2002bb7c:	10800037 	ldwio	r2,0(r2)
2002bb80:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2002bb84:	e0bffc17 	ldw	r2,-16(fp)
2002bb88:	1081000c 	andi	r2,r2,1024
2002bb8c:	10000b26 	beq	r2,zero,2002bbbc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2002bb90:	e0bffb17 	ldw	r2,-20(fp)
2002bb94:	10800017 	ldw	r2,0(r2)
2002bb98:	10800104 	addi	r2,r2,4
2002bb9c:	1007883a 	mov	r3,r2
2002bba0:	e0bffb17 	ldw	r2,-20(fp)
2002bba4:	10800817 	ldw	r2,32(r2)
2002bba8:	10810014 	ori	r2,r2,1024
2002bbac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2002bbb0:	e0bffb17 	ldw	r2,-20(fp)
2002bbb4:	10000915 	stw	zero,36(r2)
2002bbb8:	00002106 	br	2002bc40 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2002bbbc:	e0bffb17 	ldw	r2,-20(fp)
2002bbc0:	10c00917 	ldw	r3,36(r2)
2002bbc4:	00a00034 	movhi	r2,32768
2002bbc8:	10bfff04 	addi	r2,r2,-4
2002bbcc:	10c01c36 	bltu	r2,r3,2002bc40 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
2002bbd0:	e0bffb17 	ldw	r2,-20(fp)
2002bbd4:	10800917 	ldw	r2,36(r2)
2002bbd8:	10c00044 	addi	r3,r2,1
2002bbdc:	e0bffb17 	ldw	r2,-20(fp)
2002bbe0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
2002bbe4:	e0bffb17 	ldw	r2,-20(fp)
2002bbe8:	10c00917 	ldw	r3,36(r2)
2002bbec:	e0bffb17 	ldw	r2,-20(fp)
2002bbf0:	10800117 	ldw	r2,4(r2)
2002bbf4:	18801236 	bltu	r3,r2,2002bc40 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
2002bbf8:	e0bffb17 	ldw	r2,-20(fp)
2002bbfc:	10800c17 	ldw	r2,48(r2)
2002bc00:	e0bffd15 	stw	r2,-12(fp)
2002bc04:	00800104 	movi	r2,4
2002bc08:	e0bffe0d 	sth	r2,-8(fp)
2002bc0c:	00800044 	movi	r2,1
2002bc10:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
2002bc14:	d0a03a43 	ldbu	r2,-32535(gp)
2002bc18:	10803fcc 	andi	r2,r2,255
2002bc1c:	10000826 	beq	r2,zero,2002bc40 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
2002bc20:	e0bffe0b 	ldhu	r2,-8(fp)
2002bc24:	e0fffe83 	ldbu	r3,-6(fp)
2002bc28:	e13ffec4 	addi	r4,fp,-5
2002bc2c:	200f883a 	mov	r7,r4
2002bc30:	180d883a 	mov	r6,r3
2002bc34:	100b883a 	mov	r5,r2
2002bc38:	e13ffd17 	ldw	r4,-12(fp)
2002bc3c:	0026df80 	call	20026df8 <OSFlagPost>
2002bc40:	d0a04f17 	ldw	r2,-32452(gp)
    }
  }

  return alt_ticks_per_second();
}
2002bc44:	e037883a 	mov	sp,fp
2002bc48:	dfc00117 	ldw	ra,4(sp)
2002bc4c:	df000017 	ldw	fp,0(sp)
2002bc50:	dec00204 	addi	sp,sp,8
2002bc54:	f800283a 	ret

2002bc58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2002bc58:	defffd04 	addi	sp,sp,-12
2002bc5c:	df000215 	stw	fp,8(sp)
2002bc60:	df000204 	addi	fp,sp,8
2002bc64:	e13ffe15 	stw	r4,-8(fp)
2002bc68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002bc6c:	00000506 	br	2002bc84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2002bc70:	e0bfff17 	ldw	r2,-4(fp)
2002bc74:	1090000c 	andi	r2,r2,16384
2002bc78:	10000226 	beq	r2,zero,2002bc84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2002bc7c:	00bffd44 	movi	r2,-11
2002bc80:	00000b06 	br	2002bcb0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002bc84:	e0bffe17 	ldw	r2,-8(fp)
2002bc88:	10c01017 	ldw	r3,64(r2)
2002bc8c:	e0bffe17 	ldw	r2,-8(fp)
2002bc90:	10800f17 	ldw	r2,60(r2)
2002bc94:	18800526 	beq	r3,r2,2002bcac <altera_avalon_jtag_uart_close+0x54>
2002bc98:	e0bffe17 	ldw	r2,-8(fp)
2002bc9c:	10c00917 	ldw	r3,36(r2)
2002bca0:	e0bffe17 	ldw	r2,-8(fp)
2002bca4:	10800117 	ldw	r2,4(r2)
2002bca8:	18bff136 	bltu	r3,r2,2002bc70 <__flash_rwdata_start+0xffffe188>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2002bcac:	0005883a 	mov	r2,zero
}
2002bcb0:	e037883a 	mov	sp,fp
2002bcb4:	df000017 	ldw	fp,0(sp)
2002bcb8:	dec00104 	addi	sp,sp,4
2002bcbc:	f800283a 	ret

2002bcc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2002bcc0:	defffa04 	addi	sp,sp,-24
2002bcc4:	df000515 	stw	fp,20(sp)
2002bcc8:	df000504 	addi	fp,sp,20
2002bccc:	e13ffd15 	stw	r4,-12(fp)
2002bcd0:	e17ffe15 	stw	r5,-8(fp)
2002bcd4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2002bcd8:	00bff9c4 	movi	r2,-25
2002bcdc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2002bce0:	e0bffe17 	ldw	r2,-8(fp)
2002bce4:	10da8060 	cmpeqi	r3,r2,27137
2002bce8:	1800031e 	bne	r3,zero,2002bcf8 <altera_avalon_jtag_uart_ioctl+0x38>
2002bcec:	109a80a0 	cmpeqi	r2,r2,27138
2002bcf0:	1000181e 	bne	r2,zero,2002bd54 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
2002bcf4:	00002906 	br	2002bd9c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2002bcf8:	e0bffd17 	ldw	r2,-12(fp)
2002bcfc:	10c00117 	ldw	r3,4(r2)
2002bd00:	00a00034 	movhi	r2,32768
2002bd04:	10bfffc4 	addi	r2,r2,-1
2002bd08:	18802126 	beq	r3,r2,2002bd90 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
2002bd0c:	e0bfff17 	ldw	r2,-4(fp)
2002bd10:	10800017 	ldw	r2,0(r2)
2002bd14:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2002bd18:	e0bffc17 	ldw	r2,-16(fp)
2002bd1c:	10800090 	cmplti	r2,r2,2
2002bd20:	1000061e 	bne	r2,zero,2002bd3c <altera_avalon_jtag_uart_ioctl+0x7c>
2002bd24:	e0fffc17 	ldw	r3,-16(fp)
2002bd28:	00a00034 	movhi	r2,32768
2002bd2c:	10bfffc4 	addi	r2,r2,-1
2002bd30:	18800226 	beq	r3,r2,2002bd3c <altera_avalon_jtag_uart_ioctl+0x7c>
2002bd34:	e0bffc17 	ldw	r2,-16(fp)
2002bd38:	00000206 	br	2002bd44 <altera_avalon_jtag_uart_ioctl+0x84>
2002bd3c:	00a00034 	movhi	r2,32768
2002bd40:	10bfff84 	addi	r2,r2,-2
2002bd44:	e0fffd17 	ldw	r3,-12(fp)
2002bd48:	18800115 	stw	r2,4(r3)
      rc = 0;
2002bd4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002bd50:	00000f06 	br	2002bd90 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2002bd54:	e0bffd17 	ldw	r2,-12(fp)
2002bd58:	10c00117 	ldw	r3,4(r2)
2002bd5c:	00a00034 	movhi	r2,32768
2002bd60:	10bfffc4 	addi	r2,r2,-1
2002bd64:	18800c26 	beq	r3,r2,2002bd98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2002bd68:	e0bffd17 	ldw	r2,-12(fp)
2002bd6c:	10c00917 	ldw	r3,36(r2)
2002bd70:	e0bffd17 	ldw	r2,-12(fp)
2002bd74:	10800117 	ldw	r2,4(r2)
2002bd78:	1885803a 	cmpltu	r2,r3,r2
2002bd7c:	10c03fcc 	andi	r3,r2,255
2002bd80:	e0bfff17 	ldw	r2,-4(fp)
2002bd84:	10c00015 	stw	r3,0(r2)
      rc = 0;
2002bd88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002bd8c:	00000206 	br	2002bd98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
2002bd90:	0001883a 	nop
2002bd94:	00000106 	br	2002bd9c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
2002bd98:	0001883a 	nop

  default:
    break;
  }

  return rc;
2002bd9c:	e0bffb17 	ldw	r2,-20(fp)
}
2002bda0:	e037883a 	mov	sp,fp
2002bda4:	df000017 	ldw	fp,0(sp)
2002bda8:	dec00104 	addi	sp,sp,4
2002bdac:	f800283a 	ret

2002bdb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2002bdb0:	deffed04 	addi	sp,sp,-76
2002bdb4:	dfc01215 	stw	ra,72(sp)
2002bdb8:	df001115 	stw	fp,68(sp)
2002bdbc:	df001104 	addi	fp,sp,68
2002bdc0:	e13ffc15 	stw	r4,-16(fp)
2002bdc4:	e17ffd15 	stw	r5,-12(fp)
2002bdc8:	e1bffe15 	stw	r6,-8(fp)
2002bdcc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2002bdd0:	e0bffd17 	ldw	r2,-12(fp)
2002bdd4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
2002bdd8:	e0bffc17 	ldw	r2,-16(fp)
2002bddc:	10800a17 	ldw	r2,40(r2)
2002bde0:	e0bff815 	stw	r2,-32(fp)
2002bde4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
2002bde8:	e0bff90b 	ldhu	r2,-28(fp)
2002bdec:	e0fffb04 	addi	r3,fp,-20
2002bdf0:	180d883a 	mov	r6,r3
2002bdf4:	100b883a 	mov	r5,r2
2002bdf8:	e13ff817 	ldw	r4,-32(fp)
2002bdfc:	00292480 	call	20029248 <OSSemPend>

  while (space > 0)
2002be00:	00006106 	br	2002bf88 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2002be04:	e0bffc17 	ldw	r2,-16(fp)
2002be08:	10800d17 	ldw	r2,52(r2)
2002be0c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
2002be10:	e0bffc17 	ldw	r2,-16(fp)
2002be14:	10800e17 	ldw	r2,56(r2)
2002be18:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
2002be1c:	e0fff317 	ldw	r3,-52(fp)
2002be20:	e0bff417 	ldw	r2,-48(fp)
2002be24:	18800536 	bltu	r3,r2,2002be3c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
2002be28:	e0fff317 	ldw	r3,-52(fp)
2002be2c:	e0bff417 	ldw	r2,-48(fp)
2002be30:	1885c83a 	sub	r2,r3,r2
2002be34:	e0bff115 	stw	r2,-60(fp)
2002be38:	00000406 	br	2002be4c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2002be3c:	00c20004 	movi	r3,2048
2002be40:	e0bff417 	ldw	r2,-48(fp)
2002be44:	1885c83a 	sub	r2,r3,r2
2002be48:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
2002be4c:	e0bff117 	ldw	r2,-60(fp)
2002be50:	10001e26 	beq	r2,zero,2002becc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
2002be54:	e0fffe17 	ldw	r3,-8(fp)
2002be58:	e0bff117 	ldw	r2,-60(fp)
2002be5c:	1880022e 	bgeu	r3,r2,2002be68 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
2002be60:	e0bffe17 	ldw	r2,-8(fp)
2002be64:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2002be68:	e0bffc17 	ldw	r2,-16(fp)
2002be6c:	10c01104 	addi	r3,r2,68
2002be70:	e0bff417 	ldw	r2,-48(fp)
2002be74:	1885883a 	add	r2,r3,r2
2002be78:	e1bff117 	ldw	r6,-60(fp)
2002be7c:	100b883a 	mov	r5,r2
2002be80:	e13ff017 	ldw	r4,-64(fp)
2002be84:	002179c0 	call	2002179c <memcpy>
      ptr   += n;
2002be88:	e0fff017 	ldw	r3,-64(fp)
2002be8c:	e0bff117 	ldw	r2,-60(fp)
2002be90:	1885883a 	add	r2,r3,r2
2002be94:	e0bff015 	stw	r2,-64(fp)
      space -= n;
2002be98:	e0fffe17 	ldw	r3,-8(fp)
2002be9c:	e0bff117 	ldw	r2,-60(fp)
2002bea0:	1885c83a 	sub	r2,r3,r2
2002bea4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002bea8:	e0fff417 	ldw	r3,-48(fp)
2002beac:	e0bff117 	ldw	r2,-60(fp)
2002beb0:	1885883a 	add	r2,r3,r2
2002beb4:	10c1ffcc 	andi	r3,r2,2047
2002beb8:	e0bffc17 	ldw	r2,-16(fp)
2002bebc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
2002bec0:	e0bffe17 	ldw	r2,-8(fp)
2002bec4:	00bfcf16 	blt	zero,r2,2002be04 <__flash_rwdata_start+0xffffe31c>
2002bec8:	00000106 	br	2002bed0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
2002becc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
2002bed0:	e0fff017 	ldw	r3,-64(fp)
2002bed4:	e0bffd17 	ldw	r2,-12(fp)
2002bed8:	18802e1e 	bne	r3,r2,2002bf94 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2002bedc:	e0bfff17 	ldw	r2,-4(fp)
2002bee0:	1090000c 	andi	r2,r2,16384
2002bee4:	10002d1e 	bne	r2,zero,2002bf9c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
2002bee8:	d0a03a43 	ldbu	r2,-32535(gp)
2002beec:	10803fcc 	andi	r2,r2,255
2002bef0:	10800058 	cmpnei	r2,r2,1
2002bef4:	1000161e 	bne	r2,zero,2002bf50 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
2002bef8:	e0bffc17 	ldw	r2,-16(fp)
2002befc:	10800c17 	ldw	r2,48(r2)
2002bf00:	e0bff215 	stw	r2,-56(fp)
2002bf04:	00800144 	movi	r2,5
2002bf08:	e0bff98d 	sth	r2,-26(fp)
2002bf0c:	00bfe0c4 	movi	r2,-125
2002bf10:	e0bffa05 	stb	r2,-24(fp)
2002bf14:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
2002bf18:	d0a03a43 	ldbu	r2,-32535(gp)
2002bf1c:	10803fcc 	andi	r2,r2,255
2002bf20:	10001526 	beq	r2,zero,2002bf78 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
2002bf24:	e0fff98b 	ldhu	r3,-26(fp)
2002bf28:	e13ffa03 	ldbu	r4,-24(fp)
2002bf2c:	e17ffa8b 	ldhu	r5,-22(fp)
2002bf30:	e0bffb44 	addi	r2,fp,-19
2002bf34:	d8800015 	stw	r2,0(sp)
2002bf38:	280f883a 	mov	r7,r5
2002bf3c:	200d883a 	mov	r6,r4
2002bf40:	180b883a 	mov	r5,r3
2002bf44:	e13ff217 	ldw	r4,-56(fp)
2002bf48:	00267e00 	call	200267e0 <OSFlagPend>
2002bf4c:	00000a06 	br	2002bf78 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2002bf50:	0001883a 	nop
2002bf54:	e0bffc17 	ldw	r2,-16(fp)
2002bf58:	10c00d17 	ldw	r3,52(r2)
2002bf5c:	e0bff317 	ldw	r2,-52(fp)
2002bf60:	1880051e 	bne	r3,r2,2002bf78 <altera_avalon_jtag_uart_read+0x1c8>
2002bf64:	e0bffc17 	ldw	r2,-16(fp)
2002bf68:	10c00917 	ldw	r3,36(r2)
2002bf6c:	e0bffc17 	ldw	r2,-16(fp)
2002bf70:	10800117 	ldw	r2,4(r2)
2002bf74:	18bff736 	bltu	r3,r2,2002bf54 <__flash_rwdata_start+0xffffe46c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2002bf78:	e0bffc17 	ldw	r2,-16(fp)
2002bf7c:	10c00d17 	ldw	r3,52(r2)
2002bf80:	e0bff317 	ldw	r2,-52(fp)
2002bf84:	18800726 	beq	r3,r2,2002bfa4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2002bf88:	e0bffe17 	ldw	r2,-8(fp)
2002bf8c:	00bf9d16 	blt	zero,r2,2002be04 <__flash_rwdata_start+0xffffe31c>
2002bf90:	00000506 	br	2002bfa8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
2002bf94:	0001883a 	nop
2002bf98:	00000306 	br	2002bfa8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
2002bf9c:	0001883a 	nop
2002bfa0:	00000106 	br	2002bfa8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
2002bfa4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
2002bfa8:	e0bffc17 	ldw	r2,-16(fp)
2002bfac:	10800a17 	ldw	r2,40(r2)
2002bfb0:	1009883a 	mov	r4,r2
2002bfb4:	00295c00 	call	200295c0 <OSSemPost>

  if (ptr != buffer)
2002bfb8:	e0fff017 	ldw	r3,-64(fp)
2002bfbc:	e0bffd17 	ldw	r2,-12(fp)
2002bfc0:	18801826 	beq	r3,r2,2002c024 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002bfc4:	0005303a 	rdctl	r2,status
2002bfc8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002bfcc:	e0fff717 	ldw	r3,-36(fp)
2002bfd0:	00bfff84 	movi	r2,-2
2002bfd4:	1884703a 	and	r2,r3,r2
2002bfd8:	1001703a 	wrctl	status,r2
  
  return context;
2002bfdc:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2002bfe0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002bfe4:	e0bffc17 	ldw	r2,-16(fp)
2002bfe8:	10800817 	ldw	r2,32(r2)
2002bfec:	10c00054 	ori	r3,r2,1
2002bff0:	e0bffc17 	ldw	r2,-16(fp)
2002bff4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002bff8:	e0bffc17 	ldw	r2,-16(fp)
2002bffc:	10800017 	ldw	r2,0(r2)
2002c000:	10800104 	addi	r2,r2,4
2002c004:	1007883a 	mov	r3,r2
2002c008:	e0bffc17 	ldw	r2,-16(fp)
2002c00c:	10800817 	ldw	r2,32(r2)
2002c010:	18800035 	stwio	r2,0(r3)
2002c014:	e0bff617 	ldw	r2,-40(fp)
2002c018:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c01c:	e0bff517 	ldw	r2,-44(fp)
2002c020:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2002c024:	e0fff017 	ldw	r3,-64(fp)
2002c028:	e0bffd17 	ldw	r2,-12(fp)
2002c02c:	18800426 	beq	r3,r2,2002c040 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
2002c030:	e0fff017 	ldw	r3,-64(fp)
2002c034:	e0bffd17 	ldw	r2,-12(fp)
2002c038:	1885c83a 	sub	r2,r3,r2
2002c03c:	00000606 	br	2002c058 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
2002c040:	e0bfff17 	ldw	r2,-4(fp)
2002c044:	1090000c 	andi	r2,r2,16384
2002c048:	10000226 	beq	r2,zero,2002c054 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
2002c04c:	00bffd44 	movi	r2,-11
2002c050:	00000106 	br	2002c058 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
2002c054:	00bffec4 	movi	r2,-5
}
2002c058:	e037883a 	mov	sp,fp
2002c05c:	dfc00117 	ldw	ra,4(sp)
2002c060:	df000017 	ldw	fp,0(sp)
2002c064:	dec00204 	addi	sp,sp,8
2002c068:	f800283a 	ret

2002c06c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2002c06c:	deffed04 	addi	sp,sp,-76
2002c070:	dfc01215 	stw	ra,72(sp)
2002c074:	df001115 	stw	fp,68(sp)
2002c078:	df001104 	addi	fp,sp,68
2002c07c:	e13ffc15 	stw	r4,-16(fp)
2002c080:	e17ffd15 	stw	r5,-12(fp)
2002c084:	e1bffe15 	stw	r6,-8(fp)
2002c088:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2002c08c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2002c090:	e0bffd17 	ldw	r2,-12(fp)
2002c094:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
2002c098:	e0bffc17 	ldw	r2,-16(fp)
2002c09c:	10800b17 	ldw	r2,44(r2)
2002c0a0:	e0bff815 	stw	r2,-32(fp)
2002c0a4:	e03ff90d 	sth	zero,-28(fp)
2002c0a8:	e0bff90b 	ldhu	r2,-28(fp)
2002c0ac:	e0fffb44 	addi	r3,fp,-19
2002c0b0:	180d883a 	mov	r6,r3
2002c0b4:	100b883a 	mov	r5,r2
2002c0b8:	e13ff817 	ldw	r4,-32(fp)
2002c0bc:	00292480 	call	20029248 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002c0c0:	00003706 	br	2002c1a0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2002c0c4:	e0bffc17 	ldw	r2,-16(fp)
2002c0c8:	10800f17 	ldw	r2,60(r2)
2002c0cc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
2002c0d0:	e0bffc17 	ldw	r2,-16(fp)
2002c0d4:	10801017 	ldw	r2,64(r2)
2002c0d8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
2002c0dc:	e0fff417 	ldw	r3,-48(fp)
2002c0e0:	e0bff017 	ldw	r2,-64(fp)
2002c0e4:	1880062e 	bgeu	r3,r2,2002c100 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
2002c0e8:	e0fff017 	ldw	r3,-64(fp)
2002c0ec:	e0bff417 	ldw	r2,-48(fp)
2002c0f0:	1885c83a 	sub	r2,r3,r2
2002c0f4:	10bfffc4 	addi	r2,r2,-1
2002c0f8:	e0bff115 	stw	r2,-60(fp)
2002c0fc:	00000b06 	br	2002c12c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
2002c100:	e0bff017 	ldw	r2,-64(fp)
2002c104:	10000526 	beq	r2,zero,2002c11c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2002c108:	00c20004 	movi	r3,2048
2002c10c:	e0bff417 	ldw	r2,-48(fp)
2002c110:	1885c83a 	sub	r2,r3,r2
2002c114:	e0bff115 	stw	r2,-60(fp)
2002c118:	00000406 	br	2002c12c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2002c11c:	00c1ffc4 	movi	r3,2047
2002c120:	e0bff417 	ldw	r2,-48(fp)
2002c124:	1885c83a 	sub	r2,r3,r2
2002c128:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
2002c12c:	e0bff117 	ldw	r2,-60(fp)
2002c130:	10001e26 	beq	r2,zero,2002c1ac <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
2002c134:	e0fffe17 	ldw	r3,-8(fp)
2002c138:	e0bff117 	ldw	r2,-60(fp)
2002c13c:	1880022e 	bgeu	r3,r2,2002c148 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
2002c140:	e0bffe17 	ldw	r2,-8(fp)
2002c144:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2002c148:	e0bffc17 	ldw	r2,-16(fp)
2002c14c:	10c21104 	addi	r3,r2,2116
2002c150:	e0bff417 	ldw	r2,-48(fp)
2002c154:	1885883a 	add	r2,r3,r2
2002c158:	e1bff117 	ldw	r6,-60(fp)
2002c15c:	e17ffd17 	ldw	r5,-12(fp)
2002c160:	1009883a 	mov	r4,r2
2002c164:	002179c0 	call	2002179c <memcpy>
      ptr   += n;
2002c168:	e0fffd17 	ldw	r3,-12(fp)
2002c16c:	e0bff117 	ldw	r2,-60(fp)
2002c170:	1885883a 	add	r2,r3,r2
2002c174:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2002c178:	e0fffe17 	ldw	r3,-8(fp)
2002c17c:	e0bff117 	ldw	r2,-60(fp)
2002c180:	1885c83a 	sub	r2,r3,r2
2002c184:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002c188:	e0fff417 	ldw	r3,-48(fp)
2002c18c:	e0bff117 	ldw	r2,-60(fp)
2002c190:	1885883a 	add	r2,r3,r2
2002c194:	10c1ffcc 	andi	r3,r2,2047
2002c198:	e0bffc17 	ldw	r2,-16(fp)
2002c19c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002c1a0:	e0bffe17 	ldw	r2,-8(fp)
2002c1a4:	00bfc716 	blt	zero,r2,2002c0c4 <__flash_rwdata_start+0xffffe5dc>
2002c1a8:	00000106 	br	2002c1b0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
2002c1ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c1b0:	0005303a 	rdctl	r2,status
2002c1b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c1b8:	e0fff717 	ldw	r3,-36(fp)
2002c1bc:	00bfff84 	movi	r2,-2
2002c1c0:	1884703a 	and	r2,r3,r2
2002c1c4:	1001703a 	wrctl	status,r2
  
  return context;
2002c1c8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2002c1cc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002c1d0:	e0bffc17 	ldw	r2,-16(fp)
2002c1d4:	10800817 	ldw	r2,32(r2)
2002c1d8:	10c00094 	ori	r3,r2,2
2002c1dc:	e0bffc17 	ldw	r2,-16(fp)
2002c1e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002c1e4:	e0bffc17 	ldw	r2,-16(fp)
2002c1e8:	10800017 	ldw	r2,0(r2)
2002c1ec:	10800104 	addi	r2,r2,4
2002c1f0:	1007883a 	mov	r3,r2
2002c1f4:	e0bffc17 	ldw	r2,-16(fp)
2002c1f8:	10800817 	ldw	r2,32(r2)
2002c1fc:	18800035 	stwio	r2,0(r3)
2002c200:	e0bff617 	ldw	r2,-40(fp)
2002c204:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c208:	e0bff317 	ldw	r2,-52(fp)
2002c20c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2002c210:	e0bffe17 	ldw	r2,-8(fp)
2002c214:	00802a0e 	bge	zero,r2,2002c2c0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
2002c218:	e0bfff17 	ldw	r2,-4(fp)
2002c21c:	1090000c 	andi	r2,r2,16384
2002c220:	10002a1e 	bne	r2,zero,2002c2cc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
2002c224:	d0a03a43 	ldbu	r2,-32535(gp)
2002c228:	10803fcc 	andi	r2,r2,255
2002c22c:	10800058 	cmpnei	r2,r2,1
2002c230:	1000161e 	bne	r2,zero,2002c28c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
2002c234:	e0bffc17 	ldw	r2,-16(fp)
2002c238:	10800c17 	ldw	r2,48(r2)
2002c23c:	e0bff515 	stw	r2,-44(fp)
2002c240:	00800184 	movi	r2,6
2002c244:	e0bff98d 	sth	r2,-26(fp)
2002c248:	00bfe0c4 	movi	r2,-125
2002c24c:	e0bffa05 	stb	r2,-24(fp)
2002c250:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
2002c254:	d0a03a43 	ldbu	r2,-32535(gp)
2002c258:	10803fcc 	andi	r2,r2,255
2002c25c:	10001526 	beq	r2,zero,2002c2b4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
2002c260:	e0fff98b 	ldhu	r3,-26(fp)
2002c264:	e13ffa03 	ldbu	r4,-24(fp)
2002c268:	e17ffa8b 	ldhu	r5,-22(fp)
2002c26c:	e0bffb04 	addi	r2,fp,-20
2002c270:	d8800015 	stw	r2,0(sp)
2002c274:	280f883a 	mov	r7,r5
2002c278:	200d883a 	mov	r6,r4
2002c27c:	180b883a 	mov	r5,r3
2002c280:	e13ff517 	ldw	r4,-44(fp)
2002c284:	00267e00 	call	200267e0 <OSFlagPend>
2002c288:	00000a06 	br	2002c2b4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2002c28c:	0001883a 	nop
2002c290:	e0bffc17 	ldw	r2,-16(fp)
2002c294:	10c01017 	ldw	r3,64(r2)
2002c298:	e0bff017 	ldw	r2,-64(fp)
2002c29c:	1880051e 	bne	r3,r2,2002c2b4 <altera_avalon_jtag_uart_write+0x248>
2002c2a0:	e0bffc17 	ldw	r2,-16(fp)
2002c2a4:	10c00917 	ldw	r3,36(r2)
2002c2a8:	e0bffc17 	ldw	r2,-16(fp)
2002c2ac:	10800117 	ldw	r2,4(r2)
2002c2b0:	18bff736 	bltu	r3,r2,2002c290 <__flash_rwdata_start+0xffffe7a8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2002c2b4:	e0bffc17 	ldw	r2,-16(fp)
2002c2b8:	10800917 	ldw	r2,36(r2)
2002c2bc:	1000051e 	bne	r2,zero,2002c2d4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
2002c2c0:	e0bffe17 	ldw	r2,-8(fp)
2002c2c4:	00bfb616 	blt	zero,r2,2002c1a0 <__flash_rwdata_start+0xffffe6b8>
2002c2c8:	00000306 	br	2002c2d8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
2002c2cc:	0001883a 	nop
2002c2d0:	00000106 	br	2002c2d8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
2002c2d4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
2002c2d8:	e0bffc17 	ldw	r2,-16(fp)
2002c2dc:	10800b17 	ldw	r2,44(r2)
2002c2e0:	1009883a 	mov	r4,r2
2002c2e4:	00295c00 	call	200295c0 <OSSemPost>

  if (ptr != start)
2002c2e8:	e0fffd17 	ldw	r3,-12(fp)
2002c2ec:	e0bff217 	ldw	r2,-56(fp)
2002c2f0:	18800426 	beq	r3,r2,2002c304 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
2002c2f4:	e0fffd17 	ldw	r3,-12(fp)
2002c2f8:	e0bff217 	ldw	r2,-56(fp)
2002c2fc:	1885c83a 	sub	r2,r3,r2
2002c300:	00000606 	br	2002c31c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
2002c304:	e0bfff17 	ldw	r2,-4(fp)
2002c308:	1090000c 	andi	r2,r2,16384
2002c30c:	10000226 	beq	r2,zero,2002c318 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
2002c310:	00bffd44 	movi	r2,-11
2002c314:	00000106 	br	2002c31c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2002c318:	00bffec4 	movi	r2,-5
}
2002c31c:	e037883a 	mov	sp,fp
2002c320:	dfc00117 	ldw	ra,4(sp)
2002c324:	df000017 	ldw	fp,0(sp)
2002c328:	dec00204 	addi	sp,sp,8
2002c32c:	f800283a 	ret

2002c330 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2002c330:	defffa04 	addi	sp,sp,-24
2002c334:	dfc00515 	stw	ra,20(sp)
2002c338:	df000415 	stw	fp,16(sp)
2002c33c:	df000404 	addi	fp,sp,16
2002c340:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2002c344:	0007883a 	mov	r3,zero
2002c348:	e0bfff17 	ldw	r2,-4(fp)
2002c34c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2002c350:	e0bfff17 	ldw	r2,-4(fp)
2002c354:	10800104 	addi	r2,r2,4
2002c358:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c35c:	0005303a 	rdctl	r2,status
2002c360:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c364:	e0fffd17 	ldw	r3,-12(fp)
2002c368:	00bfff84 	movi	r2,-2
2002c36c:	1884703a 	and	r2,r3,r2
2002c370:	1001703a 	wrctl	status,r2
  
  return context;
2002c374:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2002c378:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
2002c37c:	002ce3c0 	call	2002ce3c <alt_tick>
2002c380:	e0bffc17 	ldw	r2,-16(fp)
2002c384:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c388:	e0bffe17 	ldw	r2,-8(fp)
2002c38c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
2002c390:	0001883a 	nop
2002c394:	e037883a 	mov	sp,fp
2002c398:	dfc00117 	ldw	ra,4(sp)
2002c39c:	df000017 	ldw	fp,0(sp)
2002c3a0:	dec00204 	addi	sp,sp,8
2002c3a4:	f800283a 	ret

2002c3a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2002c3a8:	defff804 	addi	sp,sp,-32
2002c3ac:	dfc00715 	stw	ra,28(sp)
2002c3b0:	df000615 	stw	fp,24(sp)
2002c3b4:	df000604 	addi	fp,sp,24
2002c3b8:	e13ffc15 	stw	r4,-16(fp)
2002c3bc:	e17ffd15 	stw	r5,-12(fp)
2002c3c0:	e1bffe15 	stw	r6,-8(fp)
2002c3c4:	e1ffff15 	stw	r7,-4(fp)
2002c3c8:	e0bfff17 	ldw	r2,-4(fp)
2002c3cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2002c3d0:	d0a04f17 	ldw	r2,-32452(gp)
2002c3d4:	1000021e 	bne	r2,zero,2002c3e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
2002c3d8:	e0bffb17 	ldw	r2,-20(fp)
2002c3dc:	d0a04f15 	stw	r2,-32452(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2002c3e0:	e0bffc17 	ldw	r2,-16(fp)
2002c3e4:	10800104 	addi	r2,r2,4
2002c3e8:	00c001c4 	movi	r3,7
2002c3ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2002c3f0:	d8000015 	stw	zero,0(sp)
2002c3f4:	e1fffc17 	ldw	r7,-16(fp)
2002c3f8:	018800f4 	movhi	r6,8195
2002c3fc:	31b0cc04 	addi	r6,r6,-15568
2002c400:	e17ffe17 	ldw	r5,-8(fp)
2002c404:	e13ffd17 	ldw	r4,-12(fp)
2002c408:	002c76c0 	call	2002c76c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2002c40c:	0001883a 	nop
2002c410:	e037883a 	mov	sp,fp
2002c414:	dfc00117 	ldw	ra,4(sp)
2002c418:	df000017 	ldw	fp,0(sp)
2002c41c:	dec00204 	addi	sp,sp,8
2002c420:	f800283a 	ret

2002c424 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2002c424:	defff504 	addi	sp,sp,-44
2002c428:	df000a15 	stw	fp,40(sp)
2002c42c:	df000a04 	addi	fp,sp,40
2002c430:	e13ffc15 	stw	r4,-16(fp)
2002c434:	e17ffd15 	stw	r5,-12(fp)
2002c438:	e1bffe15 	stw	r6,-8(fp)
2002c43c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2002c440:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002c444:	d0a04f17 	ldw	r2,-32452(gp)
  
  if (alt_ticks_per_second ())
2002c448:	10003c26 	beq	r2,zero,2002c53c <alt_alarm_start+0x118>
  {
    if (alarm)
2002c44c:	e0bffc17 	ldw	r2,-16(fp)
2002c450:	10003826 	beq	r2,zero,2002c534 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
2002c454:	e0bffc17 	ldw	r2,-16(fp)
2002c458:	e0fffe17 	ldw	r3,-8(fp)
2002c45c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2002c460:	e0bffc17 	ldw	r2,-16(fp)
2002c464:	e0ffff17 	ldw	r3,-4(fp)
2002c468:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c46c:	0005303a 	rdctl	r2,status
2002c470:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c474:	e0fff917 	ldw	r3,-28(fp)
2002c478:	00bfff84 	movi	r2,-2
2002c47c:	1884703a 	and	r2,r3,r2
2002c480:	1001703a 	wrctl	status,r2
  
  return context;
2002c484:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
2002c488:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2002c48c:	d0a05017 	ldw	r2,-32448(gp)
      
      current_nticks = alt_nticks();
2002c490:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2002c494:	e0fffd17 	ldw	r3,-12(fp)
2002c498:	e0bff617 	ldw	r2,-40(fp)
2002c49c:	1885883a 	add	r2,r3,r2
2002c4a0:	10c00044 	addi	r3,r2,1
2002c4a4:	e0bffc17 	ldw	r2,-16(fp)
2002c4a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2002c4ac:	e0bffc17 	ldw	r2,-16(fp)
2002c4b0:	10c00217 	ldw	r3,8(r2)
2002c4b4:	e0bff617 	ldw	r2,-40(fp)
2002c4b8:	1880042e 	bgeu	r3,r2,2002c4cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
2002c4bc:	e0bffc17 	ldw	r2,-16(fp)
2002c4c0:	00c00044 	movi	r3,1
2002c4c4:	10c00405 	stb	r3,16(r2)
2002c4c8:	00000206 	br	2002c4d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
2002c4cc:	e0bffc17 	ldw	r2,-16(fp)
2002c4d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2002c4d4:	e0bffc17 	ldw	r2,-16(fp)
2002c4d8:	d0e02b04 	addi	r3,gp,-32596
2002c4dc:	e0fffa15 	stw	r3,-24(fp)
2002c4e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002c4e4:	e0bffb17 	ldw	r2,-20(fp)
2002c4e8:	e0fffa17 	ldw	r3,-24(fp)
2002c4ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002c4f0:	e0bffa17 	ldw	r2,-24(fp)
2002c4f4:	10c00017 	ldw	r3,0(r2)
2002c4f8:	e0bffb17 	ldw	r2,-20(fp)
2002c4fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002c500:	e0bffa17 	ldw	r2,-24(fp)
2002c504:	10800017 	ldw	r2,0(r2)
2002c508:	e0fffb17 	ldw	r3,-20(fp)
2002c50c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002c510:	e0bffa17 	ldw	r2,-24(fp)
2002c514:	e0fffb17 	ldw	r3,-20(fp)
2002c518:	10c00015 	stw	r3,0(r2)
2002c51c:	e0bff817 	ldw	r2,-32(fp)
2002c520:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c524:	e0bff717 	ldw	r2,-36(fp)
2002c528:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2002c52c:	0005883a 	mov	r2,zero
2002c530:	00000306 	br	2002c540 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
2002c534:	00bffa84 	movi	r2,-22
2002c538:	00000106 	br	2002c540 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
2002c53c:	00bfde84 	movi	r2,-134
  }
}
2002c540:	e037883a 	mov	sp,fp
2002c544:	df000017 	ldw	fp,0(sp)
2002c548:	dec00104 	addi	sp,sp,4
2002c54c:	f800283a 	ret

2002c550 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2002c550:	defffe04 	addi	sp,sp,-8
2002c554:	df000115 	stw	fp,4(sp)
2002c558:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002c55c:	e03fff15 	stw	zero,-4(fp)
2002c560:	00000506 	br	2002c578 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2002c564:	e0bfff17 	ldw	r2,-4(fp)
2002c568:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002c56c:	e0bfff17 	ldw	r2,-4(fp)
2002c570:	10800804 	addi	r2,r2,32
2002c574:	e0bfff15 	stw	r2,-4(fp)
2002c578:	e0bfff17 	ldw	r2,-4(fp)
2002c57c:	10820030 	cmpltui	r2,r2,2048
2002c580:	103ff81e 	bne	r2,zero,2002c564 <__flash_rwdata_start+0xffffea7c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2002c584:	0001883a 	nop
2002c588:	e037883a 	mov	sp,fp
2002c58c:	df000017 	ldw	fp,0(sp)
2002c590:	dec00104 	addi	sp,sp,4
2002c594:	f800283a 	ret

2002c598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002c598:	defffe04 	addi	sp,sp,-8
2002c59c:	dfc00115 	stw	ra,4(sp)
2002c5a0:	df000015 	stw	fp,0(sp)
2002c5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002c5a8:	d0a00917 	ldw	r2,-32732(gp)
2002c5ac:	10000326 	beq	r2,zero,2002c5bc <alt_get_errno+0x24>
2002c5b0:	d0a00917 	ldw	r2,-32732(gp)
2002c5b4:	103ee83a 	callr	r2
2002c5b8:	00000106 	br	2002c5c0 <alt_get_errno+0x28>
2002c5bc:	d0a03104 	addi	r2,gp,-32572
}
2002c5c0:	e037883a 	mov	sp,fp
2002c5c4:	dfc00117 	ldw	ra,4(sp)
2002c5c8:	df000017 	ldw	fp,0(sp)
2002c5cc:	dec00204 	addi	sp,sp,8
2002c5d0:	f800283a 	ret

2002c5d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2002c5d4:	defffa04 	addi	sp,sp,-24
2002c5d8:	dfc00515 	stw	ra,20(sp)
2002c5dc:	df000415 	stw	fp,16(sp)
2002c5e0:	df000404 	addi	fp,sp,16
2002c5e4:	e13ffe15 	stw	r4,-8(fp)
2002c5e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2002c5ec:	e0bffe17 	ldw	r2,-8(fp)
2002c5f0:	10000326 	beq	r2,zero,2002c600 <alt_dev_llist_insert+0x2c>
2002c5f4:	e0bffe17 	ldw	r2,-8(fp)
2002c5f8:	10800217 	ldw	r2,8(r2)
2002c5fc:	1000061e 	bne	r2,zero,2002c618 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2002c600:	002c5980 	call	2002c598 <alt_get_errno>
2002c604:	1007883a 	mov	r3,r2
2002c608:	00800584 	movi	r2,22
2002c60c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2002c610:	00bffa84 	movi	r2,-22
2002c614:	00001306 	br	2002c664 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2002c618:	e0bffe17 	ldw	r2,-8(fp)
2002c61c:	e0ffff17 	ldw	r3,-4(fp)
2002c620:	e0fffc15 	stw	r3,-16(fp)
2002c624:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002c628:	e0bffd17 	ldw	r2,-12(fp)
2002c62c:	e0fffc17 	ldw	r3,-16(fp)
2002c630:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002c634:	e0bffc17 	ldw	r2,-16(fp)
2002c638:	10c00017 	ldw	r3,0(r2)
2002c63c:	e0bffd17 	ldw	r2,-12(fp)
2002c640:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002c644:	e0bffc17 	ldw	r2,-16(fp)
2002c648:	10800017 	ldw	r2,0(r2)
2002c64c:	e0fffd17 	ldw	r3,-12(fp)
2002c650:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002c654:	e0bffc17 	ldw	r2,-16(fp)
2002c658:	e0fffd17 	ldw	r3,-12(fp)
2002c65c:	10c00015 	stw	r3,0(r2)

  return 0;  
2002c660:	0005883a 	mov	r2,zero
}
2002c664:	e037883a 	mov	sp,fp
2002c668:	dfc00117 	ldw	ra,4(sp)
2002c66c:	df000017 	ldw	fp,0(sp)
2002c670:	dec00204 	addi	sp,sp,8
2002c674:	f800283a 	ret

2002c678 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2002c678:	defffd04 	addi	sp,sp,-12
2002c67c:	dfc00215 	stw	ra,8(sp)
2002c680:	df000115 	stw	fp,4(sp)
2002c684:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002c688:	008800f4 	movhi	r2,8195
2002c68c:	10b65504 	addi	r2,r2,-9900
2002c690:	e0bfff15 	stw	r2,-4(fp)
2002c694:	00000606 	br	2002c6b0 <_do_ctors+0x38>
        (*ctor) (); 
2002c698:	e0bfff17 	ldw	r2,-4(fp)
2002c69c:	10800017 	ldw	r2,0(r2)
2002c6a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002c6a4:	e0bfff17 	ldw	r2,-4(fp)
2002c6a8:	10bfff04 	addi	r2,r2,-4
2002c6ac:	e0bfff15 	stw	r2,-4(fp)
2002c6b0:	e0ffff17 	ldw	r3,-4(fp)
2002c6b4:	008800f4 	movhi	r2,8195
2002c6b8:	10b65604 	addi	r2,r2,-9896
2002c6bc:	18bff62e 	bgeu	r3,r2,2002c698 <__flash_rwdata_start+0xffffebb0>
        (*ctor) (); 
}
2002c6c0:	0001883a 	nop
2002c6c4:	e037883a 	mov	sp,fp
2002c6c8:	dfc00117 	ldw	ra,4(sp)
2002c6cc:	df000017 	ldw	fp,0(sp)
2002c6d0:	dec00204 	addi	sp,sp,8
2002c6d4:	f800283a 	ret

2002c6d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2002c6d8:	defffd04 	addi	sp,sp,-12
2002c6dc:	dfc00215 	stw	ra,8(sp)
2002c6e0:	df000115 	stw	fp,4(sp)
2002c6e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002c6e8:	008800f4 	movhi	r2,8195
2002c6ec:	10b65504 	addi	r2,r2,-9900
2002c6f0:	e0bfff15 	stw	r2,-4(fp)
2002c6f4:	00000606 	br	2002c710 <_do_dtors+0x38>
        (*dtor) (); 
2002c6f8:	e0bfff17 	ldw	r2,-4(fp)
2002c6fc:	10800017 	ldw	r2,0(r2)
2002c700:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002c704:	e0bfff17 	ldw	r2,-4(fp)
2002c708:	10bfff04 	addi	r2,r2,-4
2002c70c:	e0bfff15 	stw	r2,-4(fp)
2002c710:	e0ffff17 	ldw	r3,-4(fp)
2002c714:	008800f4 	movhi	r2,8195
2002c718:	10b65604 	addi	r2,r2,-9896
2002c71c:	18bff62e 	bgeu	r3,r2,2002c6f8 <__flash_rwdata_start+0xffffec10>
        (*dtor) (); 
}
2002c720:	0001883a 	nop
2002c724:	e037883a 	mov	sp,fp
2002c728:	dfc00117 	ldw	ra,4(sp)
2002c72c:	df000017 	ldw	fp,0(sp)
2002c730:	dec00204 	addi	sp,sp,8
2002c734:	f800283a 	ret

2002c738 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2002c738:	defffe04 	addi	sp,sp,-8
2002c73c:	dfc00115 	stw	ra,4(sp)
2002c740:	df000015 	stw	fp,0(sp)
2002c744:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2002c748:	01440004 	movi	r5,4096
2002c74c:	0009883a 	mov	r4,zero
2002c750:	002d5340 	call	2002d534 <alt_icache_flush>
#endif
}
2002c754:	0001883a 	nop
2002c758:	e037883a 	mov	sp,fp
2002c75c:	dfc00117 	ldw	ra,4(sp)
2002c760:	df000017 	ldw	fp,0(sp)
2002c764:	dec00204 	addi	sp,sp,8
2002c768:	f800283a 	ret

2002c76c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002c76c:	defff904 	addi	sp,sp,-28
2002c770:	dfc00615 	stw	ra,24(sp)
2002c774:	df000515 	stw	fp,20(sp)
2002c778:	df000504 	addi	fp,sp,20
2002c77c:	e13ffc15 	stw	r4,-16(fp)
2002c780:	e17ffd15 	stw	r5,-12(fp)
2002c784:	e1bffe15 	stw	r6,-8(fp)
2002c788:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002c78c:	e0800217 	ldw	r2,8(fp)
2002c790:	d8800015 	stw	r2,0(sp)
2002c794:	e1ffff17 	ldw	r7,-4(fp)
2002c798:	e1bffe17 	ldw	r6,-8(fp)
2002c79c:	e17ffd17 	ldw	r5,-12(fp)
2002c7a0:	e13ffc17 	ldw	r4,-16(fp)
2002c7a4:	002c91c0 	call	2002c91c <alt_iic_isr_register>
}  
2002c7a8:	e037883a 	mov	sp,fp
2002c7ac:	dfc00117 	ldw	ra,4(sp)
2002c7b0:	df000017 	ldw	fp,0(sp)
2002c7b4:	dec00204 	addi	sp,sp,8
2002c7b8:	f800283a 	ret

2002c7bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002c7bc:	defff904 	addi	sp,sp,-28
2002c7c0:	df000615 	stw	fp,24(sp)
2002c7c4:	df000604 	addi	fp,sp,24
2002c7c8:	e13ffe15 	stw	r4,-8(fp)
2002c7cc:	e17fff15 	stw	r5,-4(fp)
2002c7d0:	e0bfff17 	ldw	r2,-4(fp)
2002c7d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c7d8:	0005303a 	rdctl	r2,status
2002c7dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c7e0:	e0fffb17 	ldw	r3,-20(fp)
2002c7e4:	00bfff84 	movi	r2,-2
2002c7e8:	1884703a 	and	r2,r3,r2
2002c7ec:	1001703a 	wrctl	status,r2
  
  return context;
2002c7f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002c7f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002c7f8:	00c00044 	movi	r3,1
2002c7fc:	e0bffa17 	ldw	r2,-24(fp)
2002c800:	1884983a 	sll	r2,r3,r2
2002c804:	1007883a 	mov	r3,r2
2002c808:	d0a04e17 	ldw	r2,-32456(gp)
2002c80c:	1884b03a 	or	r2,r3,r2
2002c810:	d0a04e15 	stw	r2,-32456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002c814:	d0a04e17 	ldw	r2,-32456(gp)
2002c818:	100170fa 	wrctl	ienable,r2
2002c81c:	e0bffc17 	ldw	r2,-16(fp)
2002c820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c824:	e0bffd17 	ldw	r2,-12(fp)
2002c828:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002c82c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2002c830:	0001883a 	nop
}
2002c834:	e037883a 	mov	sp,fp
2002c838:	df000017 	ldw	fp,0(sp)
2002c83c:	dec00104 	addi	sp,sp,4
2002c840:	f800283a 	ret

2002c844 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002c844:	defff904 	addi	sp,sp,-28
2002c848:	df000615 	stw	fp,24(sp)
2002c84c:	df000604 	addi	fp,sp,24
2002c850:	e13ffe15 	stw	r4,-8(fp)
2002c854:	e17fff15 	stw	r5,-4(fp)
2002c858:	e0bfff17 	ldw	r2,-4(fp)
2002c85c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c860:	0005303a 	rdctl	r2,status
2002c864:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c868:	e0fffb17 	ldw	r3,-20(fp)
2002c86c:	00bfff84 	movi	r2,-2
2002c870:	1884703a 	and	r2,r3,r2
2002c874:	1001703a 	wrctl	status,r2
  
  return context;
2002c878:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002c87c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002c880:	00c00044 	movi	r3,1
2002c884:	e0bffa17 	ldw	r2,-24(fp)
2002c888:	1884983a 	sll	r2,r3,r2
2002c88c:	0084303a 	nor	r2,zero,r2
2002c890:	1007883a 	mov	r3,r2
2002c894:	d0a04e17 	ldw	r2,-32456(gp)
2002c898:	1884703a 	and	r2,r3,r2
2002c89c:	d0a04e15 	stw	r2,-32456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002c8a0:	d0a04e17 	ldw	r2,-32456(gp)
2002c8a4:	100170fa 	wrctl	ienable,r2
2002c8a8:	e0bffc17 	ldw	r2,-16(fp)
2002c8ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c8b0:	e0bffd17 	ldw	r2,-12(fp)
2002c8b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002c8b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2002c8bc:	0001883a 	nop
}
2002c8c0:	e037883a 	mov	sp,fp
2002c8c4:	df000017 	ldw	fp,0(sp)
2002c8c8:	dec00104 	addi	sp,sp,4
2002c8cc:	f800283a 	ret

2002c8d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002c8d0:	defffc04 	addi	sp,sp,-16
2002c8d4:	df000315 	stw	fp,12(sp)
2002c8d8:	df000304 	addi	fp,sp,12
2002c8dc:	e13ffe15 	stw	r4,-8(fp)
2002c8e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002c8e4:	000530fa 	rdctl	r2,ienable
2002c8e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002c8ec:	00c00044 	movi	r3,1
2002c8f0:	e0bfff17 	ldw	r2,-4(fp)
2002c8f4:	1884983a 	sll	r2,r3,r2
2002c8f8:	1007883a 	mov	r3,r2
2002c8fc:	e0bffd17 	ldw	r2,-12(fp)
2002c900:	1884703a 	and	r2,r3,r2
2002c904:	1004c03a 	cmpne	r2,r2,zero
2002c908:	10803fcc 	andi	r2,r2,255
}
2002c90c:	e037883a 	mov	sp,fp
2002c910:	df000017 	ldw	fp,0(sp)
2002c914:	dec00104 	addi	sp,sp,4
2002c918:	f800283a 	ret

2002c91c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002c91c:	defff504 	addi	sp,sp,-44
2002c920:	dfc00a15 	stw	ra,40(sp)
2002c924:	df000915 	stw	fp,36(sp)
2002c928:	df000904 	addi	fp,sp,36
2002c92c:	e13ffc15 	stw	r4,-16(fp)
2002c930:	e17ffd15 	stw	r5,-12(fp)
2002c934:	e1bffe15 	stw	r6,-8(fp)
2002c938:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002c93c:	00bffa84 	movi	r2,-22
2002c940:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002c944:	e0bffd17 	ldw	r2,-12(fp)
2002c948:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002c94c:	e0bff817 	ldw	r2,-32(fp)
2002c950:	10800808 	cmpgei	r2,r2,32
2002c954:	1000271e 	bne	r2,zero,2002c9f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002c958:	0005303a 	rdctl	r2,status
2002c95c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002c960:	e0fffb17 	ldw	r3,-20(fp)
2002c964:	00bfff84 	movi	r2,-2
2002c968:	1884703a 	and	r2,r3,r2
2002c96c:	1001703a 	wrctl	status,r2
  
  return context;
2002c970:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002c974:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
2002c978:	00800074 	movhi	r2,1
2002c97c:	10a3d804 	addi	r2,r2,-28832
2002c980:	e0fff817 	ldw	r3,-32(fp)
2002c984:	180690fa 	slli	r3,r3,3
2002c988:	10c5883a 	add	r2,r2,r3
2002c98c:	e0fffe17 	ldw	r3,-8(fp)
2002c990:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2002c994:	00800074 	movhi	r2,1
2002c998:	10a3d804 	addi	r2,r2,-28832
2002c99c:	e0fff817 	ldw	r3,-32(fp)
2002c9a0:	180690fa 	slli	r3,r3,3
2002c9a4:	10c5883a 	add	r2,r2,r3
2002c9a8:	10800104 	addi	r2,r2,4
2002c9ac:	e0ffff17 	ldw	r3,-4(fp)
2002c9b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2002c9b4:	e0bffe17 	ldw	r2,-8(fp)
2002c9b8:	10000526 	beq	r2,zero,2002c9d0 <alt_iic_isr_register+0xb4>
2002c9bc:	e0bff817 	ldw	r2,-32(fp)
2002c9c0:	100b883a 	mov	r5,r2
2002c9c4:	e13ffc17 	ldw	r4,-16(fp)
2002c9c8:	002c7bc0 	call	2002c7bc <alt_ic_irq_enable>
2002c9cc:	00000406 	br	2002c9e0 <alt_iic_isr_register+0xc4>
2002c9d0:	e0bff817 	ldw	r2,-32(fp)
2002c9d4:	100b883a 	mov	r5,r2
2002c9d8:	e13ffc17 	ldw	r4,-16(fp)
2002c9dc:	002c8440 	call	2002c844 <alt_ic_irq_disable>
2002c9e0:	e0bff715 	stw	r2,-36(fp)
2002c9e4:	e0bffa17 	ldw	r2,-24(fp)
2002c9e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c9ec:	e0bff917 	ldw	r2,-28(fp)
2002c9f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2002c9f4:	e0bff717 	ldw	r2,-36(fp)
}
2002c9f8:	e037883a 	mov	sp,fp
2002c9fc:	dfc00117 	ldw	ra,4(sp)
2002ca00:	df000017 	ldw	fp,0(sp)
2002ca04:	dec00204 	addi	sp,sp,8
2002ca08:	f800283a 	ret

2002ca0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2002ca0c:	defff904 	addi	sp,sp,-28
2002ca10:	dfc00615 	stw	ra,24(sp)
2002ca14:	df000515 	stw	fp,20(sp)
2002ca18:	df000504 	addi	fp,sp,20
2002ca1c:	e13ffc15 	stw	r4,-16(fp)
2002ca20:	e17ffd15 	stw	r5,-12(fp)
2002ca24:	e1bffe15 	stw	r6,-8(fp)
2002ca28:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2002ca2c:	e1bfff17 	ldw	r6,-4(fp)
2002ca30:	e17ffe17 	ldw	r5,-8(fp)
2002ca34:	e13ffd17 	ldw	r4,-12(fp)
2002ca38:	002cc4c0 	call	2002cc4c <open>
2002ca3c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2002ca40:	e0bffb17 	ldw	r2,-20(fp)
2002ca44:	10001c16 	blt	r2,zero,2002cab8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2002ca48:	00800034 	movhi	r2,0
2002ca4c:	10827904 	addi	r2,r2,2532
2002ca50:	e0fffb17 	ldw	r3,-20(fp)
2002ca54:	18c00324 	muli	r3,r3,12
2002ca58:	10c5883a 	add	r2,r2,r3
2002ca5c:	10c00017 	ldw	r3,0(r2)
2002ca60:	e0bffc17 	ldw	r2,-16(fp)
2002ca64:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2002ca68:	00800034 	movhi	r2,0
2002ca6c:	10827904 	addi	r2,r2,2532
2002ca70:	e0fffb17 	ldw	r3,-20(fp)
2002ca74:	18c00324 	muli	r3,r3,12
2002ca78:	10c5883a 	add	r2,r2,r3
2002ca7c:	10800104 	addi	r2,r2,4
2002ca80:	10c00017 	ldw	r3,0(r2)
2002ca84:	e0bffc17 	ldw	r2,-16(fp)
2002ca88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2002ca8c:	00800034 	movhi	r2,0
2002ca90:	10827904 	addi	r2,r2,2532
2002ca94:	e0fffb17 	ldw	r3,-20(fp)
2002ca98:	18c00324 	muli	r3,r3,12
2002ca9c:	10c5883a 	add	r2,r2,r3
2002caa0:	10800204 	addi	r2,r2,8
2002caa4:	10c00017 	ldw	r3,0(r2)
2002caa8:	e0bffc17 	ldw	r2,-16(fp)
2002caac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2002cab0:	e13ffb17 	ldw	r4,-20(fp)
2002cab4:	00238180 	call	20023818 <alt_release_fd>
  }
} 
2002cab8:	0001883a 	nop
2002cabc:	e037883a 	mov	sp,fp
2002cac0:	dfc00117 	ldw	ra,4(sp)
2002cac4:	df000017 	ldw	fp,0(sp)
2002cac8:	dec00204 	addi	sp,sp,8
2002cacc:	f800283a 	ret

2002cad0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2002cad0:	defffb04 	addi	sp,sp,-20
2002cad4:	dfc00415 	stw	ra,16(sp)
2002cad8:	df000315 	stw	fp,12(sp)
2002cadc:	df000304 	addi	fp,sp,12
2002cae0:	e13ffd15 	stw	r4,-12(fp)
2002cae4:	e17ffe15 	stw	r5,-8(fp)
2002cae8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2002caec:	01c07fc4 	movi	r7,511
2002caf0:	01800044 	movi	r6,1
2002caf4:	e17ffd17 	ldw	r5,-12(fp)
2002caf8:	01000034 	movhi	r4,0
2002cafc:	21027c04 	addi	r4,r4,2544
2002cb00:	002ca0c0 	call	2002ca0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2002cb04:	01c07fc4 	movi	r7,511
2002cb08:	000d883a 	mov	r6,zero
2002cb0c:	e17ffe17 	ldw	r5,-8(fp)
2002cb10:	01000034 	movhi	r4,0
2002cb14:	21027904 	addi	r4,r4,2532
2002cb18:	002ca0c0 	call	2002ca0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2002cb1c:	01c07fc4 	movi	r7,511
2002cb20:	01800044 	movi	r6,1
2002cb24:	e17fff17 	ldw	r5,-4(fp)
2002cb28:	01000034 	movhi	r4,0
2002cb2c:	21027f04 	addi	r4,r4,2556
2002cb30:	002ca0c0 	call	2002ca0c <alt_open_fd>
}  
2002cb34:	0001883a 	nop
2002cb38:	e037883a 	mov	sp,fp
2002cb3c:	dfc00117 	ldw	ra,4(sp)
2002cb40:	df000017 	ldw	fp,0(sp)
2002cb44:	dec00204 	addi	sp,sp,8
2002cb48:	f800283a 	ret

2002cb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002cb4c:	defffe04 	addi	sp,sp,-8
2002cb50:	dfc00115 	stw	ra,4(sp)
2002cb54:	df000015 	stw	fp,0(sp)
2002cb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002cb5c:	d0a00917 	ldw	r2,-32732(gp)
2002cb60:	10000326 	beq	r2,zero,2002cb70 <alt_get_errno+0x24>
2002cb64:	d0a00917 	ldw	r2,-32732(gp)
2002cb68:	103ee83a 	callr	r2
2002cb6c:	00000106 	br	2002cb74 <alt_get_errno+0x28>
2002cb70:	d0a03104 	addi	r2,gp,-32572
}
2002cb74:	e037883a 	mov	sp,fp
2002cb78:	dfc00117 	ldw	ra,4(sp)
2002cb7c:	df000017 	ldw	fp,0(sp)
2002cb80:	dec00204 	addi	sp,sp,8
2002cb84:	f800283a 	ret

2002cb88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2002cb88:	defffd04 	addi	sp,sp,-12
2002cb8c:	df000215 	stw	fp,8(sp)
2002cb90:	df000204 	addi	fp,sp,8
2002cb94:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2002cb98:	e0bfff17 	ldw	r2,-4(fp)
2002cb9c:	10800217 	ldw	r2,8(r2)
2002cba0:	10d00034 	orhi	r3,r2,16384
2002cba4:	e0bfff17 	ldw	r2,-4(fp)
2002cba8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2002cbac:	e03ffe15 	stw	zero,-8(fp)
2002cbb0:	00001d06 	br	2002cc28 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2002cbb4:	00800034 	movhi	r2,0
2002cbb8:	10827904 	addi	r2,r2,2532
2002cbbc:	e0fffe17 	ldw	r3,-8(fp)
2002cbc0:	18c00324 	muli	r3,r3,12
2002cbc4:	10c5883a 	add	r2,r2,r3
2002cbc8:	10c00017 	ldw	r3,0(r2)
2002cbcc:	e0bfff17 	ldw	r2,-4(fp)
2002cbd0:	10800017 	ldw	r2,0(r2)
2002cbd4:	1880111e 	bne	r3,r2,2002cc1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2002cbd8:	00800034 	movhi	r2,0
2002cbdc:	10827904 	addi	r2,r2,2532
2002cbe0:	e0fffe17 	ldw	r3,-8(fp)
2002cbe4:	18c00324 	muli	r3,r3,12
2002cbe8:	10c5883a 	add	r2,r2,r3
2002cbec:	10800204 	addi	r2,r2,8
2002cbf0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2002cbf4:	1000090e 	bge	r2,zero,2002cc1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2002cbf8:	e0bffe17 	ldw	r2,-8(fp)
2002cbfc:	10c00324 	muli	r3,r2,12
2002cc00:	00800034 	movhi	r2,0
2002cc04:	10827904 	addi	r2,r2,2532
2002cc08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2002cc0c:	e0bfff17 	ldw	r2,-4(fp)
2002cc10:	18800226 	beq	r3,r2,2002cc1c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2002cc14:	00bffcc4 	movi	r2,-13
2002cc18:	00000806 	br	2002cc3c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2002cc1c:	e0bffe17 	ldw	r2,-8(fp)
2002cc20:	10800044 	addi	r2,r2,1
2002cc24:	e0bffe15 	stw	r2,-8(fp)
2002cc28:	d0a00817 	ldw	r2,-32736(gp)
2002cc2c:	1007883a 	mov	r3,r2
2002cc30:	e0bffe17 	ldw	r2,-8(fp)
2002cc34:	18bfdf2e 	bgeu	r3,r2,2002cbb4 <__flash_rwdata_start+0xfffff0cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2002cc38:	0005883a 	mov	r2,zero
}
2002cc3c:	e037883a 	mov	sp,fp
2002cc40:	df000017 	ldw	fp,0(sp)
2002cc44:	dec00104 	addi	sp,sp,4
2002cc48:	f800283a 	ret

2002cc4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2002cc4c:	defff604 	addi	sp,sp,-40
2002cc50:	dfc00915 	stw	ra,36(sp)
2002cc54:	df000815 	stw	fp,32(sp)
2002cc58:	df000804 	addi	fp,sp,32
2002cc5c:	e13ffd15 	stw	r4,-12(fp)
2002cc60:	e17ffe15 	stw	r5,-8(fp)
2002cc64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2002cc68:	00bfffc4 	movi	r2,-1
2002cc6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2002cc70:	00bffb44 	movi	r2,-19
2002cc74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2002cc78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2002cc7c:	d1600604 	addi	r5,gp,-32744
2002cc80:	e13ffd17 	ldw	r4,-12(fp)
2002cc84:	002d2c00 	call	2002d2c0 <alt_find_dev>
2002cc88:	e0bff815 	stw	r2,-32(fp)
2002cc8c:	e0bff817 	ldw	r2,-32(fp)
2002cc90:	1000051e 	bne	r2,zero,2002cca8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2002cc94:	e13ffd17 	ldw	r4,-12(fp)
2002cc98:	002d3500 	call	2002d350 <alt_find_file>
2002cc9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2002cca0:	00800044 	movi	r2,1
2002cca4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2002cca8:	e0bff817 	ldw	r2,-32(fp)
2002ccac:	10002926 	beq	r2,zero,2002cd54 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
2002ccb0:	e13ff817 	ldw	r4,-32(fp)
2002ccb4:	002d4580 	call	2002d458 <alt_get_fd>
2002ccb8:	e0bff915 	stw	r2,-28(fp)
2002ccbc:	e0bff917 	ldw	r2,-28(fp)
2002ccc0:	1000030e 	bge	r2,zero,2002ccd0 <open+0x84>
    {
      status = index;
2002ccc4:	e0bff917 	ldw	r2,-28(fp)
2002ccc8:	e0bffa15 	stw	r2,-24(fp)
2002cccc:	00002306 	br	2002cd5c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
2002ccd0:	e0bff917 	ldw	r2,-28(fp)
2002ccd4:	10c00324 	muli	r3,r2,12
2002ccd8:	00800034 	movhi	r2,0
2002ccdc:	10827904 	addi	r2,r2,2532
2002cce0:	1885883a 	add	r2,r3,r2
2002cce4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2002cce8:	e0fffe17 	ldw	r3,-8(fp)
2002ccec:	00900034 	movhi	r2,16384
2002ccf0:	10bfffc4 	addi	r2,r2,-1
2002ccf4:	1886703a 	and	r3,r3,r2
2002ccf8:	e0bffc17 	ldw	r2,-16(fp)
2002ccfc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2002cd00:	e0bffb17 	ldw	r2,-20(fp)
2002cd04:	1000051e 	bne	r2,zero,2002cd1c <open+0xd0>
2002cd08:	e13ffc17 	ldw	r4,-16(fp)
2002cd0c:	002cb880 	call	2002cb88 <alt_file_locked>
2002cd10:	e0bffa15 	stw	r2,-24(fp)
2002cd14:	e0bffa17 	ldw	r2,-24(fp)
2002cd18:	10001016 	blt	r2,zero,2002cd5c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2002cd1c:	e0bff817 	ldw	r2,-32(fp)
2002cd20:	10800317 	ldw	r2,12(r2)
2002cd24:	10000826 	beq	r2,zero,2002cd48 <open+0xfc>
2002cd28:	e0bff817 	ldw	r2,-32(fp)
2002cd2c:	10800317 	ldw	r2,12(r2)
2002cd30:	e1ffff17 	ldw	r7,-4(fp)
2002cd34:	e1bffe17 	ldw	r6,-8(fp)
2002cd38:	e17ffd17 	ldw	r5,-12(fp)
2002cd3c:	e13ffc17 	ldw	r4,-16(fp)
2002cd40:	103ee83a 	callr	r2
2002cd44:	00000106 	br	2002cd4c <open+0x100>
2002cd48:	0005883a 	mov	r2,zero
2002cd4c:	e0bffa15 	stw	r2,-24(fp)
2002cd50:	00000206 	br	2002cd5c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
2002cd54:	00bffb44 	movi	r2,-19
2002cd58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2002cd5c:	e0bffa17 	ldw	r2,-24(fp)
2002cd60:	1000090e 	bge	r2,zero,2002cd88 <open+0x13c>
  {
    alt_release_fd (index);  
2002cd64:	e13ff917 	ldw	r4,-28(fp)
2002cd68:	00238180 	call	20023818 <alt_release_fd>
    ALT_ERRNO = -status;
2002cd6c:	002cb4c0 	call	2002cb4c <alt_get_errno>
2002cd70:	1007883a 	mov	r3,r2
2002cd74:	e0bffa17 	ldw	r2,-24(fp)
2002cd78:	0085c83a 	sub	r2,zero,r2
2002cd7c:	18800015 	stw	r2,0(r3)
    return -1;
2002cd80:	00bfffc4 	movi	r2,-1
2002cd84:	00000106 	br	2002cd8c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
2002cd88:	e0bff917 	ldw	r2,-28(fp)
}
2002cd8c:	e037883a 	mov	sp,fp
2002cd90:	dfc00117 	ldw	ra,4(sp)
2002cd94:	df000017 	ldw	fp,0(sp)
2002cd98:	dec00204 	addi	sp,sp,8
2002cd9c:	f800283a 	ret

2002cda0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
2002cda0:	defffa04 	addi	sp,sp,-24
2002cda4:	df000515 	stw	fp,20(sp)
2002cda8:	df000504 	addi	fp,sp,20
2002cdac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002cdb0:	0005303a 	rdctl	r2,status
2002cdb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002cdb8:	e0fffc17 	ldw	r3,-16(fp)
2002cdbc:	00bfff84 	movi	r2,-2
2002cdc0:	1884703a 	and	r2,r3,r2
2002cdc4:	1001703a 	wrctl	status,r2
  
  return context;
2002cdc8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
2002cdcc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
2002cdd0:	e0bfff17 	ldw	r2,-4(fp)
2002cdd4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
2002cdd8:	e0bffd17 	ldw	r2,-12(fp)
2002cddc:	10800017 	ldw	r2,0(r2)
2002cde0:	e0fffd17 	ldw	r3,-12(fp)
2002cde4:	18c00117 	ldw	r3,4(r3)
2002cde8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
2002cdec:	e0bffd17 	ldw	r2,-12(fp)
2002cdf0:	10800117 	ldw	r2,4(r2)
2002cdf4:	e0fffd17 	ldw	r3,-12(fp)
2002cdf8:	18c00017 	ldw	r3,0(r3)
2002cdfc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
2002ce00:	e0bffd17 	ldw	r2,-12(fp)
2002ce04:	e0fffd17 	ldw	r3,-12(fp)
2002ce08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
2002ce0c:	e0bffd17 	ldw	r2,-12(fp)
2002ce10:	e0fffd17 	ldw	r3,-12(fp)
2002ce14:	10c00015 	stw	r3,0(r2)
2002ce18:	e0bffb17 	ldw	r2,-20(fp)
2002ce1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ce20:	e0bffe17 	ldw	r2,-8(fp)
2002ce24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
2002ce28:	0001883a 	nop
2002ce2c:	e037883a 	mov	sp,fp
2002ce30:	df000017 	ldw	fp,0(sp)
2002ce34:	dec00104 	addi	sp,sp,4
2002ce38:	f800283a 	ret

2002ce3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2002ce3c:	defffb04 	addi	sp,sp,-20
2002ce40:	dfc00415 	stw	ra,16(sp)
2002ce44:	df000315 	stw	fp,12(sp)
2002ce48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
2002ce4c:	d0a02b17 	ldw	r2,-32596(gp)
2002ce50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2002ce54:	d0a05017 	ldw	r2,-32448(gp)
2002ce58:	10800044 	addi	r2,r2,1
2002ce5c:	d0a05015 	stw	r2,-32448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2002ce60:	00002e06 	br	2002cf1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
2002ce64:	e0bffd17 	ldw	r2,-12(fp)
2002ce68:	10800017 	ldw	r2,0(r2)
2002ce6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2002ce70:	e0bffd17 	ldw	r2,-12(fp)
2002ce74:	10800403 	ldbu	r2,16(r2)
2002ce78:	10803fcc 	andi	r2,r2,255
2002ce7c:	10000426 	beq	r2,zero,2002ce90 <alt_tick+0x54>
2002ce80:	d0a05017 	ldw	r2,-32448(gp)
2002ce84:	1000021e 	bne	r2,zero,2002ce90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
2002ce88:	e0bffd17 	ldw	r2,-12(fp)
2002ce8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2002ce90:	e0bffd17 	ldw	r2,-12(fp)
2002ce94:	10800217 	ldw	r2,8(r2)
2002ce98:	d0e05017 	ldw	r3,-32448(gp)
2002ce9c:	18801d36 	bltu	r3,r2,2002cf14 <alt_tick+0xd8>
2002cea0:	e0bffd17 	ldw	r2,-12(fp)
2002cea4:	10800403 	ldbu	r2,16(r2)
2002cea8:	10803fcc 	andi	r2,r2,255
2002ceac:	1000191e 	bne	r2,zero,2002cf14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
2002ceb0:	e0bffd17 	ldw	r2,-12(fp)
2002ceb4:	10800317 	ldw	r2,12(r2)
2002ceb8:	e0fffd17 	ldw	r3,-12(fp)
2002cebc:	18c00517 	ldw	r3,20(r3)
2002cec0:	1809883a 	mov	r4,r3
2002cec4:	103ee83a 	callr	r2
2002cec8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2002cecc:	e0bfff17 	ldw	r2,-4(fp)
2002ced0:	1000031e 	bne	r2,zero,2002cee0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
2002ced4:	e13ffd17 	ldw	r4,-12(fp)
2002ced8:	002cda00 	call	2002cda0 <alt_alarm_stop>
2002cedc:	00000d06 	br	2002cf14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
2002cee0:	e0bffd17 	ldw	r2,-12(fp)
2002cee4:	10c00217 	ldw	r3,8(r2)
2002cee8:	e0bfff17 	ldw	r2,-4(fp)
2002ceec:	1887883a 	add	r3,r3,r2
2002cef0:	e0bffd17 	ldw	r2,-12(fp)
2002cef4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2002cef8:	e0bffd17 	ldw	r2,-12(fp)
2002cefc:	10c00217 	ldw	r3,8(r2)
2002cf00:	d0a05017 	ldw	r2,-32448(gp)
2002cf04:	1880032e 	bgeu	r3,r2,2002cf14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2002cf08:	e0bffd17 	ldw	r2,-12(fp)
2002cf0c:	00c00044 	movi	r3,1
2002cf10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
2002cf14:	e0bffe17 	ldw	r2,-8(fp)
2002cf18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2002cf1c:	e0fffd17 	ldw	r3,-12(fp)
2002cf20:	d0a02b04 	addi	r2,gp,-32596
2002cf24:	18bfcf1e 	bne	r3,r2,2002ce64 <__flash_rwdata_start+0xfffff37c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2002cf28:	0024a040 	call	20024a04 <OSTimeTick>
}
2002cf2c:	0001883a 	nop
2002cf30:	e037883a 	mov	sp,fp
2002cf34:	dfc00117 	ldw	ra,4(sp)
2002cf38:	df000017 	ldw	fp,0(sp)
2002cf3c:	dec00204 	addi	sp,sp,8
2002cf40:	f800283a 	ret

2002cf44 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
2002cf44:	deffff04 	addi	sp,sp,-4
2002cf48:	df000015 	stw	fp,0(sp)
2002cf4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2002cf50:	000170fa 	wrctl	ienable,zero
}
2002cf54:	0001883a 	nop
2002cf58:	e037883a 	mov	sp,fp
2002cf5c:	df000017 	ldw	fp,0(sp)
2002cf60:	dec00104 	addi	sp,sp,4
2002cf64:	f800283a 	ret

2002cf68 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
2002cf68:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
2002cf6c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
2002cf70:	d1204917 	ldw	r4,-32476(gp)

      stw ra,  0(sp)
2002cf74:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
2002cf78:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
2002cf7c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
2002cf80:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
2002cf84:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
2002cf88:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
2002cf8c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
2002cf90:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
2002cf94:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
2002cf98:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
2002cf9c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
2002cfa0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
2002cfa4:	002d1dc0 	call	2002d1dc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
2002cfa8:	d1204417 	ldw	r4,-32496(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
2002cfac:	d1603c07 	ldb	r5,-32528(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
2002cfb0:	d1204915 	stw	r4,-32476(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
2002cfb4:	d1603c45 	stb	r5,-32527(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
2002cfb8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
2002cfbc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
2002cfc0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
2002cfc4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
2002cfc8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
2002cfcc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
2002cfd0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
2002cfd4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
2002cfd8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
2002cfdc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
2002cfe0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
2002cfe4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
2002cfe8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
2002cfec:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
2002cff0:	f800283a 	ret

2002cff4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
2002cff4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
2002cff8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
2002cffc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
2002d000:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
2002d004:	002d1dc0 	call	2002d1dc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
2002d008:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
2002d00c:	d4a03a45 	stb	r18,-32535(gp)

      /*
       * start execution of the new task.
       */

      br 9b
2002d010:	003fe506 	br	2002cfa8 <__flash_rwdata_start+0xfffff4c0>

2002d014 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
2002d014:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
2002d018:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
2002d01c:	10800054 	ori	r2,r2,1
      wrctl status, r2
2002d020:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
2002d024:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
2002d028:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
2002d02c:	dec00204 	addi	sp,sp,8

      callr r2
2002d030:	103ee83a 	callr	r2

      nop
2002d034:	0001883a 	nop

2002d038 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
2002d038:	defff704 	addi	sp,sp,-36
2002d03c:	dfc00815 	stw	ra,32(sp)
2002d040:	df000715 	stw	fp,28(sp)
2002d044:	df000704 	addi	fp,sp,28
2002d048:	e13ffc15 	stw	r4,-16(fp)
2002d04c:	e17ffd15 	stw	r5,-12(fp)
2002d050:	e1bffe15 	stw	r6,-8(fp)
2002d054:	3805883a 	mov	r2,r7
2002d058:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
2002d05c:	e0fffe17 	ldw	r3,-8(fp)
2002d060:	00bfff04 	movi	r2,-4
2002d064:	1884703a 	and	r2,r3,r2
2002d068:	10bef704 	addi	r2,r2,-1060
2002d06c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
2002d070:	01810904 	movi	r6,1060
2002d074:	000b883a 	mov	r5,zero
2002d078:	e13ff917 	ldw	r4,-28(fp)
2002d07c:	0021a400 	call	20021a40 <memset>
2002d080:	e0bff917 	ldw	r2,-28(fp)
2002d084:	10c0bb04 	addi	r3,r2,748
2002d088:	e0bff917 	ldw	r2,-28(fp)
2002d08c:	10c00115 	stw	r3,4(r2)
2002d090:	e0bff917 	ldw	r2,-28(fp)
2002d094:	10c0d504 	addi	r3,r2,852
2002d098:	e0bff917 	ldw	r2,-28(fp)
2002d09c:	10c00215 	stw	r3,8(r2)
2002d0a0:	e0bff917 	ldw	r2,-28(fp)
2002d0a4:	10c0ef04 	addi	r3,r2,956
2002d0a8:	e0bff917 	ldw	r2,-28(fp)
2002d0ac:	10c00315 	stw	r3,12(r2)
2002d0b0:	e0fff917 	ldw	r3,-28(fp)
2002d0b4:	00800034 	movhi	r2,0
2002d0b8:	10806304 	addi	r2,r2,396
2002d0bc:	18800d15 	stw	r2,52(r3)
2002d0c0:	e0bff917 	ldw	r2,-28(fp)
2002d0c4:	00c00044 	movi	r3,1
2002d0c8:	10c02915 	stw	r3,164(r2)
2002d0cc:	10002a15 	stw	zero,168(r2)
2002d0d0:	e0bff917 	ldw	r2,-28(fp)
2002d0d4:	00ccc384 	movi	r3,13070
2002d0d8:	10c02b0d 	sth	r3,172(r2)
2002d0dc:	e0bff917 	ldw	r2,-28(fp)
2002d0e0:	00eaf344 	movi	r3,-21555
2002d0e4:	10c02b8d 	sth	r3,174(r2)
2002d0e8:	e0bff917 	ldw	r2,-28(fp)
2002d0ec:	00c48d04 	movi	r3,4660
2002d0f0:	10c02c0d 	sth	r3,176(r2)
2002d0f4:	e0bff917 	ldw	r2,-28(fp)
2002d0f8:	00f99b44 	movi	r3,-6547
2002d0fc:	10c02c8d 	sth	r3,178(r2)
2002d100:	e0bff917 	ldw	r2,-28(fp)
2002d104:	00f7bb04 	movi	r3,-8468
2002d108:	10c02d0d 	sth	r3,180(r2)
2002d10c:	e0bff917 	ldw	r2,-28(fp)
2002d110:	00c00144 	movi	r3,5
2002d114:	10c02d8d 	sth	r3,182(r2)
2002d118:	e0bff917 	ldw	r2,-28(fp)
2002d11c:	00c002c4 	movi	r3,11
2002d120:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
2002d124:	e0bff917 	ldw	r2,-28(fp)
2002d128:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
2002d12c:	e0bffa17 	ldw	r2,-24(fp)
2002d130:	10bff304 	addi	r2,r2,-52
2002d134:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
2002d138:	e0bffb17 	ldw	r2,-20(fp)
2002d13c:	10800c04 	addi	r2,r2,48
2002d140:	e0fffc17 	ldw	r3,-16(fp)
2002d144:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
2002d148:	e0bffb17 	ldw	r2,-20(fp)
2002d14c:	10800b04 	addi	r2,r2,44
2002d150:	e0fffd17 	ldw	r3,-12(fp)
2002d154:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
2002d158:	e0bffb17 	ldw	r2,-20(fp)
2002d15c:	10800a04 	addi	r2,r2,40
2002d160:	e0fff917 	ldw	r3,-28(fp)
2002d164:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
2002d168:	008800f4 	movhi	r2,8195
2002d16c:	10b40504 	addi	r2,r2,-12268
2002d170:	10c00104 	addi	r3,r2,4
2002d174:	e0bffb17 	ldw	r2,-20(fp)
2002d178:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
2002d17c:	e0bffb17 	ldw	r2,-20(fp)
}
2002d180:	e037883a 	mov	sp,fp
2002d184:	dfc00117 	ldw	ra,4(sp)
2002d188:	df000017 	ldw	fp,0(sp)
2002d18c:	dec00204 	addi	sp,sp,8
2002d190:	f800283a 	ret

2002d194 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
2002d194:	defffe04 	addi	sp,sp,-8
2002d198:	df000115 	stw	fp,4(sp)
2002d19c:	df000104 	addi	fp,sp,4
2002d1a0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
2002d1a4:	0001883a 	nop
2002d1a8:	e037883a 	mov	sp,fp
2002d1ac:	df000017 	ldw	fp,0(sp)
2002d1b0:	dec00104 	addi	sp,sp,4
2002d1b4:	f800283a 	ret

2002d1b8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
2002d1b8:	defffe04 	addi	sp,sp,-8
2002d1bc:	df000115 	stw	fp,4(sp)
2002d1c0:	df000104 	addi	fp,sp,4
2002d1c4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
2002d1c8:	0001883a 	nop
2002d1cc:	e037883a 	mov	sp,fp
2002d1d0:	df000017 	ldw	fp,0(sp)
2002d1d4:	dec00104 	addi	sp,sp,4
2002d1d8:	f800283a 	ret

2002d1dc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
2002d1dc:	deffff04 	addi	sp,sp,-4
2002d1e0:	df000015 	stw	fp,0(sp)
2002d1e4:	d839883a 	mov	fp,sp
}
2002d1e8:	0001883a 	nop
2002d1ec:	e037883a 	mov	sp,fp
2002d1f0:	df000017 	ldw	fp,0(sp)
2002d1f4:	dec00104 	addi	sp,sp,4
2002d1f8:	f800283a 	ret

2002d1fc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
2002d1fc:	deffff04 	addi	sp,sp,-4
2002d200:	df000015 	stw	fp,0(sp)
2002d204:	d839883a 	mov	fp,sp
}
2002d208:	0001883a 	nop
2002d20c:	e037883a 	mov	sp,fp
2002d210:	df000017 	ldw	fp,0(sp)
2002d214:	dec00104 	addi	sp,sp,4
2002d218:	f800283a 	ret

2002d21c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
2002d21c:	deffff04 	addi	sp,sp,-4
2002d220:	df000015 	stw	fp,0(sp)
2002d224:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
2002d228:	0001883a 	nop
2002d22c:	e037883a 	mov	sp,fp
2002d230:	df000017 	ldw	fp,0(sp)
2002d234:	dec00104 	addi	sp,sp,4
2002d238:	f800283a 	ret

2002d23c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
2002d23c:	deffff04 	addi	sp,sp,-4
2002d240:	df000015 	stw	fp,0(sp)
2002d244:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
2002d248:	0001883a 	nop
2002d24c:	e037883a 	mov	sp,fp
2002d250:	df000017 	ldw	fp,0(sp)
2002d254:	dec00104 	addi	sp,sp,4
2002d258:	f800283a 	ret

2002d25c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
2002d25c:	deffff04 	addi	sp,sp,-4
2002d260:	df000015 	stw	fp,0(sp)
2002d264:	d839883a 	mov	fp,sp
}
2002d268:	0001883a 	nop
2002d26c:	e037883a 	mov	sp,fp
2002d270:	df000017 	ldw	fp,0(sp)
2002d274:	dec00104 	addi	sp,sp,4
2002d278:	f800283a 	ret

2002d27c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
2002d27c:	deffff04 	addi	sp,sp,-4
2002d280:	df000015 	stw	fp,0(sp)
2002d284:	d839883a 	mov	fp,sp
}
2002d288:	0001883a 	nop
2002d28c:	e037883a 	mov	sp,fp
2002d290:	df000017 	ldw	fp,0(sp)
2002d294:	dec00104 	addi	sp,sp,4
2002d298:	f800283a 	ret

2002d29c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
2002d29c:	defffe04 	addi	sp,sp,-8
2002d2a0:	df000115 	stw	fp,4(sp)
2002d2a4:	df000104 	addi	fp,sp,4
2002d2a8:	e13fff15 	stw	r4,-4(fp)
}
2002d2ac:	0001883a 	nop
2002d2b0:	e037883a 	mov	sp,fp
2002d2b4:	df000017 	ldw	fp,0(sp)
2002d2b8:	dec00104 	addi	sp,sp,4
2002d2bc:	f800283a 	ret

2002d2c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2002d2c0:	defffa04 	addi	sp,sp,-24
2002d2c4:	dfc00515 	stw	ra,20(sp)
2002d2c8:	df000415 	stw	fp,16(sp)
2002d2cc:	df000404 	addi	fp,sp,16
2002d2d0:	e13ffe15 	stw	r4,-8(fp)
2002d2d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2002d2d8:	e0bfff17 	ldw	r2,-4(fp)
2002d2dc:	10800017 	ldw	r2,0(r2)
2002d2e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2002d2e4:	e13ffe17 	ldw	r4,-8(fp)
2002d2e8:	00204300 	call	20020430 <strlen>
2002d2ec:	10800044 	addi	r2,r2,1
2002d2f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002d2f4:	00000d06 	br	2002d32c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2002d2f8:	e0bffc17 	ldw	r2,-16(fp)
2002d2fc:	10800217 	ldw	r2,8(r2)
2002d300:	e0fffd17 	ldw	r3,-12(fp)
2002d304:	180d883a 	mov	r6,r3
2002d308:	e17ffe17 	ldw	r5,-8(fp)
2002d30c:	1009883a 	mov	r4,r2
2002d310:	002d6100 	call	2002d610 <memcmp>
2002d314:	1000021e 	bne	r2,zero,2002d320 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2002d318:	e0bffc17 	ldw	r2,-16(fp)
2002d31c:	00000706 	br	2002d33c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2002d320:	e0bffc17 	ldw	r2,-16(fp)
2002d324:	10800017 	ldw	r2,0(r2)
2002d328:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002d32c:	e0fffc17 	ldw	r3,-16(fp)
2002d330:	e0bfff17 	ldw	r2,-4(fp)
2002d334:	18bff01e 	bne	r3,r2,2002d2f8 <__flash_rwdata_start+0xfffff810>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2002d338:	0005883a 	mov	r2,zero
}
2002d33c:	e037883a 	mov	sp,fp
2002d340:	dfc00117 	ldw	ra,4(sp)
2002d344:	df000017 	ldw	fp,0(sp)
2002d348:	dec00204 	addi	sp,sp,8
2002d34c:	f800283a 	ret

2002d350 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2002d350:	defffb04 	addi	sp,sp,-20
2002d354:	dfc00415 	stw	ra,16(sp)
2002d358:	df000315 	stw	fp,12(sp)
2002d35c:	df000304 	addi	fp,sp,12
2002d360:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2002d364:	d0a00417 	ldw	r2,-32752(gp)
2002d368:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2002d36c:	00003106 	br	2002d434 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
2002d370:	e0bffd17 	ldw	r2,-12(fp)
2002d374:	10800217 	ldw	r2,8(r2)
2002d378:	1009883a 	mov	r4,r2
2002d37c:	00204300 	call	20020430 <strlen>
2002d380:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2002d384:	e0bffd17 	ldw	r2,-12(fp)
2002d388:	10c00217 	ldw	r3,8(r2)
2002d38c:	e0bffe17 	ldw	r2,-8(fp)
2002d390:	10bfffc4 	addi	r2,r2,-1
2002d394:	1885883a 	add	r2,r3,r2
2002d398:	10800003 	ldbu	r2,0(r2)
2002d39c:	10803fcc 	andi	r2,r2,255
2002d3a0:	1080201c 	xori	r2,r2,128
2002d3a4:	10bfe004 	addi	r2,r2,-128
2002d3a8:	10800bd8 	cmpnei	r2,r2,47
2002d3ac:	1000031e 	bne	r2,zero,2002d3bc <alt_find_file+0x6c>
    {
      len -= 1;
2002d3b0:	e0bffe17 	ldw	r2,-8(fp)
2002d3b4:	10bfffc4 	addi	r2,r2,-1
2002d3b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2002d3bc:	e0bffe17 	ldw	r2,-8(fp)
2002d3c0:	e0ffff17 	ldw	r3,-4(fp)
2002d3c4:	1885883a 	add	r2,r3,r2
2002d3c8:	10800003 	ldbu	r2,0(r2)
2002d3cc:	10803fcc 	andi	r2,r2,255
2002d3d0:	1080201c 	xori	r2,r2,128
2002d3d4:	10bfe004 	addi	r2,r2,-128
2002d3d8:	10800be0 	cmpeqi	r2,r2,47
2002d3dc:	1000081e 	bne	r2,zero,2002d400 <alt_find_file+0xb0>
2002d3e0:	e0bffe17 	ldw	r2,-8(fp)
2002d3e4:	e0ffff17 	ldw	r3,-4(fp)
2002d3e8:	1885883a 	add	r2,r3,r2
2002d3ec:	10800003 	ldbu	r2,0(r2)
2002d3f0:	10803fcc 	andi	r2,r2,255
2002d3f4:	1080201c 	xori	r2,r2,128
2002d3f8:	10bfe004 	addi	r2,r2,-128
2002d3fc:	10000a1e 	bne	r2,zero,2002d428 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
2002d400:	e0bffd17 	ldw	r2,-12(fp)
2002d404:	10800217 	ldw	r2,8(r2)
2002d408:	e0fffe17 	ldw	r3,-8(fp)
2002d40c:	180d883a 	mov	r6,r3
2002d410:	e17fff17 	ldw	r5,-4(fp)
2002d414:	1009883a 	mov	r4,r2
2002d418:	002d6100 	call	2002d610 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2002d41c:	1000021e 	bne	r2,zero,2002d428 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2002d420:	e0bffd17 	ldw	r2,-12(fp)
2002d424:	00000706 	br	2002d444 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
2002d428:	e0bffd17 	ldw	r2,-12(fp)
2002d42c:	10800017 	ldw	r2,0(r2)
2002d430:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2002d434:	e0fffd17 	ldw	r3,-12(fp)
2002d438:	d0a00404 	addi	r2,gp,-32752
2002d43c:	18bfcc1e 	bne	r3,r2,2002d370 <__flash_rwdata_start+0xfffff888>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2002d440:	0005883a 	mov	r2,zero
}
2002d444:	e037883a 	mov	sp,fp
2002d448:	dfc00117 	ldw	ra,4(sp)
2002d44c:	df000017 	ldw	fp,0(sp)
2002d450:	dec00204 	addi	sp,sp,8
2002d454:	f800283a 	ret

2002d458 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2002d458:	defff904 	addi	sp,sp,-28
2002d45c:	dfc00615 	stw	ra,24(sp)
2002d460:	df000515 	stw	fp,20(sp)
2002d464:	df000504 	addi	fp,sp,20
2002d468:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2002d46c:	00bffa04 	movi	r2,-24
2002d470:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
2002d474:	d0a03217 	ldw	r2,-32568(gp)
2002d478:	e0bffd15 	stw	r2,-12(fp)
2002d47c:	e03ffe0d 	sth	zero,-8(fp)
2002d480:	e0bffe0b 	ldhu	r2,-8(fp)
2002d484:	e0fffe84 	addi	r3,fp,-6
2002d488:	180d883a 	mov	r6,r3
2002d48c:	100b883a 	mov	r5,r2
2002d490:	e13ffd17 	ldw	r4,-12(fp)
2002d494:	00292480 	call	20029248 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2002d498:	e03ffb15 	stw	zero,-20(fp)
2002d49c:	00001906 	br	2002d504 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
2002d4a0:	00800034 	movhi	r2,0
2002d4a4:	10827904 	addi	r2,r2,2532
2002d4a8:	e0fffb17 	ldw	r3,-20(fp)
2002d4ac:	18c00324 	muli	r3,r3,12
2002d4b0:	10c5883a 	add	r2,r2,r3
2002d4b4:	10800017 	ldw	r2,0(r2)
2002d4b8:	10000f1e 	bne	r2,zero,2002d4f8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
2002d4bc:	00800034 	movhi	r2,0
2002d4c0:	10827904 	addi	r2,r2,2532
2002d4c4:	e0fffb17 	ldw	r3,-20(fp)
2002d4c8:	18c00324 	muli	r3,r3,12
2002d4cc:	10c5883a 	add	r2,r2,r3
2002d4d0:	e0ffff17 	ldw	r3,-4(fp)
2002d4d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2002d4d8:	d0e00817 	ldw	r3,-32736(gp)
2002d4dc:	e0bffb17 	ldw	r2,-20(fp)
2002d4e0:	1880020e 	bge	r3,r2,2002d4ec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
2002d4e4:	e0bffb17 	ldw	r2,-20(fp)
2002d4e8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
2002d4ec:	e0bffb17 	ldw	r2,-20(fp)
2002d4f0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
2002d4f4:	00000606 	br	2002d510 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2002d4f8:	e0bffb17 	ldw	r2,-20(fp)
2002d4fc:	10800044 	addi	r2,r2,1
2002d500:	e0bffb15 	stw	r2,-20(fp)
2002d504:	e0bffb17 	ldw	r2,-20(fp)
2002d508:	10800810 	cmplti	r2,r2,32
2002d50c:	103fe41e 	bne	r2,zero,2002d4a0 <__flash_rwdata_start+0xfffff9b8>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
2002d510:	d0a03217 	ldw	r2,-32568(gp)
2002d514:	1009883a 	mov	r4,r2
2002d518:	00295c00 	call	200295c0 <OSSemPost>

  return rc;
2002d51c:	e0bffc17 	ldw	r2,-16(fp)
}
2002d520:	e037883a 	mov	sp,fp
2002d524:	dfc00117 	ldw	ra,4(sp)
2002d528:	df000017 	ldw	fp,0(sp)
2002d52c:	dec00204 	addi	sp,sp,8
2002d530:	f800283a 	ret

2002d534 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2002d534:	defffb04 	addi	sp,sp,-20
2002d538:	df000415 	stw	fp,16(sp)
2002d53c:	df000404 	addi	fp,sp,16
2002d540:	e13ffe15 	stw	r4,-8(fp)
2002d544:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2002d548:	e0bfff17 	ldw	r2,-4(fp)
2002d54c:	10840070 	cmpltui	r2,r2,4097
2002d550:	1000021e 	bne	r2,zero,2002d55c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2002d554:	00840004 	movi	r2,4096
2002d558:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2002d55c:	e0fffe17 	ldw	r3,-8(fp)
2002d560:	e0bfff17 	ldw	r2,-4(fp)
2002d564:	1885883a 	add	r2,r3,r2
2002d568:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2002d56c:	e0bffe17 	ldw	r2,-8(fp)
2002d570:	e0bffc15 	stw	r2,-16(fp)
2002d574:	00000506 	br	2002d58c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2002d578:	e0bffc17 	ldw	r2,-16(fp)
2002d57c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2002d580:	e0bffc17 	ldw	r2,-16(fp)
2002d584:	10800804 	addi	r2,r2,32
2002d588:	e0bffc15 	stw	r2,-16(fp)
2002d58c:	e0fffc17 	ldw	r3,-16(fp)
2002d590:	e0bffd17 	ldw	r2,-12(fp)
2002d594:	18bff836 	bltu	r3,r2,2002d578 <__flash_rwdata_start+0xfffffa90>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2002d598:	e0bffe17 	ldw	r2,-8(fp)
2002d59c:	108007cc 	andi	r2,r2,31
2002d5a0:	10000226 	beq	r2,zero,2002d5ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2002d5a4:	e0bffc17 	ldw	r2,-16(fp)
2002d5a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2002d5ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2002d5b0:	0001883a 	nop
2002d5b4:	e037883a 	mov	sp,fp
2002d5b8:	df000017 	ldw	fp,0(sp)
2002d5bc:	dec00104 	addi	sp,sp,4
2002d5c0:	f800283a 	ret

2002d5c4 <atexit>:
2002d5c4:	200b883a 	mov	r5,r4
2002d5c8:	000f883a 	mov	r7,zero
2002d5cc:	000d883a 	mov	r6,zero
2002d5d0:	0009883a 	mov	r4,zero
2002d5d4:	002d68c1 	jmpi	2002d68c <__register_exitproc>

2002d5d8 <exit>:
2002d5d8:	defffe04 	addi	sp,sp,-8
2002d5dc:	000b883a 	mov	r5,zero
2002d5e0:	dc000015 	stw	r16,0(sp)
2002d5e4:	dfc00115 	stw	ra,4(sp)
2002d5e8:	2021883a 	mov	r16,r4
2002d5ec:	002d7a40 	call	2002d7a4 <__call_exitprocs>
2002d5f0:	00800034 	movhi	r2,0
2002d5f4:	1086f404 	addi	r2,r2,7120
2002d5f8:	11000017 	ldw	r4,0(r2)
2002d5fc:	20800f17 	ldw	r2,60(r4)
2002d600:	10000126 	beq	r2,zero,2002d608 <exit+0x30>
2002d604:	103ee83a 	callr	r2
2002d608:	8009883a 	mov	r4,r16
2002d60c:	002d9240 	call	2002d924 <_exit>

2002d610 <memcmp>:
2002d610:	01c000c4 	movi	r7,3
2002d614:	3980192e 	bgeu	r7,r6,2002d67c <memcmp+0x6c>
2002d618:	2144b03a 	or	r2,r4,r5
2002d61c:	11c4703a 	and	r2,r2,r7
2002d620:	10000f26 	beq	r2,zero,2002d660 <memcmp+0x50>
2002d624:	20800003 	ldbu	r2,0(r4)
2002d628:	28c00003 	ldbu	r3,0(r5)
2002d62c:	10c0151e 	bne	r2,r3,2002d684 <memcmp+0x74>
2002d630:	31bfff84 	addi	r6,r6,-2
2002d634:	01ffffc4 	movi	r7,-1
2002d638:	00000406 	br	2002d64c <memcmp+0x3c>
2002d63c:	20800003 	ldbu	r2,0(r4)
2002d640:	28c00003 	ldbu	r3,0(r5)
2002d644:	31bfffc4 	addi	r6,r6,-1
2002d648:	10c00e1e 	bne	r2,r3,2002d684 <memcmp+0x74>
2002d64c:	21000044 	addi	r4,r4,1
2002d650:	29400044 	addi	r5,r5,1
2002d654:	31fff91e 	bne	r6,r7,2002d63c <__flash_rwdata_start+0xfffffb54>
2002d658:	0005883a 	mov	r2,zero
2002d65c:	f800283a 	ret
2002d660:	20c00017 	ldw	r3,0(r4)
2002d664:	28800017 	ldw	r2,0(r5)
2002d668:	18bfee1e 	bne	r3,r2,2002d624 <__flash_rwdata_start+0xfffffb3c>
2002d66c:	31bfff04 	addi	r6,r6,-4
2002d670:	21000104 	addi	r4,r4,4
2002d674:	29400104 	addi	r5,r5,4
2002d678:	39bff936 	bltu	r7,r6,2002d660 <__flash_rwdata_start+0xfffffb78>
2002d67c:	303fe91e 	bne	r6,zero,2002d624 <__flash_rwdata_start+0xfffffb3c>
2002d680:	003ff506 	br	2002d658 <__flash_rwdata_start+0xfffffb70>
2002d684:	10c5c83a 	sub	r2,r2,r3
2002d688:	f800283a 	ret

2002d68c <__register_exitproc>:
2002d68c:	defffa04 	addi	sp,sp,-24
2002d690:	dc000315 	stw	r16,12(sp)
2002d694:	04000034 	movhi	r16,0
2002d698:	8406f404 	addi	r16,r16,7120
2002d69c:	80c00017 	ldw	r3,0(r16)
2002d6a0:	dc400415 	stw	r17,16(sp)
2002d6a4:	dfc00515 	stw	ra,20(sp)
2002d6a8:	18805217 	ldw	r2,328(r3)
2002d6ac:	2023883a 	mov	r17,r4
2002d6b0:	10003726 	beq	r2,zero,2002d790 <__register_exitproc+0x104>
2002d6b4:	10c00117 	ldw	r3,4(r2)
2002d6b8:	010007c4 	movi	r4,31
2002d6bc:	20c00e16 	blt	r4,r3,2002d6f8 <__register_exitproc+0x6c>
2002d6c0:	1a000044 	addi	r8,r3,1
2002d6c4:	8800221e 	bne	r17,zero,2002d750 <__register_exitproc+0xc4>
2002d6c8:	18c00084 	addi	r3,r3,2
2002d6cc:	18c7883a 	add	r3,r3,r3
2002d6d0:	18c7883a 	add	r3,r3,r3
2002d6d4:	12000115 	stw	r8,4(r2)
2002d6d8:	10c7883a 	add	r3,r2,r3
2002d6dc:	19400015 	stw	r5,0(r3)
2002d6e0:	0005883a 	mov	r2,zero
2002d6e4:	dfc00517 	ldw	ra,20(sp)
2002d6e8:	dc400417 	ldw	r17,16(sp)
2002d6ec:	dc000317 	ldw	r16,12(sp)
2002d6f0:	dec00604 	addi	sp,sp,24
2002d6f4:	f800283a 	ret
2002d6f8:	00800034 	movhi	r2,0
2002d6fc:	10800004 	addi	r2,r2,0
2002d700:	10002626 	beq	r2,zero,2002d79c <__register_exitproc+0x110>
2002d704:	01006404 	movi	r4,400
2002d708:	d9400015 	stw	r5,0(sp)
2002d70c:	d9800115 	stw	r6,4(sp)
2002d710:	d9c00215 	stw	r7,8(sp)
2002d714:	00000000 	call	20000000 <__alt_data_end+0x1c000000>
2002d718:	d9400017 	ldw	r5,0(sp)
2002d71c:	d9800117 	ldw	r6,4(sp)
2002d720:	d9c00217 	ldw	r7,8(sp)
2002d724:	10001d26 	beq	r2,zero,2002d79c <__register_exitproc+0x110>
2002d728:	81000017 	ldw	r4,0(r16)
2002d72c:	10000115 	stw	zero,4(r2)
2002d730:	02000044 	movi	r8,1
2002d734:	22405217 	ldw	r9,328(r4)
2002d738:	0007883a 	mov	r3,zero
2002d73c:	12400015 	stw	r9,0(r2)
2002d740:	20805215 	stw	r2,328(r4)
2002d744:	10006215 	stw	zero,392(r2)
2002d748:	10006315 	stw	zero,396(r2)
2002d74c:	883fde26 	beq	r17,zero,2002d6c8 <__flash_rwdata_start+0xfffffbe0>
2002d750:	18c9883a 	add	r4,r3,r3
2002d754:	2109883a 	add	r4,r4,r4
2002d758:	1109883a 	add	r4,r2,r4
2002d75c:	21802215 	stw	r6,136(r4)
2002d760:	01800044 	movi	r6,1
2002d764:	12406217 	ldw	r9,392(r2)
2002d768:	30cc983a 	sll	r6,r6,r3
2002d76c:	4992b03a 	or	r9,r9,r6
2002d770:	12406215 	stw	r9,392(r2)
2002d774:	21c04215 	stw	r7,264(r4)
2002d778:	01000084 	movi	r4,2
2002d77c:	893fd21e 	bne	r17,r4,2002d6c8 <__flash_rwdata_start+0xfffffbe0>
2002d780:	11006317 	ldw	r4,396(r2)
2002d784:	218cb03a 	or	r6,r4,r6
2002d788:	11806315 	stw	r6,396(r2)
2002d78c:	003fce06 	br	2002d6c8 <__flash_rwdata_start+0xfffffbe0>
2002d790:	18805304 	addi	r2,r3,332
2002d794:	18805215 	stw	r2,328(r3)
2002d798:	003fc606 	br	2002d6b4 <__flash_rwdata_start+0xfffffbcc>
2002d79c:	00bfffc4 	movi	r2,-1
2002d7a0:	003fd006 	br	2002d6e4 <__flash_rwdata_start+0xfffffbfc>

2002d7a4 <__call_exitprocs>:
2002d7a4:	defff504 	addi	sp,sp,-44
2002d7a8:	df000915 	stw	fp,36(sp)
2002d7ac:	dd400615 	stw	r21,24(sp)
2002d7b0:	dc800315 	stw	r18,12(sp)
2002d7b4:	dfc00a15 	stw	ra,40(sp)
2002d7b8:	ddc00815 	stw	r23,32(sp)
2002d7bc:	dd800715 	stw	r22,28(sp)
2002d7c0:	dd000515 	stw	r20,20(sp)
2002d7c4:	dcc00415 	stw	r19,16(sp)
2002d7c8:	dc400215 	stw	r17,8(sp)
2002d7cc:	dc000115 	stw	r16,4(sp)
2002d7d0:	d9000015 	stw	r4,0(sp)
2002d7d4:	2839883a 	mov	fp,r5
2002d7d8:	04800044 	movi	r18,1
2002d7dc:	057fffc4 	movi	r21,-1
2002d7e0:	00800034 	movhi	r2,0
2002d7e4:	1086f404 	addi	r2,r2,7120
2002d7e8:	12000017 	ldw	r8,0(r2)
2002d7ec:	45005217 	ldw	r20,328(r8)
2002d7f0:	44c05204 	addi	r19,r8,328
2002d7f4:	a0001c26 	beq	r20,zero,2002d868 <__call_exitprocs+0xc4>
2002d7f8:	a0800117 	ldw	r2,4(r20)
2002d7fc:	15ffffc4 	addi	r23,r2,-1
2002d800:	b8000d16 	blt	r23,zero,2002d838 <__call_exitprocs+0x94>
2002d804:	14000044 	addi	r16,r2,1
2002d808:	8421883a 	add	r16,r16,r16
2002d80c:	8421883a 	add	r16,r16,r16
2002d810:	84402004 	addi	r17,r16,128
2002d814:	a463883a 	add	r17,r20,r17
2002d818:	a421883a 	add	r16,r20,r16
2002d81c:	e0001e26 	beq	fp,zero,2002d898 <__call_exitprocs+0xf4>
2002d820:	80804017 	ldw	r2,256(r16)
2002d824:	e0801c26 	beq	fp,r2,2002d898 <__call_exitprocs+0xf4>
2002d828:	bdffffc4 	addi	r23,r23,-1
2002d82c:	843fff04 	addi	r16,r16,-4
2002d830:	8c7fff04 	addi	r17,r17,-4
2002d834:	bd7ff91e 	bne	r23,r21,2002d81c <__flash_rwdata_start+0xfffffd34>
2002d838:	00800034 	movhi	r2,0
2002d83c:	10800004 	addi	r2,r2,0
2002d840:	10000926 	beq	r2,zero,2002d868 <__call_exitprocs+0xc4>
2002d844:	a0800117 	ldw	r2,4(r20)
2002d848:	1000301e 	bne	r2,zero,2002d90c <__call_exitprocs+0x168>
2002d84c:	a0800017 	ldw	r2,0(r20)
2002d850:	10003226 	beq	r2,zero,2002d91c <__call_exitprocs+0x178>
2002d854:	a009883a 	mov	r4,r20
2002d858:	98800015 	stw	r2,0(r19)
2002d85c:	00000000 	call	20000000 <__alt_data_end+0x1c000000>
2002d860:	9d000017 	ldw	r20,0(r19)
2002d864:	a03fe41e 	bne	r20,zero,2002d7f8 <__flash_rwdata_start+0xfffffd10>
2002d868:	dfc00a17 	ldw	ra,40(sp)
2002d86c:	df000917 	ldw	fp,36(sp)
2002d870:	ddc00817 	ldw	r23,32(sp)
2002d874:	dd800717 	ldw	r22,28(sp)
2002d878:	dd400617 	ldw	r21,24(sp)
2002d87c:	dd000517 	ldw	r20,20(sp)
2002d880:	dcc00417 	ldw	r19,16(sp)
2002d884:	dc800317 	ldw	r18,12(sp)
2002d888:	dc400217 	ldw	r17,8(sp)
2002d88c:	dc000117 	ldw	r16,4(sp)
2002d890:	dec00b04 	addi	sp,sp,44
2002d894:	f800283a 	ret
2002d898:	a0800117 	ldw	r2,4(r20)
2002d89c:	80c00017 	ldw	r3,0(r16)
2002d8a0:	10bfffc4 	addi	r2,r2,-1
2002d8a4:	15c01426 	beq	r2,r23,2002d8f8 <__call_exitprocs+0x154>
2002d8a8:	80000015 	stw	zero,0(r16)
2002d8ac:	183fde26 	beq	r3,zero,2002d828 <__flash_rwdata_start+0xfffffd40>
2002d8b0:	95c8983a 	sll	r4,r18,r23
2002d8b4:	a0806217 	ldw	r2,392(r20)
2002d8b8:	a5800117 	ldw	r22,4(r20)
2002d8bc:	2084703a 	and	r2,r4,r2
2002d8c0:	10000b26 	beq	r2,zero,2002d8f0 <__call_exitprocs+0x14c>
2002d8c4:	a0806317 	ldw	r2,396(r20)
2002d8c8:	2088703a 	and	r4,r4,r2
2002d8cc:	20000c1e 	bne	r4,zero,2002d900 <__call_exitprocs+0x15c>
2002d8d0:	89400017 	ldw	r5,0(r17)
2002d8d4:	d9000017 	ldw	r4,0(sp)
2002d8d8:	183ee83a 	callr	r3
2002d8dc:	a0800117 	ldw	r2,4(r20)
2002d8e0:	15bfbf1e 	bne	r2,r22,2002d7e0 <__flash_rwdata_start+0xfffffcf8>
2002d8e4:	98800017 	ldw	r2,0(r19)
2002d8e8:	153fcf26 	beq	r2,r20,2002d828 <__flash_rwdata_start+0xfffffd40>
2002d8ec:	003fbc06 	br	2002d7e0 <__flash_rwdata_start+0xfffffcf8>
2002d8f0:	183ee83a 	callr	r3
2002d8f4:	003ff906 	br	2002d8dc <__flash_rwdata_start+0xfffffdf4>
2002d8f8:	a5c00115 	stw	r23,4(r20)
2002d8fc:	003feb06 	br	2002d8ac <__flash_rwdata_start+0xfffffdc4>
2002d900:	89000017 	ldw	r4,0(r17)
2002d904:	183ee83a 	callr	r3
2002d908:	003ff406 	br	2002d8dc <__flash_rwdata_start+0xfffffdf4>
2002d90c:	a0800017 	ldw	r2,0(r20)
2002d910:	a027883a 	mov	r19,r20
2002d914:	1029883a 	mov	r20,r2
2002d918:	003fb606 	br	2002d7f4 <__flash_rwdata_start+0xfffffd0c>
2002d91c:	0005883a 	mov	r2,zero
2002d920:	003ffb06 	br	2002d910 <__flash_rwdata_start+0xfffffe28>

2002d924 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
2002d924:	defffd04 	addi	sp,sp,-12
2002d928:	df000215 	stw	fp,8(sp)
2002d92c:	df000204 	addi	fp,sp,8
2002d930:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
2002d934:	d0203a45 	stb	zero,-32535(gp)
2002d938:	e0bfff17 	ldw	r2,-4(fp)
2002d93c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
2002d940:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2002d944:	10000226 	beq	r2,zero,2002d950 <_exit+0x2c>
    ALT_SIM_FAIL();
2002d948:	002af070 	cmpltui	zero,zero,43969
2002d94c:	00000106 	br	2002d954 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
2002d950:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
2002d954:	003fff06 	br	2002d954 <__flash_rwdata_start+0xfffffe6c>
